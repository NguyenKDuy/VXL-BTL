
VXL-BTL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049b4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000178  08004ac0  08004ac0  00014ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c38  08004c38  000200c4  2**0
                  CONTENTS
  4 .ARM          00000000  08004c38  08004c38  000200c4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004c38  08004c38  000200c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c38  08004c38  00014c38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c3c  08004c3c  00014c3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  08004c40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000228  200000c4  08004d04  000200c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ec  08004d04  000202ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000162eb  00000000  00000000  000200ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f05  00000000  00000000  000363d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c8  00000000  00000000  000392e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fa0  00000000  00000000  0003a3a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a033  00000000  00000000  0003b348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015d26  00000000  00000000  0005537b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dbf3  00000000  00000000  0006b0a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f8c94  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048ac  00000000  00000000  000f8ce8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000c4 	.word	0x200000c4
 8000128:	00000000 	.word	0x00000000
 800012c:	08004aa8 	.word	0x08004aa8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000c8 	.word	0x200000c8
 8000148:	08004aa8 	.word	0x08004aa8

0800014c <getKeyInput>:
int button_counter[NUM_BUT];
int counter[NUM_BUT] = {100,100,100};
int button_flag[NUM_BUT];


void getKeyInput(){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_BUT; i++) {
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e068      	b.n	800022a <getKeyInput+0xde>
		KeyReg0[i] = KeyReg1[i];
 8000158:	4a38      	ldr	r2, [pc, #224]	; (800023c <getKeyInput+0xf0>)
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000160:	4937      	ldr	r1, [pc, #220]	; (8000240 <getKeyInput+0xf4>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg2[i];
 8000168:	4a36      	ldr	r2, [pc, #216]	; (8000244 <getKeyInput+0xf8>)
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000170:	4932      	ldr	r1, [pc, #200]	; (800023c <getKeyInput+0xf0>)
 8000172:	687b      	ldr	r3, [r7, #4]
 8000174:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg2[i] = isReadfrom(i);
 8000178:	6878      	ldr	r0, [r7, #4]
 800017a:	f000 f88d 	bl	8000298 <isReadfrom>
 800017e:	4602      	mov	r2, r0
 8000180:	4930      	ldr	r1, [pc, #192]	; (8000244 <getKeyInput+0xf8>)
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if (KeyReg0[i] == KeyReg1[i] && KeyReg1[i] == KeyReg2[i]){
 8000188:	4a2d      	ldr	r2, [pc, #180]	; (8000240 <getKeyInput+0xf4>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000190:	492a      	ldr	r1, [pc, #168]	; (800023c <getKeyInput+0xf0>)
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000198:	429a      	cmp	r2, r3
 800019a:	d143      	bne.n	8000224 <getKeyInput+0xd8>
 800019c:	4a27      	ldr	r2, [pc, #156]	; (800023c <getKeyInput+0xf0>)
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001a4:	4927      	ldr	r1, [pc, #156]	; (8000244 <getKeyInput+0xf8>)
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001ac:	429a      	cmp	r2, r3
 80001ae:	d139      	bne.n	8000224 <getKeyInput+0xd8>
			if (KeyReg3[i] != KeyReg2[i]){
 80001b0:	4a25      	ldr	r2, [pc, #148]	; (8000248 <getKeyInput+0xfc>)
 80001b2:	687b      	ldr	r3, [r7, #4]
 80001b4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b8:	4922      	ldr	r1, [pc, #136]	; (8000244 <getKeyInput+0xf8>)
 80001ba:	687b      	ldr	r3, [r7, #4]
 80001bc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001c0:	429a      	cmp	r2, r3
 80001c2:	d01b      	beq.n	80001fc <getKeyInput+0xb0>
				KeyReg3[i] = KeyReg2[i];
 80001c4:	4a1f      	ldr	r2, [pc, #124]	; (8000244 <getKeyInput+0xf8>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001cc:	491e      	ldr	r1, [pc, #120]	; (8000248 <getKeyInput+0xfc>)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (KeyReg2[i] == PRESSED){
 80001d4:	4a1b      	ldr	r2, [pc, #108]	; (8000244 <getKeyInput+0xf8>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d121      	bne.n	8000224 <getKeyInput+0xd8>
					button_counter[i] = counter[i];
 80001e0:	4a1a      	ldr	r2, [pc, #104]	; (800024c <getKeyInput+0x100>)
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001e8:	4919      	ldr	r1, [pc, #100]	; (8000250 <getKeyInput+0x104>)
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					button_flag[i] = 1;
 80001f0:	4a18      	ldr	r2, [pc, #96]	; (8000254 <getKeyInput+0x108>)
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	2101      	movs	r1, #1
 80001f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80001fa:	e013      	b.n	8000224 <getKeyInput+0xd8>
				}
			}
			else {
				button_counter[i]--;
 80001fc:	4a14      	ldr	r2, [pc, #80]	; (8000250 <getKeyInput+0x104>)
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000204:	1e5a      	subs	r2, r3, #1
 8000206:	4912      	ldr	r1, [pc, #72]	; (8000250 <getKeyInput+0x104>)
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (button_counter[i] == 0) {
 800020e:	4a10      	ldr	r2, [pc, #64]	; (8000250 <getKeyInput+0x104>)
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000216:	2b00      	cmp	r3, #0
 8000218:	d104      	bne.n	8000224 <getKeyInput+0xd8>
					KeyReg3[i] = NORMAL;
 800021a:	4a0b      	ldr	r2, [pc, #44]	; (8000248 <getKeyInput+0xfc>)
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	2101      	movs	r1, #1
 8000220:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < NUM_BUT; i++) {
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	3301      	adds	r3, #1
 8000228:	607b      	str	r3, [r7, #4]
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	2b02      	cmp	r3, #2
 800022e:	dd93      	ble.n	8000158 <getKeyInput+0xc>
				}
			}
		}
	}
}
 8000230:	bf00      	nop
 8000232:	bf00      	nop
 8000234:	3708      	adds	r7, #8
 8000236:	46bd      	mov	sp, r7
 8000238:	bd80      	pop	{r7, pc}
 800023a:	bf00      	nop
 800023c:	2000000c 	.word	0x2000000c
 8000240:	20000000 	.word	0x20000000
 8000244:	20000018 	.word	0x20000018
 8000248:	20000024 	.word	0x20000024
 800024c:	20000030 	.word	0x20000030
 8000250:	200000fc 	.word	0x200000fc
 8000254:	20000108 	.word	0x20000108

08000258 <isKeyPressed>:
int isKeyPressed(int index) {
 8000258:	b480      	push	{r7}
 800025a:	b083      	sub	sp, #12
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
	if (index <NUM_BUT) {
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	2b02      	cmp	r3, #2
 8000264:	dc0e      	bgt.n	8000284 <isKeyPressed+0x2c>
		if (button_flag[index] == 1){
 8000266:	4a0b      	ldr	r2, [pc, #44]	; (8000294 <isKeyPressed+0x3c>)
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800026e:	2b01      	cmp	r3, #1
 8000270:	d106      	bne.n	8000280 <isKeyPressed+0x28>
			button_flag[index] = 0;
 8000272:	4a08      	ldr	r2, [pc, #32]	; (8000294 <isKeyPressed+0x3c>)
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	2100      	movs	r1, #0
 8000278:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			return 1;
 800027c:	2301      	movs	r3, #1
 800027e:	e003      	b.n	8000288 <isKeyPressed+0x30>
		}
		return 0;
 8000280:	2300      	movs	r3, #0
 8000282:	e001      	b.n	8000288 <isKeyPressed+0x30>
	}
	return -1;
 8000284:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000288:	4618      	mov	r0, r3
 800028a:	370c      	adds	r7, #12
 800028c:	46bd      	mov	sp, r7
 800028e:	bc80      	pop	{r7}
 8000290:	4770      	bx	lr
 8000292:	bf00      	nop
 8000294:	20000108 	.word	0x20000108

08000298 <isReadfrom>:



int isReadfrom (int index) {
 8000298:	b580      	push	{r7, lr}
 800029a:	b082      	sub	sp, #8
 800029c:	af00      	add	r7, sp, #0
 800029e:	6078      	str	r0, [r7, #4]
	if (index < NUM_BUT) {
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	2b02      	cmp	r3, #2
 80002a4:	dc20      	bgt.n	80002e8 <isReadfrom+0x50>
		switch (index){
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	2b02      	cmp	r3, #2
 80002aa:	d016      	beq.n	80002da <isReadfrom+0x42>
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	2b02      	cmp	r3, #2
 80002b0:	dc1c      	bgt.n	80002ec <isReadfrom+0x54>
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d003      	beq.n	80002c0 <isReadfrom+0x28>
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	2b01      	cmp	r3, #1
 80002bc:	d006      	beq.n	80002cc <isReadfrom+0x34>
				break;
			case 2:
				return HAL_GPIO_ReadPin(D7_btn2_GPIO_Port, D7_btn2_Pin);
				break;
			default:
				break;
 80002be:	e015      	b.n	80002ec <isReadfrom+0x54>
				return HAL_GPIO_ReadPin(D5_btn0_GPIO_Port, D5_btn0_Pin);
 80002c0:	2110      	movs	r1, #16
 80002c2:	480e      	ldr	r0, [pc, #56]	; (80002fc <isReadfrom+0x64>)
 80002c4:	f002 f9a0 	bl	8002608 <HAL_GPIO_ReadPin>
 80002c8:	4603      	mov	r3, r0
 80002ca:	e012      	b.n	80002f2 <isReadfrom+0x5a>
				return HAL_GPIO_ReadPin(D6_btn1_GPIO_Port, D6_btn1_Pin);
 80002cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002d0:	480a      	ldr	r0, [pc, #40]	; (80002fc <isReadfrom+0x64>)
 80002d2:	f002 f999 	bl	8002608 <HAL_GPIO_ReadPin>
 80002d6:	4603      	mov	r3, r0
 80002d8:	e00b      	b.n	80002f2 <isReadfrom+0x5a>
				return HAL_GPIO_ReadPin(D7_btn2_GPIO_Port, D7_btn2_Pin);
 80002da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80002de:	4808      	ldr	r0, [pc, #32]	; (8000300 <isReadfrom+0x68>)
 80002e0:	f002 f992 	bl	8002608 <HAL_GPIO_ReadPin>
 80002e4:	4603      	mov	r3, r0
 80002e6:	e004      	b.n	80002f2 <isReadfrom+0x5a>
		}
	}
 80002e8:	bf00      	nop
 80002ea:	e000      	b.n	80002ee <isReadfrom+0x56>
				break;
 80002ec:	bf00      	nop
	return -1;
 80002ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80002f2:	4618      	mov	r0, r3
 80002f4:	3708      	adds	r7, #8
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	40010c00 	.word	0x40010c00
 8000300:	40010800 	.word	0x40010800

08000304 <setCount>:

int count0, count1;
int led_buffer[4];
int second = 0;

void setCount (int index, int value) {
 8000304:	b480      	push	{r7}
 8000306:	b083      	sub	sp, #12
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
 800030c:	6039      	str	r1, [r7, #0]
	if (index == 0) count0 = value;
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	2b00      	cmp	r3, #0
 8000312:	d102      	bne.n	800031a <setCount+0x16>
 8000314:	4a06      	ldr	r2, [pc, #24]	; (8000330 <setCount+0x2c>)
 8000316:	683b      	ldr	r3, [r7, #0]
 8000318:	6013      	str	r3, [r2, #0]
	if (index == 1)	count1 = value;
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	2b01      	cmp	r3, #1
 800031e:	d102      	bne.n	8000326 <setCount+0x22>
 8000320:	4a04      	ldr	r2, [pc, #16]	; (8000334 <setCount+0x30>)
 8000322:	683b      	ldr	r3, [r7, #0]
 8000324:	6013      	str	r3, [r2, #0]
}
 8000326:	bf00      	nop
 8000328:	370c      	adds	r7, #12
 800032a:	46bd      	mov	sp, r7
 800032c:	bc80      	pop	{r7}
 800032e:	4770      	bx	lr
 8000330:	20000128 	.word	0x20000128
 8000334:	20000124 	.word	0x20000124

08000338 <minusCount>:
void minusCount(){
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
	count0--;
 800033c:	4b06      	ldr	r3, [pc, #24]	; (8000358 <minusCount+0x20>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	3b01      	subs	r3, #1
 8000342:	4a05      	ldr	r2, [pc, #20]	; (8000358 <minusCount+0x20>)
 8000344:	6013      	str	r3, [r2, #0]
	count1--;
 8000346:	4b05      	ldr	r3, [pc, #20]	; (800035c <minusCount+0x24>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	3b01      	subs	r3, #1
 800034c:	4a03      	ldr	r2, [pc, #12]	; (800035c <minusCount+0x24>)
 800034e:	6013      	str	r3, [r2, #0]
}
 8000350:	bf00      	nop
 8000352:	46bd      	mov	sp, r7
 8000354:	bc80      	pop	{r7}
 8000356:	4770      	bx	lr
 8000358:	20000128 	.word	0x20000128
 800035c:	20000124 	.word	0x20000124

08000360 <getCount>:
int getCount (int index) {
 8000360:	b480      	push	{r7}
 8000362:	b083      	sub	sp, #12
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
	if (index ==0) return count0;
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	2b00      	cmp	r3, #0
 800036c:	d102      	bne.n	8000374 <getCount+0x14>
 800036e:	4b08      	ldr	r3, [pc, #32]	; (8000390 <getCount+0x30>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	e007      	b.n	8000384 <getCount+0x24>
	if (index ==1) return count1;
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	2b01      	cmp	r3, #1
 8000378:	d102      	bne.n	8000380 <getCount+0x20>
 800037a:	4b06      	ldr	r3, [pc, #24]	; (8000394 <getCount+0x34>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	e001      	b.n	8000384 <getCount+0x24>
	return -1;
 8000380:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000384:	4618      	mov	r0, r3
 8000386:	370c      	adds	r7, #12
 8000388:	46bd      	mov	sp, r7
 800038a:	bc80      	pop	{r7}
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop
 8000390:	20000128 	.word	0x20000128
 8000394:	20000124 	.word	0x20000124

08000398 <fsm_INIT>:

void fsm_INIT() {
 8000398:	b598      	push	{r3, r4, r7, lr}
 800039a:	af00      	add	r7, sp, #0
	status = MODE0;
 800039c:	4b18      	ldr	r3, [pc, #96]	; (8000400 <fsm_INIT+0x68>)
 800039e:	2201      	movs	r2, #1
 80003a0:	601a      	str	r2, [r3, #0]
	set_off0_off1();
 80003a2:	f001 fcf7 	bl	8001d94 <set_off0_off1>
	count0 = RedTime();
 80003a6:	f000 fbef 	bl	8000b88 <RedTime>
 80003aa:	4603      	mov	r3, r0
 80003ac:	4a15      	ldr	r2, [pc, #84]	; (8000404 <fsm_INIT+0x6c>)
 80003ae:	6013      	str	r3, [r2, #0]
	count1 = GreenTime();
 80003b0:	f000 fbe0 	bl	8000b74 <GreenTime>
 80003b4:	4603      	mov	r3, r0
 80003b6:	4a14      	ldr	r2, [pc, #80]	; (8000408 <fsm_INIT+0x70>)
 80003b8:	6013      	str	r3, [r2, #0]
	setBuffer(RedTime(), GreenTime());
 80003ba:	f000 fbe5 	bl	8000b88 <RedTime>
 80003be:	4604      	mov	r4, r0
 80003c0:	f000 fbd8 	bl	8000b74 <GreenTime>
 80003c4:	4603      	mov	r3, r0
 80003c6:	4619      	mov	r1, r3
 80003c8:	4620      	mov	r0, r4
 80003ca:	f000 ffb1 	bl	8001330 <setBuffer>
	if (second < 1) {
 80003ce:	4b0f      	ldr	r3, [pc, #60]	; (800040c <fsm_INIT+0x74>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	dc0a      	bgt.n	80003ec <fsm_INIT+0x54>
		SCH_Add_Task(fsm_INIT, 250, 0);
 80003d6:	2200      	movs	r2, #0
 80003d8:	21fa      	movs	r1, #250	; 0xfa
 80003da:	480d      	ldr	r0, [pc, #52]	; (8000410 <fsm_INIT+0x78>)
 80003dc:	f001 faf4 	bl	80019c8 <SCH_Add_Task>
		second++;
 80003e0:	4b0a      	ldr	r3, [pc, #40]	; (800040c <fsm_INIT+0x74>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	3301      	adds	r3, #1
 80003e6:	4a09      	ldr	r2, [pc, #36]	; (800040c <fsm_INIT+0x74>)
 80003e8:	6013      	str	r3, [r2, #0]
	}
	else {
		second = 0;
		SCH_Add_Task(fsm_AUTO_RED_GREEN, 250, 0);
	}
}
 80003ea:	e007      	b.n	80003fc <fsm_INIT+0x64>
		second = 0;
 80003ec:	4b07      	ldr	r3, [pc, #28]	; (800040c <fsm_INIT+0x74>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	601a      	str	r2, [r3, #0]
		SCH_Add_Task(fsm_AUTO_RED_GREEN, 250, 0);
 80003f2:	2200      	movs	r2, #0
 80003f4:	21fa      	movs	r1, #250	; 0xfa
 80003f6:	4807      	ldr	r0, [pc, #28]	; (8000414 <fsm_INIT+0x7c>)
 80003f8:	f001 fae6 	bl	80019c8 <SCH_Add_Task>
}
 80003fc:	bf00      	nop
 80003fe:	bd98      	pop	{r3, r4, r7, pc}
 8000400:	200000e8 	.word	0x200000e8
 8000404:	20000128 	.word	0x20000128
 8000408:	20000124 	.word	0x20000124
 800040c:	200000e0 	.word	0x200000e0
 8000410:	08000399 	.word	0x08000399
 8000414:	08000419 	.word	0x08000419

08000418 <fsm_AUTO_RED_GREEN>:

void fsm_AUTO_RED_GREEN () {
 8000418:	b580      	push	{r7, lr}
 800041a:	b084      	sub	sp, #16
 800041c:	af00      	add	r7, sp, #0
	if (status == MAN_RED_GREEN) lcd_clear_display();
 800041e:	4b43      	ldr	r3, [pc, #268]	; (800052c <fsm_AUTO_RED_GREEN+0x114>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	2b06      	cmp	r3, #6
 8000424:	d101      	bne.n	800042a <fsm_AUTO_RED_GREEN+0x12>
 8000426:	f000 ff4e 	bl	80012c6 <lcd_clear_display>
	set_red0_green1();
 800042a:	f001 fccf 	bl	8001dcc <set_red0_green1>

	char buffer[16];
	lcd_goto_XY(0, 1);
 800042e:	2101      	movs	r1, #1
 8000430:	2000      	movs	r0, #0
 8000432:	f000 ff52 	bl	80012da <lcd_goto_XY>
	lcd_goto_XY(1, 0);
 8000436:	2100      	movs	r1, #0
 8000438:	2001      	movs	r0, #1
 800043a:	f000 ff4e 	bl	80012da <lcd_goto_XY>
	if (count0 < 10) {
 800043e:	4b3c      	ldr	r3, [pc, #240]	; (8000530 <fsm_AUTO_RED_GREEN+0x118>)
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	2b09      	cmp	r3, #9
 8000444:	dc07      	bgt.n	8000456 <fsm_AUTO_RED_GREEN+0x3e>
		sprintf(buffer,"TrafficX: 0%d", count0);
 8000446:	4b3a      	ldr	r3, [pc, #232]	; (8000530 <fsm_AUTO_RED_GREEN+0x118>)
 8000448:	681a      	ldr	r2, [r3, #0]
 800044a:	463b      	mov	r3, r7
 800044c:	4939      	ldr	r1, [pc, #228]	; (8000534 <fsm_AUTO_RED_GREEN+0x11c>)
 800044e:	4618      	mov	r0, r3
 8000450:	f003 ffa6 	bl	80043a0 <siprintf>
 8000454:	e006      	b.n	8000464 <fsm_AUTO_RED_GREEN+0x4c>
	}
	else {
		sprintf(buffer,"TrafficX: %d", count0);
 8000456:	4b36      	ldr	r3, [pc, #216]	; (8000530 <fsm_AUTO_RED_GREEN+0x118>)
 8000458:	681a      	ldr	r2, [r3, #0]
 800045a:	463b      	mov	r3, r7
 800045c:	4936      	ldr	r1, [pc, #216]	; (8000538 <fsm_AUTO_RED_GREEN+0x120>)
 800045e:	4618      	mov	r0, r3
 8000460:	f003 ff9e 	bl	80043a0 <siprintf>
	}
	lcd_send_string(buffer);
 8000464:	463b      	mov	r3, r7
 8000466:	4618      	mov	r0, r3
 8000468:	f000 ff18 	bl	800129c <lcd_send_string>
	if (count0 < 10) {
 800046c:	4b30      	ldr	r3, [pc, #192]	; (8000530 <fsm_AUTO_RED_GREEN+0x118>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	2b09      	cmp	r3, #9
 8000472:	dc07      	bgt.n	8000484 <fsm_AUTO_RED_GREEN+0x6c>
		sprintf(buffer,"TrafficY: 0%d", count1);
 8000474:	4b31      	ldr	r3, [pc, #196]	; (800053c <fsm_AUTO_RED_GREEN+0x124>)
 8000476:	681a      	ldr	r2, [r3, #0]
 8000478:	463b      	mov	r3, r7
 800047a:	4931      	ldr	r1, [pc, #196]	; (8000540 <fsm_AUTO_RED_GREEN+0x128>)
 800047c:	4618      	mov	r0, r3
 800047e:	f003 ff8f 	bl	80043a0 <siprintf>
 8000482:	e006      	b.n	8000492 <fsm_AUTO_RED_GREEN+0x7a>
	}
	else {
		sprintf(buffer,"TrafficY: %d", count1);
 8000484:	4b2d      	ldr	r3, [pc, #180]	; (800053c <fsm_AUTO_RED_GREEN+0x124>)
 8000486:	681a      	ldr	r2, [r3, #0]
 8000488:	463b      	mov	r3, r7
 800048a:	492e      	ldr	r1, [pc, #184]	; (8000544 <fsm_AUTO_RED_GREEN+0x12c>)
 800048c:	4618      	mov	r0, r3
 800048e:	f003 ff87 	bl	80043a0 <siprintf>
	}
	lcd_goto_XY(0, 1);
 8000492:	2101      	movs	r1, #1
 8000494:	2000      	movs	r0, #0
 8000496:	f000 ff20 	bl	80012da <lcd_goto_XY>
	lcd_send_string(buffer);
 800049a:	463b      	mov	r3, r7
 800049c:	4618      	mov	r0, r3
 800049e:	f000 fefd 	bl	800129c <lcd_send_string>

	status = AUTO_RED_GREEN;
 80004a2:	4b22      	ldr	r3, [pc, #136]	; (800052c <fsm_AUTO_RED_GREEN+0x114>)
 80004a4:	220a      	movs	r2, #10
 80004a6:	601a      	str	r2, [r3, #0]
	if (second < 3) {
 80004a8:	4b27      	ldr	r3, [pc, #156]	; (8000548 <fsm_AUTO_RED_GREEN+0x130>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	2b02      	cmp	r3, #2
 80004ae:	dc0a      	bgt.n	80004c6 <fsm_AUTO_RED_GREEN+0xae>
			SCH_Add_Task(fsm_AUTO_RED_GREEN, 250, 0);
 80004b0:	2200      	movs	r2, #0
 80004b2:	21fa      	movs	r1, #250	; 0xfa
 80004b4:	4825      	ldr	r0, [pc, #148]	; (800054c <fsm_AUTO_RED_GREEN+0x134>)
 80004b6:	f001 fa87 	bl	80019c8 <SCH_Add_Task>
			second++;
 80004ba:	4b23      	ldr	r3, [pc, #140]	; (8000548 <fsm_AUTO_RED_GREEN+0x130>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	3301      	adds	r3, #1
 80004c0:	4a21      	ldr	r2, [pc, #132]	; (8000548 <fsm_AUTO_RED_GREEN+0x130>)
 80004c2:	6013      	str	r3, [r2, #0]
		}
		else {
			SCH_Add_Task(fsm_AUTO_RED_GREEN, 250, 0);
		}
	}
}
 80004c4:	e02d      	b.n	8000522 <fsm_AUTO_RED_GREEN+0x10a>
		second = 0;
 80004c6:	4b20      	ldr	r3, [pc, #128]	; (8000548 <fsm_AUTO_RED_GREEN+0x130>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	601a      	str	r2, [r3, #0]
		minusCount();
 80004cc:	f7ff ff34 	bl	8000338 <minusCount>
		setBuffer(count0, count1);
 80004d0:	4b17      	ldr	r3, [pc, #92]	; (8000530 <fsm_AUTO_RED_GREEN+0x118>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	4a19      	ldr	r2, [pc, #100]	; (800053c <fsm_AUTO_RED_GREEN+0x124>)
 80004d6:	6812      	ldr	r2, [r2, #0]
 80004d8:	4611      	mov	r1, r2
 80004da:	4618      	mov	r0, r3
 80004dc:	f000 ff28 	bl	8001330 <setBuffer>
		if (count1 == 0) {
 80004e0:	4b16      	ldr	r3, [pc, #88]	; (800053c <fsm_AUTO_RED_GREEN+0x124>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d117      	bne.n	8000518 <fsm_AUTO_RED_GREEN+0x100>
			SCH_Add_Task(fsm_AUTO_RED_YELLOW, 250, 0);
 80004e8:	2200      	movs	r2, #0
 80004ea:	21fa      	movs	r1, #250	; 0xfa
 80004ec:	4818      	ldr	r0, [pc, #96]	; (8000550 <fsm_AUTO_RED_GREEN+0x138>)
 80004ee:	f001 fa6b 	bl	80019c8 <SCH_Add_Task>
			count1 = AmberTime();
 80004f2:	f000 fb53 	bl	8000b9c <AmberTime>
 80004f6:	4603      	mov	r3, r0
 80004f8:	4a10      	ldr	r2, [pc, #64]	; (800053c <fsm_AUTO_RED_GREEN+0x124>)
 80004fa:	6013      	str	r3, [r2, #0]
			count0 = AmberTime();
 80004fc:	f000 fb4e 	bl	8000b9c <AmberTime>
 8000500:	4603      	mov	r3, r0
 8000502:	4a0b      	ldr	r2, [pc, #44]	; (8000530 <fsm_AUTO_RED_GREEN+0x118>)
 8000504:	6013      	str	r3, [r2, #0]
			setBuffer(count0, count1);
 8000506:	4b0a      	ldr	r3, [pc, #40]	; (8000530 <fsm_AUTO_RED_GREEN+0x118>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	4a0c      	ldr	r2, [pc, #48]	; (800053c <fsm_AUTO_RED_GREEN+0x124>)
 800050c:	6812      	ldr	r2, [r2, #0]
 800050e:	4611      	mov	r1, r2
 8000510:	4618      	mov	r0, r3
 8000512:	f000 ff0d 	bl	8001330 <setBuffer>
}
 8000516:	e004      	b.n	8000522 <fsm_AUTO_RED_GREEN+0x10a>
			SCH_Add_Task(fsm_AUTO_RED_GREEN, 250, 0);
 8000518:	2200      	movs	r2, #0
 800051a:	21fa      	movs	r1, #250	; 0xfa
 800051c:	480b      	ldr	r0, [pc, #44]	; (800054c <fsm_AUTO_RED_GREEN+0x134>)
 800051e:	f001 fa53 	bl	80019c8 <SCH_Add_Task>
}
 8000522:	bf00      	nop
 8000524:	3710      	adds	r7, #16
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	200000e8 	.word	0x200000e8
 8000530:	20000128 	.word	0x20000128
 8000534:	08004ac0 	.word	0x08004ac0
 8000538:	08004ad0 	.word	0x08004ad0
 800053c:	20000124 	.word	0x20000124
 8000540:	08004ae0 	.word	0x08004ae0
 8000544:	08004af0 	.word	0x08004af0
 8000548:	200000e0 	.word	0x200000e0
 800054c:	08000419 	.word	0x08000419
 8000550:	08000555 	.word	0x08000555

08000554 <fsm_AUTO_RED_YELLOW>:

void fsm_AUTO_RED_YELLOW () {
 8000554:	b580      	push	{r7, lr}
 8000556:	b084      	sub	sp, #16
 8000558:	af00      	add	r7, sp, #0
	if (status == MAN_RED_YELLOW) lcd_clear_display();
 800055a:	4b43      	ldr	r3, [pc, #268]	; (8000668 <fsm_AUTO_RED_YELLOW+0x114>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	2b07      	cmp	r3, #7
 8000560:	d101      	bne.n	8000566 <fsm_AUTO_RED_YELLOW+0x12>
 8000562:	f000 feb0 	bl	80012c6 <lcd_clear_display>
	set_red0_amber1();
 8000566:	f001 fc4d 	bl	8001e04 <set_red0_amber1>

	char buffer[16];
	lcd_goto_XY(0, 1);
 800056a:	2101      	movs	r1, #1
 800056c:	2000      	movs	r0, #0
 800056e:	f000 feb4 	bl	80012da <lcd_goto_XY>
	lcd_goto_XY(1, 0);
 8000572:	2100      	movs	r1, #0
 8000574:	2001      	movs	r0, #1
 8000576:	f000 feb0 	bl	80012da <lcd_goto_XY>
	if (count0 < 10) {
 800057a:	4b3c      	ldr	r3, [pc, #240]	; (800066c <fsm_AUTO_RED_YELLOW+0x118>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	2b09      	cmp	r3, #9
 8000580:	dc07      	bgt.n	8000592 <fsm_AUTO_RED_YELLOW+0x3e>
		sprintf(buffer,"TrafficX: 0%d", count0);
 8000582:	4b3a      	ldr	r3, [pc, #232]	; (800066c <fsm_AUTO_RED_YELLOW+0x118>)
 8000584:	681a      	ldr	r2, [r3, #0]
 8000586:	463b      	mov	r3, r7
 8000588:	4939      	ldr	r1, [pc, #228]	; (8000670 <fsm_AUTO_RED_YELLOW+0x11c>)
 800058a:	4618      	mov	r0, r3
 800058c:	f003 ff08 	bl	80043a0 <siprintf>
 8000590:	e006      	b.n	80005a0 <fsm_AUTO_RED_YELLOW+0x4c>
	}
	else {
		sprintf(buffer,"TrafficX: %d", count0);
 8000592:	4b36      	ldr	r3, [pc, #216]	; (800066c <fsm_AUTO_RED_YELLOW+0x118>)
 8000594:	681a      	ldr	r2, [r3, #0]
 8000596:	463b      	mov	r3, r7
 8000598:	4936      	ldr	r1, [pc, #216]	; (8000674 <fsm_AUTO_RED_YELLOW+0x120>)
 800059a:	4618      	mov	r0, r3
 800059c:	f003 ff00 	bl	80043a0 <siprintf>
	}
	lcd_send_string(buffer);
 80005a0:	463b      	mov	r3, r7
 80005a2:	4618      	mov	r0, r3
 80005a4:	f000 fe7a 	bl	800129c <lcd_send_string>
	if (count0 < 10) {
 80005a8:	4b30      	ldr	r3, [pc, #192]	; (800066c <fsm_AUTO_RED_YELLOW+0x118>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	2b09      	cmp	r3, #9
 80005ae:	dc07      	bgt.n	80005c0 <fsm_AUTO_RED_YELLOW+0x6c>
		sprintf(buffer,"TrafficY: 0%d", count1);
 80005b0:	4b31      	ldr	r3, [pc, #196]	; (8000678 <fsm_AUTO_RED_YELLOW+0x124>)
 80005b2:	681a      	ldr	r2, [r3, #0]
 80005b4:	463b      	mov	r3, r7
 80005b6:	4931      	ldr	r1, [pc, #196]	; (800067c <fsm_AUTO_RED_YELLOW+0x128>)
 80005b8:	4618      	mov	r0, r3
 80005ba:	f003 fef1 	bl	80043a0 <siprintf>
 80005be:	e006      	b.n	80005ce <fsm_AUTO_RED_YELLOW+0x7a>
	}
	else {
		sprintf(buffer,"TrafficY: %d", count1);
 80005c0:	4b2d      	ldr	r3, [pc, #180]	; (8000678 <fsm_AUTO_RED_YELLOW+0x124>)
 80005c2:	681a      	ldr	r2, [r3, #0]
 80005c4:	463b      	mov	r3, r7
 80005c6:	492e      	ldr	r1, [pc, #184]	; (8000680 <fsm_AUTO_RED_YELLOW+0x12c>)
 80005c8:	4618      	mov	r0, r3
 80005ca:	f003 fee9 	bl	80043a0 <siprintf>
	}
	lcd_goto_XY(0, 1);
 80005ce:	2101      	movs	r1, #1
 80005d0:	2000      	movs	r0, #0
 80005d2:	f000 fe82 	bl	80012da <lcd_goto_XY>
	lcd_send_string(buffer);
 80005d6:	463b      	mov	r3, r7
 80005d8:	4618      	mov	r0, r3
 80005da:	f000 fe5f 	bl	800129c <lcd_send_string>

	status = AUTO_RED_YELLOW;
 80005de:	4b22      	ldr	r3, [pc, #136]	; (8000668 <fsm_AUTO_RED_YELLOW+0x114>)
 80005e0:	220b      	movs	r2, #11
 80005e2:	601a      	str	r2, [r3, #0]
	if (second < 3) {
 80005e4:	4b27      	ldr	r3, [pc, #156]	; (8000684 <fsm_AUTO_RED_YELLOW+0x130>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	2b02      	cmp	r3, #2
 80005ea:	dc0a      	bgt.n	8000602 <fsm_AUTO_RED_YELLOW+0xae>
			SCH_Add_Task(fsm_AUTO_RED_YELLOW, 250, 0);
 80005ec:	2200      	movs	r2, #0
 80005ee:	21fa      	movs	r1, #250	; 0xfa
 80005f0:	4825      	ldr	r0, [pc, #148]	; (8000688 <fsm_AUTO_RED_YELLOW+0x134>)
 80005f2:	f001 f9e9 	bl	80019c8 <SCH_Add_Task>
			second++;
 80005f6:	4b23      	ldr	r3, [pc, #140]	; (8000684 <fsm_AUTO_RED_YELLOW+0x130>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	3301      	adds	r3, #1
 80005fc:	4a21      	ldr	r2, [pc, #132]	; (8000684 <fsm_AUTO_RED_YELLOW+0x130>)
 80005fe:	6013      	str	r3, [r2, #0]
		else {
			SCH_Add_Task(fsm_AUTO_RED_YELLOW, 250, 0);

		}
	}
}
 8000600:	e02d      	b.n	800065e <fsm_AUTO_RED_YELLOW+0x10a>
		second = 0;
 8000602:	4b20      	ldr	r3, [pc, #128]	; (8000684 <fsm_AUTO_RED_YELLOW+0x130>)
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
		minusCount();
 8000608:	f7ff fe96 	bl	8000338 <minusCount>
		setBuffer(count0, count1);
 800060c:	4b17      	ldr	r3, [pc, #92]	; (800066c <fsm_AUTO_RED_YELLOW+0x118>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a19      	ldr	r2, [pc, #100]	; (8000678 <fsm_AUTO_RED_YELLOW+0x124>)
 8000612:	6812      	ldr	r2, [r2, #0]
 8000614:	4611      	mov	r1, r2
 8000616:	4618      	mov	r0, r3
 8000618:	f000 fe8a 	bl	8001330 <setBuffer>
		if (count1 == 0) {
 800061c:	4b16      	ldr	r3, [pc, #88]	; (8000678 <fsm_AUTO_RED_YELLOW+0x124>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d117      	bne.n	8000654 <fsm_AUTO_RED_YELLOW+0x100>
			SCH_Add_Task(fsm_AUTO_GREEN_RED, 250, 0);
 8000624:	2200      	movs	r2, #0
 8000626:	21fa      	movs	r1, #250	; 0xfa
 8000628:	4818      	ldr	r0, [pc, #96]	; (800068c <fsm_AUTO_RED_YELLOW+0x138>)
 800062a:	f001 f9cd 	bl	80019c8 <SCH_Add_Task>
			count0 = GreenTime();
 800062e:	f000 faa1 	bl	8000b74 <GreenTime>
 8000632:	4603      	mov	r3, r0
 8000634:	4a0d      	ldr	r2, [pc, #52]	; (800066c <fsm_AUTO_RED_YELLOW+0x118>)
 8000636:	6013      	str	r3, [r2, #0]
			count1 = RedTime();
 8000638:	f000 faa6 	bl	8000b88 <RedTime>
 800063c:	4603      	mov	r3, r0
 800063e:	4a0e      	ldr	r2, [pc, #56]	; (8000678 <fsm_AUTO_RED_YELLOW+0x124>)
 8000640:	6013      	str	r3, [r2, #0]
			setBuffer(count0, count1);
 8000642:	4b0a      	ldr	r3, [pc, #40]	; (800066c <fsm_AUTO_RED_YELLOW+0x118>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4a0c      	ldr	r2, [pc, #48]	; (8000678 <fsm_AUTO_RED_YELLOW+0x124>)
 8000648:	6812      	ldr	r2, [r2, #0]
 800064a:	4611      	mov	r1, r2
 800064c:	4618      	mov	r0, r3
 800064e:	f000 fe6f 	bl	8001330 <setBuffer>
}
 8000652:	e004      	b.n	800065e <fsm_AUTO_RED_YELLOW+0x10a>
			SCH_Add_Task(fsm_AUTO_RED_YELLOW, 250, 0);
 8000654:	2200      	movs	r2, #0
 8000656:	21fa      	movs	r1, #250	; 0xfa
 8000658:	480b      	ldr	r0, [pc, #44]	; (8000688 <fsm_AUTO_RED_YELLOW+0x134>)
 800065a:	f001 f9b5 	bl	80019c8 <SCH_Add_Task>
}
 800065e:	bf00      	nop
 8000660:	3710      	adds	r7, #16
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	200000e8 	.word	0x200000e8
 800066c:	20000128 	.word	0x20000128
 8000670:	08004ac0 	.word	0x08004ac0
 8000674:	08004ad0 	.word	0x08004ad0
 8000678:	20000124 	.word	0x20000124
 800067c:	08004ae0 	.word	0x08004ae0
 8000680:	08004af0 	.word	0x08004af0
 8000684:	200000e0 	.word	0x200000e0
 8000688:	08000555 	.word	0x08000555
 800068c:	08000691 	.word	0x08000691

08000690 <fsm_AUTO_GREEN_RED>:

void fsm_AUTO_GREEN_RED () {
 8000690:	b580      	push	{r7, lr}
 8000692:	b084      	sub	sp, #16
 8000694:	af00      	add	r7, sp, #0
	if (status == MAN_GREEN_RED) lcd_clear_display();
 8000696:	4b43      	ldr	r3, [pc, #268]	; (80007a4 <fsm_AUTO_GREEN_RED+0x114>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	2b08      	cmp	r3, #8
 800069c:	d101      	bne.n	80006a2 <fsm_AUTO_GREEN_RED+0x12>
 800069e:	f000 fe12 	bl	80012c6 <lcd_clear_display>
	set_green0_red1();
 80006a2:	f001 fbcb 	bl	8001e3c <set_green0_red1>

	char buffer[16];
	lcd_goto_XY(0, 1);
 80006a6:	2101      	movs	r1, #1
 80006a8:	2000      	movs	r0, #0
 80006aa:	f000 fe16 	bl	80012da <lcd_goto_XY>
	lcd_goto_XY(1, 0);
 80006ae:	2100      	movs	r1, #0
 80006b0:	2001      	movs	r0, #1
 80006b2:	f000 fe12 	bl	80012da <lcd_goto_XY>
	if (count0 < 10) {
 80006b6:	4b3c      	ldr	r3, [pc, #240]	; (80007a8 <fsm_AUTO_GREEN_RED+0x118>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	2b09      	cmp	r3, #9
 80006bc:	dc07      	bgt.n	80006ce <fsm_AUTO_GREEN_RED+0x3e>
		sprintf(buffer,"TrafficX: 0%d", count0);
 80006be:	4b3a      	ldr	r3, [pc, #232]	; (80007a8 <fsm_AUTO_GREEN_RED+0x118>)
 80006c0:	681a      	ldr	r2, [r3, #0]
 80006c2:	463b      	mov	r3, r7
 80006c4:	4939      	ldr	r1, [pc, #228]	; (80007ac <fsm_AUTO_GREEN_RED+0x11c>)
 80006c6:	4618      	mov	r0, r3
 80006c8:	f003 fe6a 	bl	80043a0 <siprintf>
 80006cc:	e006      	b.n	80006dc <fsm_AUTO_GREEN_RED+0x4c>
	}
	else {
		sprintf(buffer,"TrafficX: %d", count0);
 80006ce:	4b36      	ldr	r3, [pc, #216]	; (80007a8 <fsm_AUTO_GREEN_RED+0x118>)
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	463b      	mov	r3, r7
 80006d4:	4936      	ldr	r1, [pc, #216]	; (80007b0 <fsm_AUTO_GREEN_RED+0x120>)
 80006d6:	4618      	mov	r0, r3
 80006d8:	f003 fe62 	bl	80043a0 <siprintf>
	}
	lcd_send_string(buffer);
 80006dc:	463b      	mov	r3, r7
 80006de:	4618      	mov	r0, r3
 80006e0:	f000 fddc 	bl	800129c <lcd_send_string>
	if (count0 < 10) {
 80006e4:	4b30      	ldr	r3, [pc, #192]	; (80007a8 <fsm_AUTO_GREEN_RED+0x118>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	2b09      	cmp	r3, #9
 80006ea:	dc07      	bgt.n	80006fc <fsm_AUTO_GREEN_RED+0x6c>
		sprintf(buffer,"TrafficY: 0%d", count1);
 80006ec:	4b31      	ldr	r3, [pc, #196]	; (80007b4 <fsm_AUTO_GREEN_RED+0x124>)
 80006ee:	681a      	ldr	r2, [r3, #0]
 80006f0:	463b      	mov	r3, r7
 80006f2:	4931      	ldr	r1, [pc, #196]	; (80007b8 <fsm_AUTO_GREEN_RED+0x128>)
 80006f4:	4618      	mov	r0, r3
 80006f6:	f003 fe53 	bl	80043a0 <siprintf>
 80006fa:	e006      	b.n	800070a <fsm_AUTO_GREEN_RED+0x7a>
	}
	else {
		sprintf(buffer,"TrafficY: %d", count1);
 80006fc:	4b2d      	ldr	r3, [pc, #180]	; (80007b4 <fsm_AUTO_GREEN_RED+0x124>)
 80006fe:	681a      	ldr	r2, [r3, #0]
 8000700:	463b      	mov	r3, r7
 8000702:	492e      	ldr	r1, [pc, #184]	; (80007bc <fsm_AUTO_GREEN_RED+0x12c>)
 8000704:	4618      	mov	r0, r3
 8000706:	f003 fe4b 	bl	80043a0 <siprintf>
	}
	lcd_goto_XY(0, 1);
 800070a:	2101      	movs	r1, #1
 800070c:	2000      	movs	r0, #0
 800070e:	f000 fde4 	bl	80012da <lcd_goto_XY>
	lcd_send_string(buffer);
 8000712:	463b      	mov	r3, r7
 8000714:	4618      	mov	r0, r3
 8000716:	f000 fdc1 	bl	800129c <lcd_send_string>

	status = AUTO_GREEN_RED;
 800071a:	4b22      	ldr	r3, [pc, #136]	; (80007a4 <fsm_AUTO_GREEN_RED+0x114>)
 800071c:	220c      	movs	r2, #12
 800071e:	601a      	str	r2, [r3, #0]
	if (second < 3) {
 8000720:	4b27      	ldr	r3, [pc, #156]	; (80007c0 <fsm_AUTO_GREEN_RED+0x130>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	2b02      	cmp	r3, #2
 8000726:	dc0a      	bgt.n	800073e <fsm_AUTO_GREEN_RED+0xae>
			SCH_Add_Task(fsm_AUTO_GREEN_RED, 250, 0);
 8000728:	2200      	movs	r2, #0
 800072a:	21fa      	movs	r1, #250	; 0xfa
 800072c:	4825      	ldr	r0, [pc, #148]	; (80007c4 <fsm_AUTO_GREEN_RED+0x134>)
 800072e:	f001 f94b 	bl	80019c8 <SCH_Add_Task>
			second++;
 8000732:	4b23      	ldr	r3, [pc, #140]	; (80007c0 <fsm_AUTO_GREEN_RED+0x130>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	3301      	adds	r3, #1
 8000738:	4a21      	ldr	r2, [pc, #132]	; (80007c0 <fsm_AUTO_GREEN_RED+0x130>)
 800073a:	6013      	str	r3, [r2, #0]
		}
		else {
			SCH_Add_Task(fsm_AUTO_GREEN_RED, 250, 0);
		}
	}
}
 800073c:	e02d      	b.n	800079a <fsm_AUTO_GREEN_RED+0x10a>
		second = 0;
 800073e:	4b20      	ldr	r3, [pc, #128]	; (80007c0 <fsm_AUTO_GREEN_RED+0x130>)
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
		minusCount();
 8000744:	f7ff fdf8 	bl	8000338 <minusCount>
		setBuffer(count0, count1);
 8000748:	4b17      	ldr	r3, [pc, #92]	; (80007a8 <fsm_AUTO_GREEN_RED+0x118>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a19      	ldr	r2, [pc, #100]	; (80007b4 <fsm_AUTO_GREEN_RED+0x124>)
 800074e:	6812      	ldr	r2, [r2, #0]
 8000750:	4611      	mov	r1, r2
 8000752:	4618      	mov	r0, r3
 8000754:	f000 fdec 	bl	8001330 <setBuffer>
		if (count0 == 0) {
 8000758:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <fsm_AUTO_GREEN_RED+0x118>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	2b00      	cmp	r3, #0
 800075e:	d117      	bne.n	8000790 <fsm_AUTO_GREEN_RED+0x100>
			SCH_Add_Task(fsm_AUTO_YELLOW_RED, 250, 0);
 8000760:	2200      	movs	r2, #0
 8000762:	21fa      	movs	r1, #250	; 0xfa
 8000764:	4818      	ldr	r0, [pc, #96]	; (80007c8 <fsm_AUTO_GREEN_RED+0x138>)
 8000766:	f001 f92f 	bl	80019c8 <SCH_Add_Task>
			count0 = AmberTime();
 800076a:	f000 fa17 	bl	8000b9c <AmberTime>
 800076e:	4603      	mov	r3, r0
 8000770:	4a0d      	ldr	r2, [pc, #52]	; (80007a8 <fsm_AUTO_GREEN_RED+0x118>)
 8000772:	6013      	str	r3, [r2, #0]
			count1 = AmberTime();
 8000774:	f000 fa12 	bl	8000b9c <AmberTime>
 8000778:	4603      	mov	r3, r0
 800077a:	4a0e      	ldr	r2, [pc, #56]	; (80007b4 <fsm_AUTO_GREEN_RED+0x124>)
 800077c:	6013      	str	r3, [r2, #0]
			setBuffer(count0, count1);
 800077e:	4b0a      	ldr	r3, [pc, #40]	; (80007a8 <fsm_AUTO_GREEN_RED+0x118>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4a0c      	ldr	r2, [pc, #48]	; (80007b4 <fsm_AUTO_GREEN_RED+0x124>)
 8000784:	6812      	ldr	r2, [r2, #0]
 8000786:	4611      	mov	r1, r2
 8000788:	4618      	mov	r0, r3
 800078a:	f000 fdd1 	bl	8001330 <setBuffer>
}
 800078e:	e004      	b.n	800079a <fsm_AUTO_GREEN_RED+0x10a>
			SCH_Add_Task(fsm_AUTO_GREEN_RED, 250, 0);
 8000790:	2200      	movs	r2, #0
 8000792:	21fa      	movs	r1, #250	; 0xfa
 8000794:	480b      	ldr	r0, [pc, #44]	; (80007c4 <fsm_AUTO_GREEN_RED+0x134>)
 8000796:	f001 f917 	bl	80019c8 <SCH_Add_Task>
}
 800079a:	bf00      	nop
 800079c:	3710      	adds	r7, #16
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	200000e8 	.word	0x200000e8
 80007a8:	20000128 	.word	0x20000128
 80007ac:	08004ac0 	.word	0x08004ac0
 80007b0:	08004ad0 	.word	0x08004ad0
 80007b4:	20000124 	.word	0x20000124
 80007b8:	08004ae0 	.word	0x08004ae0
 80007bc:	08004af0 	.word	0x08004af0
 80007c0:	200000e0 	.word	0x200000e0
 80007c4:	08000691 	.word	0x08000691
 80007c8:	080007cd 	.word	0x080007cd

080007cc <fsm_AUTO_YELLOW_RED>:

void fsm_AUTO_YELLOW_RED () {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0
	if (status == MAN_YELLOW_RED) lcd_clear_display();
 80007d2:	4b43      	ldr	r3, [pc, #268]	; (80008e0 <fsm_AUTO_YELLOW_RED+0x114>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	2b09      	cmp	r3, #9
 80007d8:	d101      	bne.n	80007de <fsm_AUTO_YELLOW_RED+0x12>
 80007da:	f000 fd74 	bl	80012c6 <lcd_clear_display>
	set_amber0_red1();
 80007de:	f001 fb49 	bl	8001e74 <set_amber0_red1>

	char buffer[16];
	lcd_goto_XY(0, 1);
 80007e2:	2101      	movs	r1, #1
 80007e4:	2000      	movs	r0, #0
 80007e6:	f000 fd78 	bl	80012da <lcd_goto_XY>
	lcd_goto_XY(1, 0);
 80007ea:	2100      	movs	r1, #0
 80007ec:	2001      	movs	r0, #1
 80007ee:	f000 fd74 	bl	80012da <lcd_goto_XY>
	if (count0 < 10) {
 80007f2:	4b3c      	ldr	r3, [pc, #240]	; (80008e4 <fsm_AUTO_YELLOW_RED+0x118>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	2b09      	cmp	r3, #9
 80007f8:	dc07      	bgt.n	800080a <fsm_AUTO_YELLOW_RED+0x3e>
		sprintf(buffer,"TrafficX: 0%d", count0);
 80007fa:	4b3a      	ldr	r3, [pc, #232]	; (80008e4 <fsm_AUTO_YELLOW_RED+0x118>)
 80007fc:	681a      	ldr	r2, [r3, #0]
 80007fe:	463b      	mov	r3, r7
 8000800:	4939      	ldr	r1, [pc, #228]	; (80008e8 <fsm_AUTO_YELLOW_RED+0x11c>)
 8000802:	4618      	mov	r0, r3
 8000804:	f003 fdcc 	bl	80043a0 <siprintf>
 8000808:	e006      	b.n	8000818 <fsm_AUTO_YELLOW_RED+0x4c>
	}
	else {
		sprintf(buffer,"TrafficX: %d", count0);
 800080a:	4b36      	ldr	r3, [pc, #216]	; (80008e4 <fsm_AUTO_YELLOW_RED+0x118>)
 800080c:	681a      	ldr	r2, [r3, #0]
 800080e:	463b      	mov	r3, r7
 8000810:	4936      	ldr	r1, [pc, #216]	; (80008ec <fsm_AUTO_YELLOW_RED+0x120>)
 8000812:	4618      	mov	r0, r3
 8000814:	f003 fdc4 	bl	80043a0 <siprintf>
	}
	lcd_send_string(buffer);
 8000818:	463b      	mov	r3, r7
 800081a:	4618      	mov	r0, r3
 800081c:	f000 fd3e 	bl	800129c <lcd_send_string>
	if (count0 < 10) {
 8000820:	4b30      	ldr	r3, [pc, #192]	; (80008e4 <fsm_AUTO_YELLOW_RED+0x118>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	2b09      	cmp	r3, #9
 8000826:	dc07      	bgt.n	8000838 <fsm_AUTO_YELLOW_RED+0x6c>
		sprintf(buffer,"TrafficY: 0%d", count1);
 8000828:	4b31      	ldr	r3, [pc, #196]	; (80008f0 <fsm_AUTO_YELLOW_RED+0x124>)
 800082a:	681a      	ldr	r2, [r3, #0]
 800082c:	463b      	mov	r3, r7
 800082e:	4931      	ldr	r1, [pc, #196]	; (80008f4 <fsm_AUTO_YELLOW_RED+0x128>)
 8000830:	4618      	mov	r0, r3
 8000832:	f003 fdb5 	bl	80043a0 <siprintf>
 8000836:	e006      	b.n	8000846 <fsm_AUTO_YELLOW_RED+0x7a>
	}
	else {
		sprintf(buffer,"TrafficY: %d", count1);
 8000838:	4b2d      	ldr	r3, [pc, #180]	; (80008f0 <fsm_AUTO_YELLOW_RED+0x124>)
 800083a:	681a      	ldr	r2, [r3, #0]
 800083c:	463b      	mov	r3, r7
 800083e:	492e      	ldr	r1, [pc, #184]	; (80008f8 <fsm_AUTO_YELLOW_RED+0x12c>)
 8000840:	4618      	mov	r0, r3
 8000842:	f003 fdad 	bl	80043a0 <siprintf>
	}
	lcd_goto_XY(0, 1);
 8000846:	2101      	movs	r1, #1
 8000848:	2000      	movs	r0, #0
 800084a:	f000 fd46 	bl	80012da <lcd_goto_XY>
	lcd_send_string(buffer);
 800084e:	463b      	mov	r3, r7
 8000850:	4618      	mov	r0, r3
 8000852:	f000 fd23 	bl	800129c <lcd_send_string>

	status = AUTO_YELLOW_RED;
 8000856:	4b22      	ldr	r3, [pc, #136]	; (80008e0 <fsm_AUTO_YELLOW_RED+0x114>)
 8000858:	220d      	movs	r2, #13
 800085a:	601a      	str	r2, [r3, #0]
	if (second < 3) {
 800085c:	4b27      	ldr	r3, [pc, #156]	; (80008fc <fsm_AUTO_YELLOW_RED+0x130>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	2b02      	cmp	r3, #2
 8000862:	dc0a      	bgt.n	800087a <fsm_AUTO_YELLOW_RED+0xae>
			SCH_Add_Task(fsm_AUTO_YELLOW_RED, 250, 0);
 8000864:	2200      	movs	r2, #0
 8000866:	21fa      	movs	r1, #250	; 0xfa
 8000868:	4825      	ldr	r0, [pc, #148]	; (8000900 <fsm_AUTO_YELLOW_RED+0x134>)
 800086a:	f001 f8ad 	bl	80019c8 <SCH_Add_Task>
			second++;
 800086e:	4b23      	ldr	r3, [pc, #140]	; (80008fc <fsm_AUTO_YELLOW_RED+0x130>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	3301      	adds	r3, #1
 8000874:	4a21      	ldr	r2, [pc, #132]	; (80008fc <fsm_AUTO_YELLOW_RED+0x130>)
 8000876:	6013      	str	r3, [r2, #0]
		}
		else {
			SCH_Add_Task(fsm_AUTO_YELLOW_RED, 250, 0);
		}
	}
}
 8000878:	e02d      	b.n	80008d6 <fsm_AUTO_YELLOW_RED+0x10a>
		second = 0;
 800087a:	4b20      	ldr	r3, [pc, #128]	; (80008fc <fsm_AUTO_YELLOW_RED+0x130>)
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
		minusCount();
 8000880:	f7ff fd5a 	bl	8000338 <minusCount>
		setBuffer(count0, count1);
 8000884:	4b17      	ldr	r3, [pc, #92]	; (80008e4 <fsm_AUTO_YELLOW_RED+0x118>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a19      	ldr	r2, [pc, #100]	; (80008f0 <fsm_AUTO_YELLOW_RED+0x124>)
 800088a:	6812      	ldr	r2, [r2, #0]
 800088c:	4611      	mov	r1, r2
 800088e:	4618      	mov	r0, r3
 8000890:	f000 fd4e 	bl	8001330 <setBuffer>
		if (count0 == 0) {
 8000894:	4b13      	ldr	r3, [pc, #76]	; (80008e4 <fsm_AUTO_YELLOW_RED+0x118>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d117      	bne.n	80008cc <fsm_AUTO_YELLOW_RED+0x100>
			SCH_Add_Task(fsm_AUTO_RED_GREEN, 250, 0);
 800089c:	2200      	movs	r2, #0
 800089e:	21fa      	movs	r1, #250	; 0xfa
 80008a0:	4818      	ldr	r0, [pc, #96]	; (8000904 <fsm_AUTO_YELLOW_RED+0x138>)
 80008a2:	f001 f891 	bl	80019c8 <SCH_Add_Task>
			count0 = RedTime();
 80008a6:	f000 f96f 	bl	8000b88 <RedTime>
 80008aa:	4603      	mov	r3, r0
 80008ac:	4a0d      	ldr	r2, [pc, #52]	; (80008e4 <fsm_AUTO_YELLOW_RED+0x118>)
 80008ae:	6013      	str	r3, [r2, #0]
			count1 = GreenTime();
 80008b0:	f000 f960 	bl	8000b74 <GreenTime>
 80008b4:	4603      	mov	r3, r0
 80008b6:	4a0e      	ldr	r2, [pc, #56]	; (80008f0 <fsm_AUTO_YELLOW_RED+0x124>)
 80008b8:	6013      	str	r3, [r2, #0]
			setBuffer(count0, count1);
 80008ba:	4b0a      	ldr	r3, [pc, #40]	; (80008e4 <fsm_AUTO_YELLOW_RED+0x118>)
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4a0c      	ldr	r2, [pc, #48]	; (80008f0 <fsm_AUTO_YELLOW_RED+0x124>)
 80008c0:	6812      	ldr	r2, [r2, #0]
 80008c2:	4611      	mov	r1, r2
 80008c4:	4618      	mov	r0, r3
 80008c6:	f000 fd33 	bl	8001330 <setBuffer>
}
 80008ca:	e004      	b.n	80008d6 <fsm_AUTO_YELLOW_RED+0x10a>
			SCH_Add_Task(fsm_AUTO_YELLOW_RED, 250, 0);
 80008cc:	2200      	movs	r2, #0
 80008ce:	21fa      	movs	r1, #250	; 0xfa
 80008d0:	480b      	ldr	r0, [pc, #44]	; (8000900 <fsm_AUTO_YELLOW_RED+0x134>)
 80008d2:	f001 f879 	bl	80019c8 <SCH_Add_Task>
}
 80008d6:	bf00      	nop
 80008d8:	3710      	adds	r7, #16
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	200000e8 	.word	0x200000e8
 80008e4:	20000128 	.word	0x20000128
 80008e8:	08004ac0 	.word	0x08004ac0
 80008ec:	08004ad0 	.word	0x08004ad0
 80008f0:	20000124 	.word	0x20000124
 80008f4:	08004ae0 	.word	0x08004ae0
 80008f8:	08004af0 	.word	0x08004af0
 80008fc:	200000e0 	.word	0x200000e0
 8000900:	080007cd 	.word	0x080007cd
 8000904:	08000419 	.word	0x08000419

08000908 <fms_MAN_RED_GREEN>:

#include "fsm_manual.h"
#include "fsm_automatic.h"
#include "fsm_settings.h"

void fms_MAN_RED_GREEN(){
 8000908:	b590      	push	{r4, r7, lr}
 800090a:	b085      	sub	sp, #20
 800090c:	af00      	add	r7, sp, #0
	char buffer[16];
	lcd_goto_XY(0, 1);
 800090e:	2101      	movs	r1, #1
 8000910:	2000      	movs	r0, #0
 8000912:	f000 fce2 	bl	80012da <lcd_goto_XY>
	sprintf(buffer,"Manual Mode");
 8000916:	463b      	mov	r3, r7
 8000918:	491f      	ldr	r1, [pc, #124]	; (8000998 <fms_MAN_RED_GREEN+0x90>)
 800091a:	4618      	mov	r0, r3
 800091c:	f003 fd40 	bl	80043a0 <siprintf>
	lcd_send_string(buffer);
 8000920:	463b      	mov	r3, r7
 8000922:	4618      	mov	r0, r3
 8000924:	f000 fcba 	bl	800129c <lcd_send_string>
	lcd_goto_XY(1, 0);
 8000928:	2100      	movs	r1, #0
 800092a:	2001      	movs	r0, #1
 800092c:	f000 fcd5 	bl	80012da <lcd_goto_XY>
	sprintf(buffer,"RedX - GreenY");
 8000930:	463b      	mov	r3, r7
 8000932:	491a      	ldr	r1, [pc, #104]	; (800099c <fms_MAN_RED_GREEN+0x94>)
 8000934:	4618      	mov	r0, r3
 8000936:	f003 fd33 	bl	80043a0 <siprintf>
	lcd_send_string(buffer);
 800093a:	463b      	mov	r3, r7
 800093c:	4618      	mov	r0, r3
 800093e:	f000 fcad 	bl	800129c <lcd_send_string>

	set_red0_green1();
 8000942:	f001 fa43 	bl	8001dcc <set_red0_green1>
	update7SEG(4);
 8000946:	2004      	movs	r0, #4
 8000948:	f000 fce9 	bl	800131e <update7SEG>
	SCH_Add_Task(fsm_AUTO_RED_GREEN, 10000, 0);
 800094c:	2200      	movs	r2, #0
 800094e:	f242 7110 	movw	r1, #10000	; 0x2710
 8000952:	4813      	ldr	r0, [pc, #76]	; (80009a0 <fms_MAN_RED_GREEN+0x98>)
 8000954:	f001 f838 	bl	80019c8 <SCH_Add_Task>
	setCount(0, RedTime());
 8000958:	f000 f916 	bl	8000b88 <RedTime>
 800095c:	4603      	mov	r3, r0
 800095e:	4619      	mov	r1, r3
 8000960:	2000      	movs	r0, #0
 8000962:	f7ff fccf 	bl	8000304 <setCount>
	setCount(1, GreenTime());
 8000966:	f000 f905 	bl	8000b74 <GreenTime>
 800096a:	4603      	mov	r3, r0
 800096c:	4619      	mov	r1, r3
 800096e:	2001      	movs	r0, #1
 8000970:	f7ff fcc8 	bl	8000304 <setCount>
	setBuffer(getCount(0), getCount(1));
 8000974:	2000      	movs	r0, #0
 8000976:	f7ff fcf3 	bl	8000360 <getCount>
 800097a:	4604      	mov	r4, r0
 800097c:	2001      	movs	r0, #1
 800097e:	f7ff fcef 	bl	8000360 <getCount>
 8000982:	4603      	mov	r3, r0
 8000984:	4619      	mov	r1, r3
 8000986:	4620      	mov	r0, r4
 8000988:	f000 fcd2 	bl	8001330 <setBuffer>
	countAgain();
 800098c:	f000 fd0c 	bl	80013a8 <countAgain>
}
 8000990:	bf00      	nop
 8000992:	3714      	adds	r7, #20
 8000994:	46bd      	mov	sp, r7
 8000996:	bd90      	pop	{r4, r7, pc}
 8000998:	08004b00 	.word	0x08004b00
 800099c:	08004b0c 	.word	0x08004b0c
 80009a0:	08000419 	.word	0x08000419

080009a4 <fms_MAN_RED_YELLOW>:
void fms_MAN_RED_YELLOW(){
 80009a4:	b590      	push	{r4, r7, lr}
 80009a6:	b085      	sub	sp, #20
 80009a8:	af00      	add	r7, sp, #0
	char buffer[16];
	lcd_goto_XY(0, 1);
 80009aa:	2101      	movs	r1, #1
 80009ac:	2000      	movs	r0, #0
 80009ae:	f000 fc94 	bl	80012da <lcd_goto_XY>
	sprintf(buffer,"Manual Mode");
 80009b2:	463b      	mov	r3, r7
 80009b4:	491e      	ldr	r1, [pc, #120]	; (8000a30 <fms_MAN_RED_YELLOW+0x8c>)
 80009b6:	4618      	mov	r0, r3
 80009b8:	f003 fcf2 	bl	80043a0 <siprintf>
	lcd_send_string(buffer);
 80009bc:	463b      	mov	r3, r7
 80009be:	4618      	mov	r0, r3
 80009c0:	f000 fc6c 	bl	800129c <lcd_send_string>
	lcd_goto_XY(1, 0);
 80009c4:	2100      	movs	r1, #0
 80009c6:	2001      	movs	r0, #1
 80009c8:	f000 fc87 	bl	80012da <lcd_goto_XY>
	sprintf(buffer,"RedX - AmberY");
 80009cc:	463b      	mov	r3, r7
 80009ce:	4919      	ldr	r1, [pc, #100]	; (8000a34 <fms_MAN_RED_YELLOW+0x90>)
 80009d0:	4618      	mov	r0, r3
 80009d2:	f003 fce5 	bl	80043a0 <siprintf>
	lcd_send_string(buffer);
 80009d6:	463b      	mov	r3, r7
 80009d8:	4618      	mov	r0, r3
 80009da:	f000 fc5f 	bl	800129c <lcd_send_string>

	set_red0_amber1();
 80009de:	f001 fa11 	bl	8001e04 <set_red0_amber1>
	update7SEG(4); // Turn off all led
 80009e2:	2004      	movs	r0, #4
 80009e4:	f000 fc9b 	bl	800131e <update7SEG>
	SCH_Add_Task(fsm_AUTO_RED_YELLOW, 10000, 0);
 80009e8:	2200      	movs	r2, #0
 80009ea:	f242 7110 	movw	r1, #10000	; 0x2710
 80009ee:	4812      	ldr	r0, [pc, #72]	; (8000a38 <fms_MAN_RED_YELLOW+0x94>)
 80009f0:	f000 ffea 	bl	80019c8 <SCH_Add_Task>
	setCount(0, AmberTime());
 80009f4:	f000 f8d2 	bl	8000b9c <AmberTime>
 80009f8:	4603      	mov	r3, r0
 80009fa:	4619      	mov	r1, r3
 80009fc:	2000      	movs	r0, #0
 80009fe:	f7ff fc81 	bl	8000304 <setCount>
	setCount(1, AmberTime());
 8000a02:	f000 f8cb 	bl	8000b9c <AmberTime>
 8000a06:	4603      	mov	r3, r0
 8000a08:	4619      	mov	r1, r3
 8000a0a:	2001      	movs	r0, #1
 8000a0c:	f7ff fc7a 	bl	8000304 <setCount>
	setBuffer(getCount(0), getCount(1));
 8000a10:	2000      	movs	r0, #0
 8000a12:	f7ff fca5 	bl	8000360 <getCount>
 8000a16:	4604      	mov	r4, r0
 8000a18:	2001      	movs	r0, #1
 8000a1a:	f7ff fca1 	bl	8000360 <getCount>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	4619      	mov	r1, r3
 8000a22:	4620      	mov	r0, r4
 8000a24:	f000 fc84 	bl	8001330 <setBuffer>
}
 8000a28:	bf00      	nop
 8000a2a:	3714      	adds	r7, #20
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd90      	pop	{r4, r7, pc}
 8000a30:	08004b00 	.word	0x08004b00
 8000a34:	08004b1c 	.word	0x08004b1c
 8000a38:	08000555 	.word	0x08000555

08000a3c <fms_MAN_GREEN_RED>:
void fms_MAN_GREEN_RED(){
 8000a3c:	b590      	push	{r4, r7, lr}
 8000a3e:	b085      	sub	sp, #20
 8000a40:	af00      	add	r7, sp, #0
	char buffer[16];
	lcd_goto_XY(0, 1);
 8000a42:	2101      	movs	r1, #1
 8000a44:	2000      	movs	r0, #0
 8000a46:	f000 fc48 	bl	80012da <lcd_goto_XY>
	sprintf(buffer,"Manual Mode");
 8000a4a:	463b      	mov	r3, r7
 8000a4c:	491f      	ldr	r1, [pc, #124]	; (8000acc <fms_MAN_GREEN_RED+0x90>)
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f003 fca6 	bl	80043a0 <siprintf>
	lcd_send_string(buffer);
 8000a54:	463b      	mov	r3, r7
 8000a56:	4618      	mov	r0, r3
 8000a58:	f000 fc20 	bl	800129c <lcd_send_string>
	lcd_goto_XY(1, 0);
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	2001      	movs	r0, #1
 8000a60:	f000 fc3b 	bl	80012da <lcd_goto_XY>
	sprintf(buffer,"GreenX - RedY");
 8000a64:	463b      	mov	r3, r7
 8000a66:	491a      	ldr	r1, [pc, #104]	; (8000ad0 <fms_MAN_GREEN_RED+0x94>)
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f003 fc99 	bl	80043a0 <siprintf>
	lcd_send_string(buffer);
 8000a6e:	463b      	mov	r3, r7
 8000a70:	4618      	mov	r0, r3
 8000a72:	f000 fc13 	bl	800129c <lcd_send_string>

	set_green0_red1();
 8000a76:	f001 f9e1 	bl	8001e3c <set_green0_red1>
	update7SEG(4); // Turn off all led
 8000a7a:	2004      	movs	r0, #4
 8000a7c:	f000 fc4f 	bl	800131e <update7SEG>
	SCH_Add_Task(fsm_AUTO_GREEN_RED, 10000, 0);
 8000a80:	2200      	movs	r2, #0
 8000a82:	f242 7110 	movw	r1, #10000	; 0x2710
 8000a86:	4813      	ldr	r0, [pc, #76]	; (8000ad4 <fms_MAN_GREEN_RED+0x98>)
 8000a88:	f000 ff9e 	bl	80019c8 <SCH_Add_Task>
	setCount(0, GreenTime());
 8000a8c:	f000 f872 	bl	8000b74 <GreenTime>
 8000a90:	4603      	mov	r3, r0
 8000a92:	4619      	mov	r1, r3
 8000a94:	2000      	movs	r0, #0
 8000a96:	f7ff fc35 	bl	8000304 <setCount>
	setCount(1, RedTime());
 8000a9a:	f000 f875 	bl	8000b88 <RedTime>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	2001      	movs	r0, #1
 8000aa4:	f7ff fc2e 	bl	8000304 <setCount>
	setBuffer(getCount(0), getCount(1));
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	f7ff fc59 	bl	8000360 <getCount>
 8000aae:	4604      	mov	r4, r0
 8000ab0:	2001      	movs	r0, #1
 8000ab2:	f7ff fc55 	bl	8000360 <getCount>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4620      	mov	r0, r4
 8000abc:	f000 fc38 	bl	8001330 <setBuffer>
	countAgain();
 8000ac0:	f000 fc72 	bl	80013a8 <countAgain>

}
 8000ac4:	bf00      	nop
 8000ac6:	3714      	adds	r7, #20
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd90      	pop	{r4, r7, pc}
 8000acc:	08004b00 	.word	0x08004b00
 8000ad0:	08004b2c 	.word	0x08004b2c
 8000ad4:	08000691 	.word	0x08000691

08000ad8 <fms_MAN_YELLOW_RED>:
void fms_MAN_YELLOW_RED(){
 8000ad8:	b590      	push	{r4, r7, lr}
 8000ada:	b085      	sub	sp, #20
 8000adc:	af00      	add	r7, sp, #0
	char buffer[16];
	lcd_goto_XY(0, 1);
 8000ade:	2101      	movs	r1, #1
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	f000 fbfa 	bl	80012da <lcd_goto_XY>
	sprintf(buffer,"Manual Mode");
 8000ae6:	463b      	mov	r3, r7
 8000ae8:	491f      	ldr	r1, [pc, #124]	; (8000b68 <fms_MAN_YELLOW_RED+0x90>)
 8000aea:	4618      	mov	r0, r3
 8000aec:	f003 fc58 	bl	80043a0 <siprintf>
	lcd_send_string(buffer);
 8000af0:	463b      	mov	r3, r7
 8000af2:	4618      	mov	r0, r3
 8000af4:	f000 fbd2 	bl	800129c <lcd_send_string>
	lcd_goto_XY(1, 0);
 8000af8:	2100      	movs	r1, #0
 8000afa:	2001      	movs	r0, #1
 8000afc:	f000 fbed 	bl	80012da <lcd_goto_XY>
	sprintf(buffer,"AmberX - RedY");
 8000b00:	463b      	mov	r3, r7
 8000b02:	491a      	ldr	r1, [pc, #104]	; (8000b6c <fms_MAN_YELLOW_RED+0x94>)
 8000b04:	4618      	mov	r0, r3
 8000b06:	f003 fc4b 	bl	80043a0 <siprintf>
	lcd_send_string(buffer);
 8000b0a:	463b      	mov	r3, r7
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f000 fbc5 	bl	800129c <lcd_send_string>

	set_amber0_red1();
 8000b12:	f001 f9af 	bl	8001e74 <set_amber0_red1>
	update7SEG(4); // Turn off all led
 8000b16:	2004      	movs	r0, #4
 8000b18:	f000 fc01 	bl	800131e <update7SEG>
	SCH_Add_Task(fsm_AUTO_YELLOW_RED, 10000, 0);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	f242 7110 	movw	r1, #10000	; 0x2710
 8000b22:	4813      	ldr	r0, [pc, #76]	; (8000b70 <fms_MAN_YELLOW_RED+0x98>)
 8000b24:	f000 ff50 	bl	80019c8 <SCH_Add_Task>
	setCount(0, AmberTime());
 8000b28:	f000 f838 	bl	8000b9c <AmberTime>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	4619      	mov	r1, r3
 8000b30:	2000      	movs	r0, #0
 8000b32:	f7ff fbe7 	bl	8000304 <setCount>
	setCount(1, AmberTime());
 8000b36:	f000 f831 	bl	8000b9c <AmberTime>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	2001      	movs	r0, #1
 8000b40:	f7ff fbe0 	bl	8000304 <setCount>
	setBuffer(getCount(0), getCount(1));
 8000b44:	2000      	movs	r0, #0
 8000b46:	f7ff fc0b 	bl	8000360 <getCount>
 8000b4a:	4604      	mov	r4, r0
 8000b4c:	2001      	movs	r0, #1
 8000b4e:	f7ff fc07 	bl	8000360 <getCount>
 8000b52:	4603      	mov	r3, r0
 8000b54:	4619      	mov	r1, r3
 8000b56:	4620      	mov	r0, r4
 8000b58:	f000 fbea 	bl	8001330 <setBuffer>
	countAgain();
 8000b5c:	f000 fc24 	bl	80013a8 <countAgain>
}
 8000b60:	bf00      	nop
 8000b62:	3714      	adds	r7, #20
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd90      	pop	{r4, r7, pc}
 8000b68:	08004b00 	.word	0x08004b00
 8000b6c:	08004b3c 	.word	0x08004b3c
 8000b70:	080007cd 	.word	0x080007cd

08000b74 <GreenTime>:

int tmp_greentime = 5;
int tmp_redtime = 8;
int tmp_ambertime = 3;

int GreenTime() {
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
	return greentime;
 8000b78:	4b02      	ldr	r3, [pc, #8]	; (8000b84 <GreenTime+0x10>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bc80      	pop	{r7}
 8000b82:	4770      	bx	lr
 8000b84:	2000003c 	.word	0x2000003c

08000b88 <RedTime>:
int RedTime() {
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
	return redtime;
 8000b8c:	4b02      	ldr	r3, [pc, #8]	; (8000b98 <RedTime+0x10>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bc80      	pop	{r7}
 8000b96:	4770      	bx	lr
 8000b98:	20000040 	.word	0x20000040

08000b9c <AmberTime>:
int AmberTime() {
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
	return ambertime;
 8000ba0:	4b02      	ldr	r3, [pc, #8]	; (8000bac <AmberTime+0x10>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bc80      	pop	{r7}
 8000baa:	4770      	bx	lr
 8000bac:	20000044 	.word	0x20000044

08000bb0 <fsm_SET_REDTIME>:
}
void setAmberTime(int value){
	ambertime = value;
}

void fsm_SET_REDTIME(){
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
	char buffer[16];
	lcd_goto_XY(0, 1);
 8000bb6:	2101      	movs	r1, #1
 8000bb8:	2000      	movs	r0, #0
 8000bba:	f000 fb8e 	bl	80012da <lcd_goto_XY>
	sprintf(buffer,"Setting Red");
 8000bbe:	463b      	mov	r3, r7
 8000bc0:	491f      	ldr	r1, [pc, #124]	; (8000c40 <fsm_SET_REDTIME+0x90>)
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f003 fbec 	bl	80043a0 <siprintf>
	lcd_send_string(buffer);
 8000bc8:	463b      	mov	r3, r7
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f000 fb66 	bl	800129c <lcd_send_string>
	if (tmp_redtime < 10) {
 8000bd0:	4b1c      	ldr	r3, [pc, #112]	; (8000c44 <fsm_SET_REDTIME+0x94>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	2b09      	cmp	r3, #9
 8000bd6:	dc07      	bgt.n	8000be8 <fsm_SET_REDTIME+0x38>
		sprintf(buffer,"Mode:2,time:0%d", tmp_redtime);
 8000bd8:	4b1a      	ldr	r3, [pc, #104]	; (8000c44 <fsm_SET_REDTIME+0x94>)
 8000bda:	681a      	ldr	r2, [r3, #0]
 8000bdc:	463b      	mov	r3, r7
 8000bde:	491a      	ldr	r1, [pc, #104]	; (8000c48 <fsm_SET_REDTIME+0x98>)
 8000be0:	4618      	mov	r0, r3
 8000be2:	f003 fbdd 	bl	80043a0 <siprintf>
 8000be6:	e006      	b.n	8000bf6 <fsm_SET_REDTIME+0x46>
	}
	else {
		sprintf(buffer,"Mode:2,time:%d", tmp_redtime);
 8000be8:	4b16      	ldr	r3, [pc, #88]	; (8000c44 <fsm_SET_REDTIME+0x94>)
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	463b      	mov	r3, r7
 8000bee:	4917      	ldr	r1, [pc, #92]	; (8000c4c <fsm_SET_REDTIME+0x9c>)
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f003 fbd5 	bl	80043a0 <siprintf>
	}
	lcd_goto_XY(1, 0);
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	2001      	movs	r0, #1
 8000bfa:	f000 fb6e 	bl	80012da <lcd_goto_XY>
	lcd_send_string(buffer);
 8000bfe:	463b      	mov	r3, r7
 8000c00:	4618      	mov	r0, r3
 8000c02:	f000 fb4b 	bl	800129c <lcd_send_string>

	if (!(toggle++)) setallRed();
 8000c06:	4b12      	ldr	r3, [pc, #72]	; (8000c50 <fsm_SET_REDTIME+0xa0>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	1c5a      	adds	r2, r3, #1
 8000c0c:	4910      	ldr	r1, [pc, #64]	; (8000c50 <fsm_SET_REDTIME+0xa0>)
 8000c0e:	600a      	str	r2, [r1, #0]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d102      	bne.n	8000c1a <fsm_SET_REDTIME+0x6a>
 8000c14:	f001 f94a 	bl	8001eac <setallRed>
 8000c18:	e008      	b.n	8000c2c <fsm_SET_REDTIME+0x7c>
	else if (toggle) {
 8000c1a:	4b0d      	ldr	r3, [pc, #52]	; (8000c50 <fsm_SET_REDTIME+0xa0>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d004      	beq.n	8000c2c <fsm_SET_REDTIME+0x7c>
		setallOff();
 8000c22:	f001 f997 	bl	8001f54 <setallOff>
		toggle = 0;
 8000c26:	4b0a      	ldr	r3, [pc, #40]	; (8000c50 <fsm_SET_REDTIME+0xa0>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
	}
	SCH_Add_Task(fsm_SET_REDTIME, 250, 0);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	21fa      	movs	r1, #250	; 0xfa
 8000c30:	4808      	ldr	r0, [pc, #32]	; (8000c54 <fsm_SET_REDTIME+0xa4>)
 8000c32:	f000 fec9 	bl	80019c8 <SCH_Add_Task>
}
 8000c36:	bf00      	nop
 8000c38:	3710      	adds	r7, #16
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	08004b4c 	.word	0x08004b4c
 8000c44:	2000004c 	.word	0x2000004c
 8000c48:	08004b58 	.word	0x08004b58
 8000c4c:	08004b68 	.word	0x08004b68
 8000c50:	200000e4 	.word	0x200000e4
 8000c54:	08000bb1 	.word	0x08000bb1

08000c58 <fsm_SET_AMBERTIME>:
void fsm_SET_AMBERTIME(){
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
	char buffer[16];
	lcd_goto_XY(0, 1);
 8000c5e:	2101      	movs	r1, #1
 8000c60:	2000      	movs	r0, #0
 8000c62:	f000 fb3a 	bl	80012da <lcd_goto_XY>
	sprintf(buffer,"Setting Amber");
 8000c66:	463b      	mov	r3, r7
 8000c68:	491f      	ldr	r1, [pc, #124]	; (8000ce8 <fsm_SET_AMBERTIME+0x90>)
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f003 fb98 	bl	80043a0 <siprintf>
	lcd_send_string(buffer);
 8000c70:	463b      	mov	r3, r7
 8000c72:	4618      	mov	r0, r3
 8000c74:	f000 fb12 	bl	800129c <lcd_send_string>
	if (tmp_redtime < 10) {
 8000c78:	4b1c      	ldr	r3, [pc, #112]	; (8000cec <fsm_SET_AMBERTIME+0x94>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	2b09      	cmp	r3, #9
 8000c7e:	dc07      	bgt.n	8000c90 <fsm_SET_AMBERTIME+0x38>
		sprintf(buffer,"Mode:3,time:0%d", tmp_ambertime);
 8000c80:	4b1b      	ldr	r3, [pc, #108]	; (8000cf0 <fsm_SET_AMBERTIME+0x98>)
 8000c82:	681a      	ldr	r2, [r3, #0]
 8000c84:	463b      	mov	r3, r7
 8000c86:	491b      	ldr	r1, [pc, #108]	; (8000cf4 <fsm_SET_AMBERTIME+0x9c>)
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f003 fb89 	bl	80043a0 <siprintf>
 8000c8e:	e006      	b.n	8000c9e <fsm_SET_AMBERTIME+0x46>
	}
	else {
		sprintf(buffer,"Mode:3,time:%d", tmp_ambertime);
 8000c90:	4b17      	ldr	r3, [pc, #92]	; (8000cf0 <fsm_SET_AMBERTIME+0x98>)
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	463b      	mov	r3, r7
 8000c96:	4918      	ldr	r1, [pc, #96]	; (8000cf8 <fsm_SET_AMBERTIME+0xa0>)
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f003 fb81 	bl	80043a0 <siprintf>
	}
	lcd_goto_XY(1, 0);
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	2001      	movs	r0, #1
 8000ca2:	f000 fb1a 	bl	80012da <lcd_goto_XY>
	lcd_send_string(buffer);
 8000ca6:	463b      	mov	r3, r7
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f000 faf7 	bl	800129c <lcd_send_string>

	if (!(toggle++)) setallAmber();
 8000cae:	4b13      	ldr	r3, [pc, #76]	; (8000cfc <fsm_SET_AMBERTIME+0xa4>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	1c5a      	adds	r2, r3, #1
 8000cb4:	4911      	ldr	r1, [pc, #68]	; (8000cfc <fsm_SET_AMBERTIME+0xa4>)
 8000cb6:	600a      	str	r2, [r1, #0]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d102      	bne.n	8000cc2 <fsm_SET_AMBERTIME+0x6a>
 8000cbc:	f001 f92e 	bl	8001f1c <setallAmber>
 8000cc0:	e008      	b.n	8000cd4 <fsm_SET_AMBERTIME+0x7c>
	else if (toggle) {
 8000cc2:	4b0e      	ldr	r3, [pc, #56]	; (8000cfc <fsm_SET_AMBERTIME+0xa4>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d004      	beq.n	8000cd4 <fsm_SET_AMBERTIME+0x7c>
		setallOff();
 8000cca:	f001 f943 	bl	8001f54 <setallOff>
		toggle = 0;
 8000cce:	4b0b      	ldr	r3, [pc, #44]	; (8000cfc <fsm_SET_AMBERTIME+0xa4>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
	}
	SCH_Add_Task(fsm_SET_AMBERTIME, 250, 0);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	21fa      	movs	r1, #250	; 0xfa
 8000cd8:	4809      	ldr	r0, [pc, #36]	; (8000d00 <fsm_SET_AMBERTIME+0xa8>)
 8000cda:	f000 fe75 	bl	80019c8 <SCH_Add_Task>
}
 8000cde:	bf00      	nop
 8000ce0:	3710      	adds	r7, #16
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	08004b78 	.word	0x08004b78
 8000cec:	2000004c 	.word	0x2000004c
 8000cf0:	20000050 	.word	0x20000050
 8000cf4:	08004b88 	.word	0x08004b88
 8000cf8:	08004b98 	.word	0x08004b98
 8000cfc:	200000e4 	.word	0x200000e4
 8000d00:	08000c59 	.word	0x08000c59

08000d04 <fsm_SET_GREENTIME>:
void fsm_SET_GREENTIME(){
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
	char buffer[16];
	lcd_goto_XY(0, 1);
 8000d0a:	2101      	movs	r1, #1
 8000d0c:	2000      	movs	r0, #0
 8000d0e:	f000 fae4 	bl	80012da <lcd_goto_XY>
	sprintf(buffer,"Setting Green");
 8000d12:	463b      	mov	r3, r7
 8000d14:	491f      	ldr	r1, [pc, #124]	; (8000d94 <fsm_SET_GREENTIME+0x90>)
 8000d16:	4618      	mov	r0, r3
 8000d18:	f003 fb42 	bl	80043a0 <siprintf>
	lcd_send_string(buffer);
 8000d1c:	463b      	mov	r3, r7
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f000 fabc 	bl	800129c <lcd_send_string>
	if (tmp_redtime < 10) {
 8000d24:	4b1c      	ldr	r3, [pc, #112]	; (8000d98 <fsm_SET_GREENTIME+0x94>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	2b09      	cmp	r3, #9
 8000d2a:	dc07      	bgt.n	8000d3c <fsm_SET_GREENTIME+0x38>
		sprintf(buffer,"Mode:4,time:0%d", tmp_greentime);
 8000d2c:	4b1b      	ldr	r3, [pc, #108]	; (8000d9c <fsm_SET_GREENTIME+0x98>)
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	463b      	mov	r3, r7
 8000d32:	491b      	ldr	r1, [pc, #108]	; (8000da0 <fsm_SET_GREENTIME+0x9c>)
 8000d34:	4618      	mov	r0, r3
 8000d36:	f003 fb33 	bl	80043a0 <siprintf>
 8000d3a:	e006      	b.n	8000d4a <fsm_SET_GREENTIME+0x46>
	}
	else {
		sprintf(buffer,"Mode:4,time:%d", tmp_greentime);
 8000d3c:	4b17      	ldr	r3, [pc, #92]	; (8000d9c <fsm_SET_GREENTIME+0x98>)
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	463b      	mov	r3, r7
 8000d42:	4918      	ldr	r1, [pc, #96]	; (8000da4 <fsm_SET_GREENTIME+0xa0>)
 8000d44:	4618      	mov	r0, r3
 8000d46:	f003 fb2b 	bl	80043a0 <siprintf>
	}
	lcd_goto_XY(1, 0);
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	f000 fac4 	bl	80012da <lcd_goto_XY>
	lcd_send_string(buffer);
 8000d52:	463b      	mov	r3, r7
 8000d54:	4618      	mov	r0, r3
 8000d56:	f000 faa1 	bl	800129c <lcd_send_string>

	if (!(toggle++)) setallGreen();
 8000d5a:	4b13      	ldr	r3, [pc, #76]	; (8000da8 <fsm_SET_GREENTIME+0xa4>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	1c5a      	adds	r2, r3, #1
 8000d60:	4911      	ldr	r1, [pc, #68]	; (8000da8 <fsm_SET_GREENTIME+0xa4>)
 8000d62:	600a      	str	r2, [r1, #0]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d102      	bne.n	8000d6e <fsm_SET_GREENTIME+0x6a>
 8000d68:	f001 f8bc 	bl	8001ee4 <setallGreen>
 8000d6c:	e008      	b.n	8000d80 <fsm_SET_GREENTIME+0x7c>
	else if (toggle) {
 8000d6e:	4b0e      	ldr	r3, [pc, #56]	; (8000da8 <fsm_SET_GREENTIME+0xa4>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d004      	beq.n	8000d80 <fsm_SET_GREENTIME+0x7c>
		setallOff();
 8000d76:	f001 f8ed 	bl	8001f54 <setallOff>
		toggle = 0;
 8000d7a:	4b0b      	ldr	r3, [pc, #44]	; (8000da8 <fsm_SET_GREENTIME+0xa4>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
	}
	SCH_Add_Task(fsm_SET_GREENTIME, 250, 0);
 8000d80:	2200      	movs	r2, #0
 8000d82:	21fa      	movs	r1, #250	; 0xfa
 8000d84:	4809      	ldr	r0, [pc, #36]	; (8000dac <fsm_SET_GREENTIME+0xa8>)
 8000d86:	f000 fe1f 	bl	80019c8 <SCH_Add_Task>
}
 8000d8a:	bf00      	nop
 8000d8c:	3710      	adds	r7, #16
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	08004ba8 	.word	0x08004ba8
 8000d98:	2000004c 	.word	0x2000004c
 8000d9c:	20000048 	.word	0x20000048
 8000da0:	08004bb8 	.word	0x08004bb8
 8000da4:	08004bc8 	.word	0x08004bc8
 8000da8:	200000e4 	.word	0x200000e4
 8000dac:	08000d05 	.word	0x08000d05

08000db0 <fsm_mode>:

void fsm_mode () {
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
	if (isKeyPressed(0)) {
 8000db4:	2000      	movs	r0, #0
 8000db6:	f7ff fa4f 	bl	8000258 <isKeyPressed>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	f000 8096 	beq.w	8000eee <fsm_mode+0x13e>
		switch (status) {
 8000dc2:	4b4d      	ldr	r3, [pc, #308]	; (8000ef8 <fsm_mode+0x148>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	3b06      	subs	r3, #6
 8000dc8:	2b0a      	cmp	r3, #10
 8000dca:	f200 8092 	bhi.w	8000ef2 <fsm_mode+0x142>
 8000dce:	a201      	add	r2, pc, #4	; (adr r2, 8000dd4 <fsm_mode+0x24>)
 8000dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dd4:	08000ed5 	.word	0x08000ed5
 8000dd8:	08000ed5 	.word	0x08000ed5
 8000ddc:	08000ed5 	.word	0x08000ed5
 8000de0:	08000ed5 	.word	0x08000ed5
 8000de4:	08000e01 	.word	0x08000e01
 8000de8:	08000e1b 	.word	0x08000e1b
 8000dec:	08000e35 	.word	0x08000e35
 8000df0:	08000e4f 	.word	0x08000e4f
 8000df4:	08000e69 	.word	0x08000e69
 8000df8:	08000e8d 	.word	0x08000e8d
 8000dfc:	08000eb1 	.word	0x08000eb1
		case AUTO_RED_GREEN:
			SCH_Delete_Short_Task();
 8000e00:	f000 fe40 	bl	8001a84 <SCH_Delete_Short_Task>
			status = MAN_RED_GREEN;
 8000e04:	4b3c      	ldr	r3, [pc, #240]	; (8000ef8 <fsm_mode+0x148>)
 8000e06:	2206      	movs	r2, #6
 8000e08:	601a      	str	r2, [r3, #0]
			SCH_Add_Task(fms_MAN_RED_GREEN, 10, 0);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	210a      	movs	r1, #10
 8000e0e:	483b      	ldr	r0, [pc, #236]	; (8000efc <fsm_mode+0x14c>)
 8000e10:	f000 fdda 	bl	80019c8 <SCH_Add_Task>
			lcd_clear_display();
 8000e14:	f000 fa57 	bl	80012c6 <lcd_clear_display>
			break;
 8000e18:	e06c      	b.n	8000ef4 <fsm_mode+0x144>
		case AUTO_RED_YELLOW:
			SCH_Delete_Short_Task();
 8000e1a:	f000 fe33 	bl	8001a84 <SCH_Delete_Short_Task>
			status = MAN_RED_YELLOW;
 8000e1e:	4b36      	ldr	r3, [pc, #216]	; (8000ef8 <fsm_mode+0x148>)
 8000e20:	2207      	movs	r2, #7
 8000e22:	601a      	str	r2, [r3, #0]
			SCH_Add_Task(fms_MAN_RED_YELLOW, 10, 0);
 8000e24:	2200      	movs	r2, #0
 8000e26:	210a      	movs	r1, #10
 8000e28:	4835      	ldr	r0, [pc, #212]	; (8000f00 <fsm_mode+0x150>)
 8000e2a:	f000 fdcd 	bl	80019c8 <SCH_Add_Task>
			lcd_clear_display();
 8000e2e:	f000 fa4a 	bl	80012c6 <lcd_clear_display>
			break;
 8000e32:	e05f      	b.n	8000ef4 <fsm_mode+0x144>
		case AUTO_GREEN_RED:
			SCH_Delete_Short_Task();
 8000e34:	f000 fe26 	bl	8001a84 <SCH_Delete_Short_Task>
			status = MAN_GREEN_RED;
 8000e38:	4b2f      	ldr	r3, [pc, #188]	; (8000ef8 <fsm_mode+0x148>)
 8000e3a:	2208      	movs	r2, #8
 8000e3c:	601a      	str	r2, [r3, #0]
			SCH_Add_Task(fms_MAN_GREEN_RED, 10, 0);
 8000e3e:	2200      	movs	r2, #0
 8000e40:	210a      	movs	r1, #10
 8000e42:	4830      	ldr	r0, [pc, #192]	; (8000f04 <fsm_mode+0x154>)
 8000e44:	f000 fdc0 	bl	80019c8 <SCH_Add_Task>
			lcd_clear_display();
 8000e48:	f000 fa3d 	bl	80012c6 <lcd_clear_display>
			break;
 8000e4c:	e052      	b.n	8000ef4 <fsm_mode+0x144>
		case AUTO_YELLOW_RED:
			SCH_Delete_Short_Task();
 8000e4e:	f000 fe19 	bl	8001a84 <SCH_Delete_Short_Task>
			status = MAN_YELLOW_RED;
 8000e52:	4b29      	ldr	r3, [pc, #164]	; (8000ef8 <fsm_mode+0x148>)
 8000e54:	2209      	movs	r2, #9
 8000e56:	601a      	str	r2, [r3, #0]
			SCH_Add_Task(fms_MAN_YELLOW_RED, 10, 0);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	210a      	movs	r1, #10
 8000e5c:	482a      	ldr	r0, [pc, #168]	; (8000f08 <fsm_mode+0x158>)
 8000e5e:	f000 fdb3 	bl	80019c8 <SCH_Add_Task>
			lcd_clear_display();
 8000e62:	f000 fa30 	bl	80012c6 <lcd_clear_display>
			break;
 8000e66:	e045      	b.n	8000ef4 <fsm_mode+0x144>
		case SET_REDTIME:
			SCH_Delete_Short_Task();
 8000e68:	f000 fe0c 	bl	8001a84 <SCH_Delete_Short_Task>
			status = SET_AMBERTIME;
 8000e6c:	4b22      	ldr	r3, [pc, #136]	; (8000ef8 <fsm_mode+0x148>)
 8000e6e:	220f      	movs	r2, #15
 8000e70:	601a      	str	r2, [r3, #0]
			toggle = 0;
 8000e72:	4b26      	ldr	r3, [pc, #152]	; (8000f0c <fsm_mode+0x15c>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
			countAgain();
 8000e78:	f000 fa96 	bl	80013a8 <countAgain>
			SCH_Add_Task(fsm_SET_AMBERTIME, 10, 0);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	210a      	movs	r1, #10
 8000e80:	4823      	ldr	r0, [pc, #140]	; (8000f10 <fsm_mode+0x160>)
 8000e82:	f000 fda1 	bl	80019c8 <SCH_Add_Task>
			lcd_clear_display();
 8000e86:	f000 fa1e 	bl	80012c6 <lcd_clear_display>
			break;
 8000e8a:	e033      	b.n	8000ef4 <fsm_mode+0x144>
		case SET_AMBERTIME:
			SCH_Delete_Short_Task();
 8000e8c:	f000 fdfa 	bl	8001a84 <SCH_Delete_Short_Task>
			status = SET_GREENTIME;
 8000e90:	4b19      	ldr	r3, [pc, #100]	; (8000ef8 <fsm_mode+0x148>)
 8000e92:	2210      	movs	r2, #16
 8000e94:	601a      	str	r2, [r3, #0]
			toggle = 0;
 8000e96:	4b1d      	ldr	r3, [pc, #116]	; (8000f0c <fsm_mode+0x15c>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
			countAgain();
 8000e9c:	f000 fa84 	bl	80013a8 <countAgain>
			SCH_Add_Task(fsm_SET_GREENTIME, 10, 0);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	210a      	movs	r1, #10
 8000ea4:	481b      	ldr	r0, [pc, #108]	; (8000f14 <fsm_mode+0x164>)
 8000ea6:	f000 fd8f 	bl	80019c8 <SCH_Add_Task>
			lcd_clear_display();
 8000eaa:	f000 fa0c 	bl	80012c6 <lcd_clear_display>
			break;
 8000eae:	e021      	b.n	8000ef4 <fsm_mode+0x144>
		case SET_GREENTIME:
			SCH_Delete_Short_Task();
 8000eb0:	f000 fde8 	bl	8001a84 <SCH_Delete_Short_Task>
			status = MODE0;
 8000eb4:	4b10      	ldr	r3, [pc, #64]	; (8000ef8 <fsm_mode+0x148>)
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	601a      	str	r2, [r3, #0]
			toggle = 0;
 8000eba:	4b14      	ldr	r3, [pc, #80]	; (8000f0c <fsm_mode+0x15c>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
			countAgain();
 8000ec0:	f000 fa72 	bl	80013a8 <countAgain>
			SCH_Add_Task(fsm_INIT, 10, 0);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	210a      	movs	r1, #10
 8000ec8:	4813      	ldr	r0, [pc, #76]	; (8000f18 <fsm_mode+0x168>)
 8000eca:	f000 fd7d 	bl	80019c8 <SCH_Add_Task>
			lcd_clear_display();
 8000ece:	f000 f9fa 	bl	80012c6 <lcd_clear_display>
			break;
 8000ed2:	e00f      	b.n	8000ef4 <fsm_mode+0x144>
		case MAN_RED_GREEN:
		case MAN_RED_YELLOW:
		case MAN_GREEN_RED:
		case MAN_YELLOW_RED:
			SCH_Delete_Short_Task();
 8000ed4:	f000 fdd6 	bl	8001a84 <SCH_Delete_Short_Task>
			status = SET_REDTIME;
 8000ed8:	4b07      	ldr	r3, [pc, #28]	; (8000ef8 <fsm_mode+0x148>)
 8000eda:	220e      	movs	r2, #14
 8000edc:	601a      	str	r2, [r3, #0]
			SCH_Add_Task(fsm_SET_REDTIME, 10, 0);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	210a      	movs	r1, #10
 8000ee2:	480e      	ldr	r0, [pc, #56]	; (8000f1c <fsm_mode+0x16c>)
 8000ee4:	f000 fd70 	bl	80019c8 <SCH_Add_Task>
			lcd_clear_display();
 8000ee8:	f000 f9ed 	bl	80012c6 <lcd_clear_display>
			break;
 8000eec:	e002      	b.n	8000ef4 <fsm_mode+0x144>
		default:
			break;
		}
	}
 8000eee:	bf00      	nop
 8000ef0:	e000      	b.n	8000ef4 <fsm_mode+0x144>
			break;
 8000ef2:	bf00      	nop
}
 8000ef4:	bf00      	nop
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	200000e8 	.word	0x200000e8
 8000efc:	08000909 	.word	0x08000909
 8000f00:	080009a5 	.word	0x080009a5
 8000f04:	08000a3d 	.word	0x08000a3d
 8000f08:	08000ad9 	.word	0x08000ad9
 8000f0c:	200000e4 	.word	0x200000e4
 8000f10:	08000c59 	.word	0x08000c59
 8000f14:	08000d05 	.word	0x08000d05
 8000f18:	08000399 	.word	0x08000399
 8000f1c:	08000bb1 	.word	0x08000bb1

08000f20 <fsm_increase>:

void fsm_increase() {
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
	if (isKeyPressed(1)) {
 8000f24:	2001      	movs	r0, #1
 8000f26:	f7ff f997 	bl	8000258 <isKeyPressed>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d07f      	beq.n	8001030 <fsm_increase+0x110>
		switch(status) {
 8000f30:	4b42      	ldr	r3, [pc, #264]	; (800103c <fsm_increase+0x11c>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	3b06      	subs	r3, #6
 8000f36:	2b0a      	cmp	r3, #10
 8000f38:	d87c      	bhi.n	8001034 <fsm_increase+0x114>
 8000f3a:	a201      	add	r2, pc, #4	; (adr r2, 8000f40 <fsm_increase+0x20>)
 8000f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f40:	08000f6d 	.word	0x08000f6d
 8000f44:	08000f83 	.word	0x08000f83
 8000f48:	08000f99 	.word	0x08000f99
 8000f4c:	08000faf 	.word	0x08000faf
 8000f50:	08001035 	.word	0x08001035
 8000f54:	08001035 	.word	0x08001035
 8000f58:	08001035 	.word	0x08001035
 8000f5c:	08001035 	.word	0x08001035
 8000f60:	08000fc5 	.word	0x08000fc5
 8000f64:	08000fe9 	.word	0x08000fe9
 8000f68:	0800100d 	.word	0x0800100d
		case MAN_RED_GREEN:
			status = MAN_RED_YELLOW;
 8000f6c:	4b33      	ldr	r3, [pc, #204]	; (800103c <fsm_increase+0x11c>)
 8000f6e:	2207      	movs	r2, #7
 8000f70:	601a      	str	r2, [r3, #0]
			SCH_Delete_Short_Task();
 8000f72:	f000 fd87 	bl	8001a84 <SCH_Delete_Short_Task>
			SCH_Add_Task(fms_MAN_RED_YELLOW, 10, 0);
 8000f76:	2200      	movs	r2, #0
 8000f78:	210a      	movs	r1, #10
 8000f7a:	4831      	ldr	r0, [pc, #196]	; (8001040 <fsm_increase+0x120>)
 8000f7c:	f000 fd24 	bl	80019c8 <SCH_Add_Task>
			break;
 8000f80:	e059      	b.n	8001036 <fsm_increase+0x116>

		case MAN_RED_YELLOW:
			status = MAN_GREEN_RED;
 8000f82:	4b2e      	ldr	r3, [pc, #184]	; (800103c <fsm_increase+0x11c>)
 8000f84:	2208      	movs	r2, #8
 8000f86:	601a      	str	r2, [r3, #0]
			SCH_Delete_Short_Task();
 8000f88:	f000 fd7c 	bl	8001a84 <SCH_Delete_Short_Task>
			SCH_Add_Task(fms_MAN_GREEN_RED, 10, 0);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	210a      	movs	r1, #10
 8000f90:	482c      	ldr	r0, [pc, #176]	; (8001044 <fsm_increase+0x124>)
 8000f92:	f000 fd19 	bl	80019c8 <SCH_Add_Task>
			break;
 8000f96:	e04e      	b.n	8001036 <fsm_increase+0x116>

		case MAN_GREEN_RED:
			status = MAN_YELLOW_RED;
 8000f98:	4b28      	ldr	r3, [pc, #160]	; (800103c <fsm_increase+0x11c>)
 8000f9a:	2209      	movs	r2, #9
 8000f9c:	601a      	str	r2, [r3, #0]
			SCH_Delete_Short_Task();
 8000f9e:	f000 fd71 	bl	8001a84 <SCH_Delete_Short_Task>
			SCH_Add_Task(fms_MAN_YELLOW_RED, 10, 0);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	210a      	movs	r1, #10
 8000fa6:	4828      	ldr	r0, [pc, #160]	; (8001048 <fsm_increase+0x128>)
 8000fa8:	f000 fd0e 	bl	80019c8 <SCH_Add_Task>
			break;
 8000fac:	e043      	b.n	8001036 <fsm_increase+0x116>
		case MAN_YELLOW_RED:
			status = MAN_RED_GREEN;
 8000fae:	4b23      	ldr	r3, [pc, #140]	; (800103c <fsm_increase+0x11c>)
 8000fb0:	2206      	movs	r2, #6
 8000fb2:	601a      	str	r2, [r3, #0]
			SCH_Delete_Short_Task();
 8000fb4:	f000 fd66 	bl	8001a84 <SCH_Delete_Short_Task>
			SCH_Add_Task(fms_MAN_RED_GREEN, 10, 0);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	210a      	movs	r1, #10
 8000fbc:	4823      	ldr	r0, [pc, #140]	; (800104c <fsm_increase+0x12c>)
 8000fbe:	f000 fd03 	bl	80019c8 <SCH_Add_Task>
			break;
 8000fc2:	e038      	b.n	8001036 <fsm_increase+0x116>

		case SET_REDTIME:
			tmp_redtime = (tmp_redtime + 1 > 99) ? 0 : tmp_redtime + 1;
 8000fc4:	4b22      	ldr	r3, [pc, #136]	; (8001050 <fsm_increase+0x130>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2b62      	cmp	r3, #98	; 0x62
 8000fca:	dc03      	bgt.n	8000fd4 <fsm_increase+0xb4>
 8000fcc:	4b20      	ldr	r3, [pc, #128]	; (8001050 <fsm_increase+0x130>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	e000      	b.n	8000fd6 <fsm_increase+0xb6>
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	4a1e      	ldr	r2, [pc, #120]	; (8001050 <fsm_increase+0x130>)
 8000fd8:	6013      	str	r3, [r2, #0]
			setBuffer(tmp_redtime, 2);
 8000fda:	4b1d      	ldr	r3, [pc, #116]	; (8001050 <fsm_increase+0x130>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	2102      	movs	r1, #2
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f000 f9a5 	bl	8001330 <setBuffer>
			break;
 8000fe6:	e026      	b.n	8001036 <fsm_increase+0x116>

		case SET_AMBERTIME:
			tmp_ambertime = (tmp_ambertime + 1 > 99) ? 0 : tmp_ambertime + 1;
 8000fe8:	4b1a      	ldr	r3, [pc, #104]	; (8001054 <fsm_increase+0x134>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2b62      	cmp	r3, #98	; 0x62
 8000fee:	dc03      	bgt.n	8000ff8 <fsm_increase+0xd8>
 8000ff0:	4b18      	ldr	r3, [pc, #96]	; (8001054 <fsm_increase+0x134>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	e000      	b.n	8000ffa <fsm_increase+0xda>
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	4a16      	ldr	r2, [pc, #88]	; (8001054 <fsm_increase+0x134>)
 8000ffc:	6013      	str	r3, [r2, #0]
			setBuffer(tmp_redtime, 2);
 8000ffe:	4b14      	ldr	r3, [pc, #80]	; (8001050 <fsm_increase+0x130>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	2102      	movs	r1, #2
 8001004:	4618      	mov	r0, r3
 8001006:	f000 f993 	bl	8001330 <setBuffer>
			break;
 800100a:	e014      	b.n	8001036 <fsm_increase+0x116>

		case SET_GREENTIME:
			tmp_greentime = (tmp_greentime + 1 > 99) ? 0 : tmp_greentime + 1;
 800100c:	4b12      	ldr	r3, [pc, #72]	; (8001058 <fsm_increase+0x138>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2b62      	cmp	r3, #98	; 0x62
 8001012:	dc03      	bgt.n	800101c <fsm_increase+0xfc>
 8001014:	4b10      	ldr	r3, [pc, #64]	; (8001058 <fsm_increase+0x138>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	3301      	adds	r3, #1
 800101a:	e000      	b.n	800101e <fsm_increase+0xfe>
 800101c:	2300      	movs	r3, #0
 800101e:	4a0e      	ldr	r2, [pc, #56]	; (8001058 <fsm_increase+0x138>)
 8001020:	6013      	str	r3, [r2, #0]
			setBuffer(tmp_greentime, 2);
 8001022:	4b0d      	ldr	r3, [pc, #52]	; (8001058 <fsm_increase+0x138>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	2102      	movs	r1, #2
 8001028:	4618      	mov	r0, r3
 800102a:	f000 f981 	bl	8001330 <setBuffer>
			break;
 800102e:	e002      	b.n	8001036 <fsm_increase+0x116>

		default:
			break;
		}
	}
 8001030:	bf00      	nop
 8001032:	e000      	b.n	8001036 <fsm_increase+0x116>
			break;
 8001034:	bf00      	nop
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	200000e8 	.word	0x200000e8
 8001040:	080009a5 	.word	0x080009a5
 8001044:	08000a3d 	.word	0x08000a3d
 8001048:	08000ad9 	.word	0x08000ad9
 800104c:	08000909 	.word	0x08000909
 8001050:	2000004c 	.word	0x2000004c
 8001054:	20000050 	.word	0x20000050
 8001058:	20000048 	.word	0x20000048

0800105c <fsm_confirm>:
void fsm_confirm(){
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
	if (isKeyPressed(2)) {
 8001060:	2002      	movs	r0, #2
 8001062:	f7ff f8f9 	bl	8000258 <isKeyPressed>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d076      	beq.n	800115a <fsm_confirm+0xfe>
		switch (status) {
 800106c:	4b3d      	ldr	r3, [pc, #244]	; (8001164 <fsm_confirm+0x108>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2b10      	cmp	r3, #16
 8001072:	d04b      	beq.n	800110c <fsm_confirm+0xb0>
 8001074:	2b10      	cmp	r3, #16
 8001076:	dc72      	bgt.n	800115e <fsm_confirm+0x102>
 8001078:	2b0e      	cmp	r3, #14
 800107a:	d002      	beq.n	8001082 <fsm_confirm+0x26>
 800107c:	2b0f      	cmp	r3, #15
 800107e:	d027      	beq.n	80010d0 <fsm_confirm+0x74>
			greentime = (redtime - ambertime);
			tmp_greentime = greentime;
			break;

		default:
			break;
 8001080:	e06d      	b.n	800115e <fsm_confirm+0x102>
			redtime = (tmp_redtime - ambertime < 0) ? redtime : tmp_redtime;
 8001082:	4b39      	ldr	r3, [pc, #228]	; (8001168 <fsm_confirm+0x10c>)
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	4b39      	ldr	r3, [pc, #228]	; (800116c <fsm_confirm+0x110>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	1ad3      	subs	r3, r2, r3
 800108c:	2b00      	cmp	r3, #0
 800108e:	da02      	bge.n	8001096 <fsm_confirm+0x3a>
 8001090:	4b37      	ldr	r3, [pc, #220]	; (8001170 <fsm_confirm+0x114>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	e001      	b.n	800109a <fsm_confirm+0x3e>
 8001096:	4b34      	ldr	r3, [pc, #208]	; (8001168 <fsm_confirm+0x10c>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a35      	ldr	r2, [pc, #212]	; (8001170 <fsm_confirm+0x114>)
 800109c:	6013      	str	r3, [r2, #0]
			tmp_redtime = (redtime == tmp_ambertime) ? tmp_redtime : redtime;
 800109e:	4b34      	ldr	r3, [pc, #208]	; (8001170 <fsm_confirm+0x114>)
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	4b34      	ldr	r3, [pc, #208]	; (8001174 <fsm_confirm+0x118>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	429a      	cmp	r2, r3
 80010a8:	d102      	bne.n	80010b0 <fsm_confirm+0x54>
 80010aa:	4b2f      	ldr	r3, [pc, #188]	; (8001168 <fsm_confirm+0x10c>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	e001      	b.n	80010b4 <fsm_confirm+0x58>
 80010b0:	4b2f      	ldr	r3, [pc, #188]	; (8001170 <fsm_confirm+0x114>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a2c      	ldr	r2, [pc, #176]	; (8001168 <fsm_confirm+0x10c>)
 80010b6:	6013      	str	r3, [r2, #0]
			greentime = (redtime - ambertime);
 80010b8:	4b2d      	ldr	r3, [pc, #180]	; (8001170 <fsm_confirm+0x114>)
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	4b2b      	ldr	r3, [pc, #172]	; (800116c <fsm_confirm+0x110>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	4a2d      	ldr	r2, [pc, #180]	; (8001178 <fsm_confirm+0x11c>)
 80010c4:	6013      	str	r3, [r2, #0]
			tmp_greentime = greentime;
 80010c6:	4b2c      	ldr	r3, [pc, #176]	; (8001178 <fsm_confirm+0x11c>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a2c      	ldr	r2, [pc, #176]	; (800117c <fsm_confirm+0x120>)
 80010cc:	6013      	str	r3, [r2, #0]
			break;
 80010ce:	e047      	b.n	8001160 <fsm_confirm+0x104>
			ambertime = (tmp_ambertime + greentime > 99) ? ambertime : tmp_ambertime;
 80010d0:	4b28      	ldr	r3, [pc, #160]	; (8001174 <fsm_confirm+0x118>)
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	4b28      	ldr	r3, [pc, #160]	; (8001178 <fsm_confirm+0x11c>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4413      	add	r3, r2
 80010da:	2b63      	cmp	r3, #99	; 0x63
 80010dc:	dd02      	ble.n	80010e4 <fsm_confirm+0x88>
 80010de:	4b23      	ldr	r3, [pc, #140]	; (800116c <fsm_confirm+0x110>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	e001      	b.n	80010e8 <fsm_confirm+0x8c>
 80010e4:	4b23      	ldr	r3, [pc, #140]	; (8001174 <fsm_confirm+0x118>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a20      	ldr	r2, [pc, #128]	; (800116c <fsm_confirm+0x110>)
 80010ea:	6013      	str	r3, [r2, #0]
			tmp_ambertime = (tmp_ambertime == ambertime) ? tmp_ambertime : ambertime;
 80010ec:	4b1f      	ldr	r3, [pc, #124]	; (800116c <fsm_confirm+0x110>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a20      	ldr	r2, [pc, #128]	; (8001174 <fsm_confirm+0x118>)
 80010f2:	6013      	str	r3, [r2, #0]
			redtime = greentime + ambertime;
 80010f4:	4b20      	ldr	r3, [pc, #128]	; (8001178 <fsm_confirm+0x11c>)
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	4b1c      	ldr	r3, [pc, #112]	; (800116c <fsm_confirm+0x110>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4413      	add	r3, r2
 80010fe:	4a1c      	ldr	r2, [pc, #112]	; (8001170 <fsm_confirm+0x114>)
 8001100:	6013      	str	r3, [r2, #0]
			tmp_redtime = redtime;
 8001102:	4b1b      	ldr	r3, [pc, #108]	; (8001170 <fsm_confirm+0x114>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a18      	ldr	r2, [pc, #96]	; (8001168 <fsm_confirm+0x10c>)
 8001108:	6013      	str	r3, [r2, #0]
			break;
 800110a:	e029      	b.n	8001160 <fsm_confirm+0x104>
			redtime = (tmp_redtime - ambertime < 0) ? redtime : tmp_redtime;
 800110c:	4b16      	ldr	r3, [pc, #88]	; (8001168 <fsm_confirm+0x10c>)
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	4b16      	ldr	r3, [pc, #88]	; (800116c <fsm_confirm+0x110>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	2b00      	cmp	r3, #0
 8001118:	da02      	bge.n	8001120 <fsm_confirm+0xc4>
 800111a:	4b15      	ldr	r3, [pc, #84]	; (8001170 <fsm_confirm+0x114>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	e001      	b.n	8001124 <fsm_confirm+0xc8>
 8001120:	4b11      	ldr	r3, [pc, #68]	; (8001168 <fsm_confirm+0x10c>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a12      	ldr	r2, [pc, #72]	; (8001170 <fsm_confirm+0x114>)
 8001126:	6013      	str	r3, [r2, #0]
			tmp_redtime = (redtime == tmp_ambertime) ? tmp_redtime : redtime;
 8001128:	4b11      	ldr	r3, [pc, #68]	; (8001170 <fsm_confirm+0x114>)
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	4b11      	ldr	r3, [pc, #68]	; (8001174 <fsm_confirm+0x118>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	429a      	cmp	r2, r3
 8001132:	d102      	bne.n	800113a <fsm_confirm+0xde>
 8001134:	4b0c      	ldr	r3, [pc, #48]	; (8001168 <fsm_confirm+0x10c>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	e001      	b.n	800113e <fsm_confirm+0xe2>
 800113a:	4b0d      	ldr	r3, [pc, #52]	; (8001170 <fsm_confirm+0x114>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a0a      	ldr	r2, [pc, #40]	; (8001168 <fsm_confirm+0x10c>)
 8001140:	6013      	str	r3, [r2, #0]
			greentime = (redtime - ambertime);
 8001142:	4b0b      	ldr	r3, [pc, #44]	; (8001170 <fsm_confirm+0x114>)
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	4b09      	ldr	r3, [pc, #36]	; (800116c <fsm_confirm+0x110>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	1ad3      	subs	r3, r2, r3
 800114c:	4a0a      	ldr	r2, [pc, #40]	; (8001178 <fsm_confirm+0x11c>)
 800114e:	6013      	str	r3, [r2, #0]
			tmp_greentime = greentime;
 8001150:	4b09      	ldr	r3, [pc, #36]	; (8001178 <fsm_confirm+0x11c>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a09      	ldr	r2, [pc, #36]	; (800117c <fsm_confirm+0x120>)
 8001156:	6013      	str	r3, [r2, #0]
			break;
 8001158:	e002      	b.n	8001160 <fsm_confirm+0x104>
		}
	}
 800115a:	bf00      	nop
 800115c:	e000      	b.n	8001160 <fsm_confirm+0x104>
			break;
 800115e:	bf00      	nop
}
 8001160:	bf00      	nop
 8001162:	bd80      	pop	{r7, pc}
 8001164:	200000e8 	.word	0x200000e8
 8001168:	2000004c 	.word	0x2000004c
 800116c:	20000044 	.word	0x20000044
 8001170:	20000040 	.word	0x20000040
 8001174:	20000050 	.word	0x20000050
 8001178:	2000003c 	.word	0x2000003c
 800117c:	20000048 	.word	0x20000048

08001180 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD (0x21 << 1) // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af02      	add	r7, sp, #8
 8001186:	4603      	mov	r3, r0
 8001188:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800118a:	79fb      	ldrb	r3, [r7, #7]
 800118c:	f023 030f 	bic.w	r3, r3, #15
 8001190:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8001192:	79fb      	ldrb	r3, [r7, #7]
 8001194:	011b      	lsls	r3, r3, #4
 8001196:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001198:	7bfb      	ldrb	r3, [r7, #15]
 800119a:	f043 030c 	orr.w	r3, r3, #12
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80011a2:	7bfb      	ldrb	r3, [r7, #15]
 80011a4:	f043 0308 	orr.w	r3, r3, #8
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80011ac:	7bbb      	ldrb	r3, [r7, #14]
 80011ae:	f043 030c 	orr.w	r3, r3, #12
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80011b6:	7bbb      	ldrb	r3, [r7, #14]
 80011b8:	f043 0308 	orr.w	r3, r3, #8
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80011c0:	f107 0208 	add.w	r2, r7, #8
 80011c4:	2364      	movs	r3, #100	; 0x64
 80011c6:	9300      	str	r3, [sp, #0]
 80011c8:	2304      	movs	r3, #4
 80011ca:	2142      	movs	r1, #66	; 0x42
 80011cc:	4803      	ldr	r0, [pc, #12]	; (80011dc <lcd_send_cmd+0x5c>)
 80011ce:	f001 fbc9 	bl	8002964 <HAL_I2C_Master_Transmit>
}
 80011d2:	bf00      	nop
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	2000012c 	.word	0x2000012c

080011e0 <lcd_send_data>:

void lcd_send_data (char data)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af02      	add	r7, sp, #8
 80011e6:	4603      	mov	r3, r0
 80011e8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	f023 030f 	bic.w	r3, r3, #15
 80011f0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80011f2:	79fb      	ldrb	r3, [r7, #7]
 80011f4:	011b      	lsls	r3, r3, #4
 80011f6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80011f8:	7bfb      	ldrb	r3, [r7, #15]
 80011fa:	f043 030d 	orr.w	r3, r3, #13
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001202:	7bfb      	ldrb	r3, [r7, #15]
 8001204:	f043 0309 	orr.w	r3, r3, #9
 8001208:	b2db      	uxtb	r3, r3
 800120a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800120c:	7bbb      	ldrb	r3, [r7, #14]
 800120e:	f043 030d 	orr.w	r3, r3, #13
 8001212:	b2db      	uxtb	r3, r3
 8001214:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001216:	7bbb      	ldrb	r3, [r7, #14]
 8001218:	f043 0309 	orr.w	r3, r3, #9
 800121c:	b2db      	uxtb	r3, r3
 800121e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001220:	f107 0208 	add.w	r2, r7, #8
 8001224:	2364      	movs	r3, #100	; 0x64
 8001226:	9300      	str	r3, [sp, #0]
 8001228:	2304      	movs	r3, #4
 800122a:	2142      	movs	r1, #66	; 0x42
 800122c:	4803      	ldr	r0, [pc, #12]	; (800123c <lcd_send_data+0x5c>)
 800122e:	f001 fb99 	bl	8002964 <HAL_I2C_Master_Transmit>
}
 8001232:	bf00      	nop
 8001234:	3710      	adds	r7, #16
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	2000012c 	.word	0x2000012c

08001240 <lcd_init>:

void lcd_init (void) {
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 8001244:	2033      	movs	r0, #51	; 0x33
 8001246:	f7ff ff9b 	bl	8001180 <lcd_send_cmd>
	lcd_send_cmd (0x32);
 800124a:	2032      	movs	r0, #50	; 0x32
 800124c:	f7ff ff98 	bl	8001180 <lcd_send_cmd>
	HAL_Delay(50);
 8001250:	2032      	movs	r0, #50	; 0x32
 8001252:	f000 ff23 	bl	800209c <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 8001256:	2028      	movs	r0, #40	; 0x28
 8001258:	f7ff ff92 	bl	8001180 <lcd_send_cmd>
	HAL_Delay(50);
 800125c:	2032      	movs	r0, #50	; 0x32
 800125e:	f000 ff1d 	bl	800209c <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 8001262:	2001      	movs	r0, #1
 8001264:	f7ff ff8c 	bl	8001180 <lcd_send_cmd>
	HAL_Delay(50);
 8001268:	2032      	movs	r0, #50	; 0x32
 800126a:	f000 ff17 	bl	800209c <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 800126e:	2006      	movs	r0, #6
 8001270:	f7ff ff86 	bl	8001180 <lcd_send_cmd>
	HAL_Delay(50);
 8001274:	2032      	movs	r0, #50	; 0x32
 8001276:	f000 ff11 	bl	800209c <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */
 800127a:	200c      	movs	r0, #12
 800127c:	f7ff ff80 	bl	8001180 <lcd_send_cmd>
	HAL_Delay(50);
 8001280:	2032      	movs	r0, #50	; 0x32
 8001282:	f000 ff0b 	bl	800209c <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 8001286:	2002      	movs	r0, #2
 8001288:	f7ff ff7a 	bl	8001180 <lcd_send_cmd>
	HAL_Delay(50);
 800128c:	2032      	movs	r0, #50	; 0x32
 800128e:	f000 ff05 	bl	800209c <HAL_Delay>
	lcd_send_cmd (0x80);
 8001292:	2080      	movs	r0, #128	; 0x80
 8001294:	f7ff ff74 	bl	8001180 <lcd_send_cmd>
}
 8001298:	bf00      	nop
 800129a:	bd80      	pop	{r7, pc}

0800129c <lcd_send_string>:

void lcd_send_string (char *str)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80012a4:	e006      	b.n	80012b4 <lcd_send_string+0x18>
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	1c5a      	adds	r2, r3, #1
 80012aa:	607a      	str	r2, [r7, #4]
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff ff96 	bl	80011e0 <lcd_send_data>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d1f4      	bne.n	80012a6 <lcd_send_string+0xa>
}
 80012bc:	bf00      	nop
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <lcd_clear_display>:

void lcd_clear_display (void)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x01); //clear display
 80012ca:	2001      	movs	r0, #1
 80012cc:	f7ff ff58 	bl	8001180 <lcd_send_cmd>
	HAL_Delay(50);
 80012d0:	2032      	movs	r0, #50	; 0x32
 80012d2:	f000 fee3 	bl	800209c <HAL_Delay>
}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}

080012da <lcd_goto_XY>:

void lcd_goto_XY (int row, int col)
{
 80012da:	b580      	push	{r7, lr}
 80012dc:	b084      	sub	sp, #16
 80012de:	af00      	add	r7, sp, #0
 80012e0:	6078      	str	r0, [r7, #4]
 80012e2:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 0)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d108      	bne.n	80012fc <lcd_goto_XY+0x22>
	{
		pos_Addr = 0x80 + row - 1 + col;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	b2da      	uxtb	r2, r3
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	4413      	add	r3, r2
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	337f      	adds	r3, #127	; 0x7f
 80012f8:	73fb      	strb	r3, [r7, #15]
 80012fa:	e008      	b.n	800130e <lcd_goto_XY+0x34>
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	3340      	adds	r3, #64	; 0x40
 8001302:	b2db      	uxtb	r3, r3
 8001304:	b25b      	sxtb	r3, r3
 8001306:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800130a:	b25b      	sxtb	r3, r3
 800130c:	73fb      	strb	r3, [r7, #15]
	}
	lcd_send_cmd(pos_Addr);
 800130e:	7bfb      	ldrb	r3, [r7, #15]
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff ff35 	bl	8001180 <lcd_send_cmd>
}
 8001316:	bf00      	nop
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <update7SEG>:
//				HAL_GPIO_WritePin(SEG5_GPIO_Port, SEG5_Pin, GPIO_PIN_SET);
//				HAL_GPIO_WritePin(SEG6_GPIO_Port, SEG6_Pin, GPIO_PIN_SET);
//				break;
//	}
}
void update7SEG (int index){
 800131e:	b480      	push	{r7}
 8001320:	b083      	sub	sp, #12
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
//		HAL_GPIO_WritePin(enb1_GPIO_Port, enb1_Pin, SET);
//		HAL_GPIO_WritePin(enb2_GPIO_Port, enb2_Pin, SET);
//		HAL_GPIO_WritePin(enb3_GPIO_Port, enb3_Pin, SET);
//		break;
//	}
}
 8001326:	bf00      	nop
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	bc80      	pop	{r7}
 800132e:	4770      	bx	lr

08001330 <setBuffer>:
			index_led = 0;
		}
		update7SEG(index_led++);
}

void setBuffer(int led0, int led1) {
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]
	led_buffer[0] = led0/10;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a18      	ldr	r2, [pc, #96]	; (80013a0 <setBuffer+0x70>)
 800133e:	fb82 1203 	smull	r1, r2, r2, r3
 8001342:	1092      	asrs	r2, r2, #2
 8001344:	17db      	asrs	r3, r3, #31
 8001346:	1ad3      	subs	r3, r2, r3
 8001348:	4a16      	ldr	r2, [pc, #88]	; (80013a4 <setBuffer+0x74>)
 800134a:	6013      	str	r3, [r2, #0]
	led_buffer[1] = led0%10;
 800134c:	6879      	ldr	r1, [r7, #4]
 800134e:	4b14      	ldr	r3, [pc, #80]	; (80013a0 <setBuffer+0x70>)
 8001350:	fb83 2301 	smull	r2, r3, r3, r1
 8001354:	109a      	asrs	r2, r3, #2
 8001356:	17cb      	asrs	r3, r1, #31
 8001358:	1ad2      	subs	r2, r2, r3
 800135a:	4613      	mov	r3, r2
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	4413      	add	r3, r2
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	1aca      	subs	r2, r1, r3
 8001364:	4b0f      	ldr	r3, [pc, #60]	; (80013a4 <setBuffer+0x74>)
 8001366:	605a      	str	r2, [r3, #4]
	led_buffer[2] = led1/10;
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	4a0d      	ldr	r2, [pc, #52]	; (80013a0 <setBuffer+0x70>)
 800136c:	fb82 1203 	smull	r1, r2, r2, r3
 8001370:	1092      	asrs	r2, r2, #2
 8001372:	17db      	asrs	r3, r3, #31
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	4a0b      	ldr	r2, [pc, #44]	; (80013a4 <setBuffer+0x74>)
 8001378:	6093      	str	r3, [r2, #8]
	led_buffer[3] = led1%10;
 800137a:	6839      	ldr	r1, [r7, #0]
 800137c:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <setBuffer+0x70>)
 800137e:	fb83 2301 	smull	r2, r3, r3, r1
 8001382:	109a      	asrs	r2, r3, #2
 8001384:	17cb      	asrs	r3, r1, #31
 8001386:	1ad2      	subs	r2, r2, r3
 8001388:	4613      	mov	r3, r2
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	4413      	add	r3, r2
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	1aca      	subs	r2, r1, r3
 8001392:	4b04      	ldr	r3, [pc, #16]	; (80013a4 <setBuffer+0x74>)
 8001394:	60da      	str	r2, [r3, #12]
}
 8001396:	bf00      	nop
 8001398:	370c      	adds	r7, #12
 800139a:	46bd      	mov	sp, r7
 800139c:	bc80      	pop	{r7}
 800139e:	4770      	bx	lr
 80013a0:	66666667 	.word	0x66666667
 80013a4:	20000114 	.word	0x20000114

080013a8 <countAgain>:

void countAgain() {
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
	index_led = 0;
 80013ac:	4b03      	ldr	r3, [pc, #12]	; (80013bc <countAgain+0x14>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
}
 80013b2:	bf00      	nop
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bc80      	pop	{r7}
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	200000ec 	.word	0x200000ec

080013c0 <LEDRED>:
/* USER CODE BEGIN PFP */
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void LEDRED(){
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LD2_Green_Led_GPIO_Port, LD2_Green_Led_Pin);
 80013c4:	2120      	movs	r1, #32
 80013c6:	4802      	ldr	r0, [pc, #8]	; (80013d0 <LEDRED+0x10>)
 80013c8:	f001 f94d 	bl	8002666 <HAL_GPIO_TogglePin>
}
 80013cc:	bf00      	nop
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	40010800 	.word	0x40010800

080013d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013d8:	f000 fdfe 	bl	8001fd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013dc:	f000 f840 	bl	8001460 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013e0:	f000 f924 	bl	800162c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80013e4:	f000 f8f8 	bl	80015d8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80013e8:	f000 f8aa 	bl	8001540 <MX_TIM2_Init>
  MX_I2C1_Init();
 80013ec:	f000 f87a 	bl	80014e4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80013f0:	4814      	ldr	r0, [pc, #80]	; (8001444 <main+0x70>)
 80013f2:	f002 fa6d 	bl	80038d0 <HAL_TIM_Base_Start_IT>
  lcd_init();
 80013f6:	f7ff ff23 	bl	8001240 <lcd_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  SCH_Init();
 80013fa:	f000 fa17 	bl	800182c <SCH_Init>
  SCH_Add_Task(LEDRED,2000,1000); //index0
 80013fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001402:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8001406:	4810      	ldr	r0, [pc, #64]	; (8001448 <main+0x74>)
 8001408:	f000 fade 	bl	80019c8 <SCH_Add_Task>
  SCH_Add_Task(fsm_confirm, 250, 10); //index1
 800140c:	220a      	movs	r2, #10
 800140e:	21fa      	movs	r1, #250	; 0xfa
 8001410:	480e      	ldr	r0, [pc, #56]	; (800144c <main+0x78>)
 8001412:	f000 fad9 	bl	80019c8 <SCH_Add_Task>
  SCH_Add_Task(getKeyInput, 250, 10); //index2
 8001416:	220a      	movs	r2, #10
 8001418:	21fa      	movs	r1, #250	; 0xfa
 800141a:	480d      	ldr	r0, [pc, #52]	; (8001450 <main+0x7c>)
 800141c:	f000 fad4 	bl	80019c8 <SCH_Add_Task>
  SCH_Add_Task(fsm_increase, 250, 10); //index3
 8001420:	220a      	movs	r2, #10
 8001422:	21fa      	movs	r1, #250	; 0xfa
 8001424:	480b      	ldr	r0, [pc, #44]	; (8001454 <main+0x80>)
 8001426:	f000 facf 	bl	80019c8 <SCH_Add_Task>
  SCH_Add_Task(fsm_mode, 250, 10);
 800142a:	220a      	movs	r2, #10
 800142c:	21fa      	movs	r1, #250	; 0xfa
 800142e:	480a      	ldr	r0, [pc, #40]	; (8001458 <main+0x84>)
 8001430:	f000 faca 	bl	80019c8 <SCH_Add_Task>
  SCH_Add_Task(fsm_INIT, 10, 0);
 8001434:	2200      	movs	r2, #0
 8001436:	210a      	movs	r1, #10
 8001438:	4808      	ldr	r0, [pc, #32]	; (800145c <main+0x88>)
 800143a:	f000 fac5 	bl	80019c8 <SCH_Add_Task>
  while (1)
  {
	  SCH_Dispatch_Tasks();
 800143e:	f000 fa79 	bl	8001934 <SCH_Dispatch_Tasks>
 8001442:	e7fc      	b.n	800143e <main+0x6a>
 8001444:	20000180 	.word	0x20000180
 8001448:	080013c1 	.word	0x080013c1
 800144c:	0800105d 	.word	0x0800105d
 8001450:	0800014d 	.word	0x0800014d
 8001454:	08000f21 	.word	0x08000f21
 8001458:	08000db1 	.word	0x08000db1
 800145c:	08000399 	.word	0x08000399

08001460 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b090      	sub	sp, #64	; 0x40
 8001464:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001466:	f107 0318 	add.w	r3, r7, #24
 800146a:	2228      	movs	r2, #40	; 0x28
 800146c:	2100      	movs	r1, #0
 800146e:	4618      	mov	r0, r3
 8001470:	f002 fed8 	bl	8004224 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001474:	1d3b      	adds	r3, r7, #4
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	605a      	str	r2, [r3, #4]
 800147c:	609a      	str	r2, [r3, #8]
 800147e:	60da      	str	r2, [r3, #12]
 8001480:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001482:	2302      	movs	r3, #2
 8001484:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001486:	2301      	movs	r3, #1
 8001488:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800148a:	2310      	movs	r3, #16
 800148c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800148e:	2302      	movs	r3, #2
 8001490:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001492:	2300      	movs	r3, #0
 8001494:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001496:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800149a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800149c:	f107 0318 	add.w	r3, r7, #24
 80014a0:	4618      	mov	r0, r3
 80014a2:	f001 fdb7 	bl	8003014 <HAL_RCC_OscConfig>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80014ac:	f000 f978 	bl	80017a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014b0:	230f      	movs	r3, #15
 80014b2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014b4:	2302      	movs	r3, #2
 80014b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV8;
 80014b8:	23a0      	movs	r3, #160	; 0xa0
 80014ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014c2:	2300      	movs	r3, #0
 80014c4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014c6:	1d3b      	adds	r3, r7, #4
 80014c8:	2102      	movs	r1, #2
 80014ca:	4618      	mov	r0, r3
 80014cc:	f002 f822 	bl	8003514 <HAL_RCC_ClockConfig>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80014d6:	f000 f963 	bl	80017a0 <Error_Handler>
  }
}
 80014da:	bf00      	nop
 80014dc:	3740      	adds	r7, #64	; 0x40
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
	...

080014e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014e8:	4b12      	ldr	r3, [pc, #72]	; (8001534 <MX_I2C1_Init+0x50>)
 80014ea:	4a13      	ldr	r2, [pc, #76]	; (8001538 <MX_I2C1_Init+0x54>)
 80014ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80014ee:	4b11      	ldr	r3, [pc, #68]	; (8001534 <MX_I2C1_Init+0x50>)
 80014f0:	4a12      	ldr	r2, [pc, #72]	; (800153c <MX_I2C1_Init+0x58>)
 80014f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014f4:	4b0f      	ldr	r3, [pc, #60]	; (8001534 <MX_I2C1_Init+0x50>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80014fa:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <MX_I2C1_Init+0x50>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001500:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <MX_I2C1_Init+0x50>)
 8001502:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001506:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001508:	4b0a      	ldr	r3, [pc, #40]	; (8001534 <MX_I2C1_Init+0x50>)
 800150a:	2200      	movs	r2, #0
 800150c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800150e:	4b09      	ldr	r3, [pc, #36]	; (8001534 <MX_I2C1_Init+0x50>)
 8001510:	2200      	movs	r2, #0
 8001512:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001514:	4b07      	ldr	r3, [pc, #28]	; (8001534 <MX_I2C1_Init+0x50>)
 8001516:	2200      	movs	r2, #0
 8001518:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800151a:	4b06      	ldr	r3, [pc, #24]	; (8001534 <MX_I2C1_Init+0x50>)
 800151c:	2200      	movs	r2, #0
 800151e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001520:	4804      	ldr	r0, [pc, #16]	; (8001534 <MX_I2C1_Init+0x50>)
 8001522:	f001 f8db 	bl	80026dc <HAL_I2C_Init>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800152c:	f000 f938 	bl	80017a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001530:	bf00      	nop
 8001532:	bd80      	pop	{r7, pc}
 8001534:	2000012c 	.word	0x2000012c
 8001538:	40005400 	.word	0x40005400
 800153c:	000186a0 	.word	0x000186a0

08001540 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b086      	sub	sp, #24
 8001544:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001546:	f107 0308 	add.w	r3, r7, #8
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	605a      	str	r2, [r3, #4]
 8001550:	609a      	str	r2, [r3, #8]
 8001552:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001554:	463b      	mov	r3, r7
 8001556:	2200      	movs	r2, #0
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800155c:	4b1d      	ldr	r3, [pc, #116]	; (80015d4 <MX_TIM2_Init+0x94>)
 800155e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001562:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001564:	4b1b      	ldr	r3, [pc, #108]	; (80015d4 <MX_TIM2_Init+0x94>)
 8001566:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800156a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800156c:	4b19      	ldr	r3, [pc, #100]	; (80015d4 <MX_TIM2_Init+0x94>)
 800156e:	2200      	movs	r2, #0
 8001570:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001572:	4b18      	ldr	r3, [pc, #96]	; (80015d4 <MX_TIM2_Init+0x94>)
 8001574:	2209      	movs	r2, #9
 8001576:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001578:	4b16      	ldr	r3, [pc, #88]	; (80015d4 <MX_TIM2_Init+0x94>)
 800157a:	2200      	movs	r2, #0
 800157c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800157e:	4b15      	ldr	r3, [pc, #84]	; (80015d4 <MX_TIM2_Init+0x94>)
 8001580:	2200      	movs	r2, #0
 8001582:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001584:	4813      	ldr	r0, [pc, #76]	; (80015d4 <MX_TIM2_Init+0x94>)
 8001586:	f002 f953 	bl	8003830 <HAL_TIM_Base_Init>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001590:	f000 f906 	bl	80017a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001594:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001598:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800159a:	f107 0308 	add.w	r3, r7, #8
 800159e:	4619      	mov	r1, r3
 80015a0:	480c      	ldr	r0, [pc, #48]	; (80015d4 <MX_TIM2_Init+0x94>)
 80015a2:	f002 fad7 	bl	8003b54 <HAL_TIM_ConfigClockSource>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80015ac:	f000 f8f8 	bl	80017a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015b0:	2300      	movs	r3, #0
 80015b2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015b4:	2300      	movs	r3, #0
 80015b6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015b8:	463b      	mov	r3, r7
 80015ba:	4619      	mov	r1, r3
 80015bc:	4805      	ldr	r0, [pc, #20]	; (80015d4 <MX_TIM2_Init+0x94>)
 80015be:	f002 fcb9 	bl	8003f34 <HAL_TIMEx_MasterConfigSynchronization>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80015c8:	f000 f8ea 	bl	80017a0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015cc:	bf00      	nop
 80015ce:	3718      	adds	r7, #24
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	20000180 	.word	0x20000180

080015d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015dc:	4b11      	ldr	r3, [pc, #68]	; (8001624 <MX_USART2_UART_Init+0x4c>)
 80015de:	4a12      	ldr	r2, [pc, #72]	; (8001628 <MX_USART2_UART_Init+0x50>)
 80015e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015e2:	4b10      	ldr	r3, [pc, #64]	; (8001624 <MX_USART2_UART_Init+0x4c>)
 80015e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015ea:	4b0e      	ldr	r3, [pc, #56]	; (8001624 <MX_USART2_UART_Init+0x4c>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015f0:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <MX_USART2_UART_Init+0x4c>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015f6:	4b0b      	ldr	r3, [pc, #44]	; (8001624 <MX_USART2_UART_Init+0x4c>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015fc:	4b09      	ldr	r3, [pc, #36]	; (8001624 <MX_USART2_UART_Init+0x4c>)
 80015fe:	220c      	movs	r2, #12
 8001600:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001602:	4b08      	ldr	r3, [pc, #32]	; (8001624 <MX_USART2_UART_Init+0x4c>)
 8001604:	2200      	movs	r2, #0
 8001606:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001608:	4b06      	ldr	r3, [pc, #24]	; (8001624 <MX_USART2_UART_Init+0x4c>)
 800160a:	2200      	movs	r2, #0
 800160c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800160e:	4805      	ldr	r0, [pc, #20]	; (8001624 <MX_USART2_UART_Init+0x4c>)
 8001610:	f002 fd00 	bl	8004014 <HAL_UART_Init>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800161a:	f000 f8c1 	bl	80017a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	200001c8 	.word	0x200001c8
 8001628:	40004400 	.word	0x40004400

0800162c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b088      	sub	sp, #32
 8001630:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001632:	f107 0310 	add.w	r3, r7, #16
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	605a      	str	r2, [r3, #4]
 800163c:	609a      	str	r2, [r3, #8]
 800163e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001640:	4b4d      	ldr	r3, [pc, #308]	; (8001778 <MX_GPIO_Init+0x14c>)
 8001642:	699b      	ldr	r3, [r3, #24]
 8001644:	4a4c      	ldr	r2, [pc, #304]	; (8001778 <MX_GPIO_Init+0x14c>)
 8001646:	f043 0310 	orr.w	r3, r3, #16
 800164a:	6193      	str	r3, [r2, #24]
 800164c:	4b4a      	ldr	r3, [pc, #296]	; (8001778 <MX_GPIO_Init+0x14c>)
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	f003 0310 	and.w	r3, r3, #16
 8001654:	60fb      	str	r3, [r7, #12]
 8001656:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001658:	4b47      	ldr	r3, [pc, #284]	; (8001778 <MX_GPIO_Init+0x14c>)
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	4a46      	ldr	r2, [pc, #280]	; (8001778 <MX_GPIO_Init+0x14c>)
 800165e:	f043 0320 	orr.w	r3, r3, #32
 8001662:	6193      	str	r3, [r2, #24]
 8001664:	4b44      	ldr	r3, [pc, #272]	; (8001778 <MX_GPIO_Init+0x14c>)
 8001666:	699b      	ldr	r3, [r3, #24]
 8001668:	f003 0320 	and.w	r3, r3, #32
 800166c:	60bb      	str	r3, [r7, #8]
 800166e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001670:	4b41      	ldr	r3, [pc, #260]	; (8001778 <MX_GPIO_Init+0x14c>)
 8001672:	699b      	ldr	r3, [r3, #24]
 8001674:	4a40      	ldr	r2, [pc, #256]	; (8001778 <MX_GPIO_Init+0x14c>)
 8001676:	f043 0304 	orr.w	r3, r3, #4
 800167a:	6193      	str	r3, [r2, #24]
 800167c:	4b3e      	ldr	r3, [pc, #248]	; (8001778 <MX_GPIO_Init+0x14c>)
 800167e:	699b      	ldr	r3, [r3, #24]
 8001680:	f003 0304 	and.w	r3, r3, #4
 8001684:	607b      	str	r3, [r7, #4]
 8001686:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001688:	4b3b      	ldr	r3, [pc, #236]	; (8001778 <MX_GPIO_Init+0x14c>)
 800168a:	699b      	ldr	r3, [r3, #24]
 800168c:	4a3a      	ldr	r2, [pc, #232]	; (8001778 <MX_GPIO_Init+0x14c>)
 800168e:	f043 0308 	orr.w	r3, r3, #8
 8001692:	6193      	str	r3, [r2, #24]
 8001694:	4b38      	ldr	r3, [pc, #224]	; (8001778 <MX_GPIO_Init+0x14c>)
 8001696:	699b      	ldr	r3, [r3, #24]
 8001698:	f003 0308 	and.w	r3, r3, #8
 800169c:	603b      	str	r3, [r7, #0]
 800169e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_Green_Led_GPIO_Port, LD2_Green_Led_Pin, GPIO_PIN_RESET);
 80016a0:	2200      	movs	r2, #0
 80016a2:	2120      	movs	r1, #32
 80016a4:	4835      	ldr	r0, [pc, #212]	; (800177c <MX_GPIO_Init+0x150>)
 80016a6:	f000 ffc6 	bl	8002636 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D9_LED0_GPIO_Port, D9_LED0_Pin, GPIO_PIN_RESET);
 80016aa:	2200      	movs	r2, #0
 80016ac:	2180      	movs	r1, #128	; 0x80
 80016ae:	4834      	ldr	r0, [pc, #208]	; (8001780 <MX_GPIO_Init+0x154>)
 80016b0:	f000 ffc1 	bl	8002636 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D3_LED0_Pin|D4_LED1_Pin|D10_LED1_Pin, GPIO_PIN_RESET);
 80016b4:	2200      	movs	r2, #0
 80016b6:	2168      	movs	r1, #104	; 0x68
 80016b8:	4832      	ldr	r0, [pc, #200]	; (8001784 <MX_GPIO_Init+0x158>)
 80016ba:	f000 ffbc 	bl	8002636 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80016be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016c4:	4b30      	ldr	r3, [pc, #192]	; (8001788 <MX_GPIO_Init+0x15c>)
 80016c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c8:	2300      	movs	r3, #0
 80016ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80016cc:	f107 0310 	add.w	r3, r7, #16
 80016d0:	4619      	mov	r1, r3
 80016d2:	482b      	ldr	r0, [pc, #172]	; (8001780 <MX_GPIO_Init+0x154>)
 80016d4:	f000 fe14 	bl	8002300 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Green_Led_Pin */
  GPIO_InitStruct.Pin = LD2_Green_Led_Pin;
 80016d8:	2320      	movs	r3, #32
 80016da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016dc:	2301      	movs	r3, #1
 80016de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e4:	2302      	movs	r3, #2
 80016e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_Green_Led_GPIO_Port, &GPIO_InitStruct);
 80016e8:	f107 0310 	add.w	r3, r7, #16
 80016ec:	4619      	mov	r1, r3
 80016ee:	4823      	ldr	r0, [pc, #140]	; (800177c <MX_GPIO_Init+0x150>)
 80016f0:	f000 fe06 	bl	8002300 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_btn1_Pin D5_btn0_Pin */
  GPIO_InitStruct.Pin = D6_btn1_Pin|D5_btn0_Pin;
 80016f4:	f44f 6382 	mov.w	r3, #1040	; 0x410
 80016f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016fa:	2300      	movs	r3, #0
 80016fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016fe:	2301      	movs	r3, #1
 8001700:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001702:	f107 0310 	add.w	r3, r7, #16
 8001706:	4619      	mov	r1, r3
 8001708:	481e      	ldr	r0, [pc, #120]	; (8001784 <MX_GPIO_Init+0x158>)
 800170a:	f000 fdf9 	bl	8002300 <HAL_GPIO_Init>

  /*Configure GPIO pin : D9_LED0_Pin */
  GPIO_InitStruct.Pin = D9_LED0_Pin;
 800170e:	2380      	movs	r3, #128	; 0x80
 8001710:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001712:	2301      	movs	r3, #1
 8001714:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001716:	2300      	movs	r3, #0
 8001718:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171a:	2302      	movs	r3, #2
 800171c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(D9_LED0_GPIO_Port, &GPIO_InitStruct);
 800171e:	f107 0310 	add.w	r3, r7, #16
 8001722:	4619      	mov	r1, r3
 8001724:	4816      	ldr	r0, [pc, #88]	; (8001780 <MX_GPIO_Init+0x154>)
 8001726:	f000 fdeb 	bl	8002300 <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_btn2_Pin D8_btn3_Pin */
  GPIO_InitStruct.Pin = D7_btn2_Pin|D8_btn3_Pin;
 800172a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800172e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001730:	2300      	movs	r3, #0
 8001732:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001734:	2301      	movs	r3, #1
 8001736:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001738:	f107 0310 	add.w	r3, r7, #16
 800173c:	4619      	mov	r1, r3
 800173e:	480f      	ldr	r0, [pc, #60]	; (800177c <MX_GPIO_Init+0x150>)
 8001740:	f000 fdde 	bl	8002300 <HAL_GPIO_Init>

  /*Configure GPIO pins : D3_LED0_Pin D4_LED1_Pin D10_LED1_Pin */
  GPIO_InitStruct.Pin = D3_LED0_Pin|D4_LED1_Pin|D10_LED1_Pin;
 8001744:	2368      	movs	r3, #104	; 0x68
 8001746:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001748:	2301      	movs	r3, #1
 800174a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001750:	2302      	movs	r3, #2
 8001752:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001754:	f107 0310 	add.w	r3, r7, #16
 8001758:	4619      	mov	r1, r3
 800175a:	480a      	ldr	r0, [pc, #40]	; (8001784 <MX_GPIO_Init+0x158>)
 800175c:	f000 fdd0 	bl	8002300 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001760:	2200      	movs	r2, #0
 8001762:	2100      	movs	r1, #0
 8001764:	2028      	movs	r0, #40	; 0x28
 8001766:	f000 fd94 	bl	8002292 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800176a:	2028      	movs	r0, #40	; 0x28
 800176c:	f000 fdad 	bl	80022ca <HAL_NVIC_EnableIRQ>

}
 8001770:	bf00      	nop
 8001772:	3720      	adds	r7, #32
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40021000 	.word	0x40021000
 800177c:	40010800 	.word	0x40010800
 8001780:	40011000 	.word	0x40011000
 8001784:	40010c00 	.word	0x40010c00
 8001788:	10110000 	.word	0x10110000

0800178c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
	SCH_Update();
 8001794:	f000 f860 	bl	8001858 <SCH_Update>
}
 8001798:	bf00      	nop
 800179a:	3708      	adds	r7, #8
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017a4:	b672      	cpsid	i
}
 80017a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017a8:	e7fe      	b.n	80017a8 <Error_Handler+0x8>
	...

080017ac <SCH_Delete_Task>:

#include <scheduler.h>

sTasks SCH_tasks_G[SCH_MAX_TASK];

void SCH_Delete_Task(const unsigned char TASK_INDEX) {
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	71fb      	strb	r3, [r7, #7]
	if (TASK_INDEX < SCH_MAX_TASK ) {
 80017b6:	79fb      	ldrb	r3, [r7, #7]
 80017b8:	2b09      	cmp	r3, #9
 80017ba:	d830      	bhi.n	800181e <SCH_Delete_Task+0x72>
		SCH_tasks_G[TASK_INDEX].pTask = 0x0000;
 80017bc:	79fa      	ldrb	r2, [r7, #7]
 80017be:	491a      	ldr	r1, [pc, #104]	; (8001828 <SCH_Delete_Task+0x7c>)
 80017c0:	4613      	mov	r3, r2
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	4413      	add	r3, r2
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	440b      	add	r3, r1
 80017ca:	2200      	movs	r2, #0
 80017cc:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[TASK_INDEX].Delay = 0;
 80017ce:	79fa      	ldrb	r2, [r7, #7]
 80017d0:	4915      	ldr	r1, [pc, #84]	; (8001828 <SCH_Delete_Task+0x7c>)
 80017d2:	4613      	mov	r3, r2
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	4413      	add	r3, r2
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	440b      	add	r3, r1
 80017dc:	3304      	adds	r3, #4
 80017de:	2200      	movs	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[TASK_INDEX].Period = 0;
 80017e2:	79fa      	ldrb	r2, [r7, #7]
 80017e4:	4910      	ldr	r1, [pc, #64]	; (8001828 <SCH_Delete_Task+0x7c>)
 80017e6:	4613      	mov	r3, r2
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	4413      	add	r3, r2
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	440b      	add	r3, r1
 80017f0:	3308      	adds	r3, #8
 80017f2:	2200      	movs	r2, #0
 80017f4:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[TASK_INDEX].Runme = 0;
 80017f6:	79fa      	ldrb	r2, [r7, #7]
 80017f8:	490b      	ldr	r1, [pc, #44]	; (8001828 <SCH_Delete_Task+0x7c>)
 80017fa:	4613      	mov	r3, r2
 80017fc:	009b      	lsls	r3, r3, #2
 80017fe:	4413      	add	r3, r2
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	440b      	add	r3, r1
 8001804:	330c      	adds	r3, #12
 8001806:	2200      	movs	r2, #0
 8001808:	701a      	strb	r2, [r3, #0]
		SCH_tasks_G[TASK_INDEX].TaskID = 0;
 800180a:	79fa      	ldrb	r2, [r7, #7]
 800180c:	4906      	ldr	r1, [pc, #24]	; (8001828 <SCH_Delete_Task+0x7c>)
 800180e:	4613      	mov	r3, r2
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	4413      	add	r3, r2
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	440b      	add	r3, r1
 8001818:	3310      	adds	r3, #16
 800181a:	2200      	movs	r2, #0
 800181c:	601a      	str	r2, [r3, #0]
	}
}
 800181e:	bf00      	nop
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	bc80      	pop	{r7}
 8001826:	4770      	bx	lr
 8001828:	20000210 	.word	0x20000210

0800182c <SCH_Init>:

void SCH_Init(void) {
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
	unsigned char i;
	for (i = 0; i < SCH_MAX_TASK; i++) {
 8001832:	2300      	movs	r3, #0
 8001834:	71fb      	strb	r3, [r7, #7]
 8001836:	e006      	b.n	8001846 <SCH_Init+0x1a>
		SCH_Delete_Task(i);
 8001838:	79fb      	ldrb	r3, [r7, #7]
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff ffb6 	bl	80017ac <SCH_Delete_Task>
	for (i = 0; i < SCH_MAX_TASK; i++) {
 8001840:	79fb      	ldrb	r3, [r7, #7]
 8001842:	3301      	adds	r3, #1
 8001844:	71fb      	strb	r3, [r7, #7]
 8001846:	79fb      	ldrb	r3, [r7, #7]
 8001848:	2b09      	cmp	r3, #9
 800184a:	d9f5      	bls.n	8001838 <SCH_Init+0xc>
	}
}
 800184c:	bf00      	nop
 800184e:	bf00      	nop
 8001850:	3708      	adds	r7, #8
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
	...

08001858 <SCH_Update>:

void SCH_Update(void) {
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
	unsigned char Index;
	for (Index = 0; Index < SCH_MAX_TASK; Index++) {
 800185e:	2300      	movs	r3, #0
 8001860:	71fb      	strb	r3, [r7, #7]
 8001862:	e05c      	b.n	800191e <SCH_Update+0xc6>
		if (SCH_tasks_G[Index].pTask) {
 8001864:	79fa      	ldrb	r2, [r7, #7]
 8001866:	4932      	ldr	r1, [pc, #200]	; (8001930 <SCH_Update+0xd8>)
 8001868:	4613      	mov	r3, r2
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	4413      	add	r3, r2
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	440b      	add	r3, r1
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d04f      	beq.n	8001918 <SCH_Update+0xc0>
			if (SCH_tasks_G[Index].Delay == 0) {
 8001878:	79fa      	ldrb	r2, [r7, #7]
 800187a:	492d      	ldr	r1, [pc, #180]	; (8001930 <SCH_Update+0xd8>)
 800187c:	4613      	mov	r3, r2
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	4413      	add	r3, r2
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	440b      	add	r3, r1
 8001886:	3304      	adds	r3, #4
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d132      	bne.n	80018f4 <SCH_Update+0x9c>
				SCH_tasks_G[Index].Runme += 1;
 800188e:	79fa      	ldrb	r2, [r7, #7]
 8001890:	4927      	ldr	r1, [pc, #156]	; (8001930 <SCH_Update+0xd8>)
 8001892:	4613      	mov	r3, r2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	4413      	add	r3, r2
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	440b      	add	r3, r1
 800189c:	330c      	adds	r3, #12
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	79fa      	ldrb	r2, [r7, #7]
 80018a2:	3301      	adds	r3, #1
 80018a4:	b2d8      	uxtb	r0, r3
 80018a6:	4922      	ldr	r1, [pc, #136]	; (8001930 <SCH_Update+0xd8>)
 80018a8:	4613      	mov	r3, r2
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	4413      	add	r3, r2
 80018ae:	009b      	lsls	r3, r3, #2
 80018b0:	440b      	add	r3, r1
 80018b2:	330c      	adds	r3, #12
 80018b4:	4602      	mov	r2, r0
 80018b6:	701a      	strb	r2, [r3, #0]
				if (SCH_tasks_G[Index].Period){
 80018b8:	79fa      	ldrb	r2, [r7, #7]
 80018ba:	491d      	ldr	r1, [pc, #116]	; (8001930 <SCH_Update+0xd8>)
 80018bc:	4613      	mov	r3, r2
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	4413      	add	r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	440b      	add	r3, r1
 80018c6:	3308      	adds	r3, #8
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d024      	beq.n	8001918 <SCH_Update+0xc0>
					SCH_tasks_G[Index].Delay = SCH_tasks_G[Index].Period;
 80018ce:	79f9      	ldrb	r1, [r7, #7]
 80018d0:	79fa      	ldrb	r2, [r7, #7]
 80018d2:	4817      	ldr	r0, [pc, #92]	; (8001930 <SCH_Update+0xd8>)
 80018d4:	460b      	mov	r3, r1
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	440b      	add	r3, r1
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	4403      	add	r3, r0
 80018de:	3308      	adds	r3, #8
 80018e0:	6819      	ldr	r1, [r3, #0]
 80018e2:	4813      	ldr	r0, [pc, #76]	; (8001930 <SCH_Update+0xd8>)
 80018e4:	4613      	mov	r3, r2
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	4413      	add	r3, r2
 80018ea:	009b      	lsls	r3, r3, #2
 80018ec:	4403      	add	r3, r0
 80018ee:	3304      	adds	r3, #4
 80018f0:	6019      	str	r1, [r3, #0]
 80018f2:	e011      	b.n	8001918 <SCH_Update+0xc0>
				}
			}
			else {
				SCH_tasks_G[Index].Delay--;
 80018f4:	79fa      	ldrb	r2, [r7, #7]
 80018f6:	490e      	ldr	r1, [pc, #56]	; (8001930 <SCH_Update+0xd8>)
 80018f8:	4613      	mov	r3, r2
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	4413      	add	r3, r2
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	440b      	add	r3, r1
 8001902:	3304      	adds	r3, #4
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	1e59      	subs	r1, r3, #1
 8001908:	4809      	ldr	r0, [pc, #36]	; (8001930 <SCH_Update+0xd8>)
 800190a:	4613      	mov	r3, r2
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	4413      	add	r3, r2
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	4403      	add	r3, r0
 8001914:	3304      	adds	r3, #4
 8001916:	6019      	str	r1, [r3, #0]
	for (Index = 0; Index < SCH_MAX_TASK; Index++) {
 8001918:	79fb      	ldrb	r3, [r7, #7]
 800191a:	3301      	adds	r3, #1
 800191c:	71fb      	strb	r3, [r7, #7]
 800191e:	79fb      	ldrb	r3, [r7, #7]
 8001920:	2b09      	cmp	r3, #9
 8001922:	d99f      	bls.n	8001864 <SCH_Update+0xc>
			}
		}
	}
}
 8001924:	bf00      	nop
 8001926:	bf00      	nop
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	bc80      	pop	{r7}
 800192e:	4770      	bx	lr
 8001930:	20000210 	.word	0x20000210

08001934 <SCH_Dispatch_Tasks>:
void SCH_Dispatch_Tasks(void) {
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
	unsigned char Index;
	for (Index = 0; Index < SCH_MAX_TASK; Index++) {
 800193a:	2300      	movs	r3, #0
 800193c:	71fb      	strb	r3, [r7, #7]
 800193e:	e039      	b.n	80019b4 <SCH_Dispatch_Tasks+0x80>
		if (SCH_tasks_G[Index].Runme > 0) {
 8001940:	79fa      	ldrb	r2, [r7, #7]
 8001942:	4920      	ldr	r1, [pc, #128]	; (80019c4 <SCH_Dispatch_Tasks+0x90>)
 8001944:	4613      	mov	r3, r2
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	4413      	add	r3, r2
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	440b      	add	r3, r1
 800194e:	330c      	adds	r3, #12
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d02b      	beq.n	80019ae <SCH_Dispatch_Tasks+0x7a>
			(*SCH_tasks_G[Index].pTask)();
 8001956:	79fa      	ldrb	r2, [r7, #7]
 8001958:	491a      	ldr	r1, [pc, #104]	; (80019c4 <SCH_Dispatch_Tasks+0x90>)
 800195a:	4613      	mov	r3, r2
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	4413      	add	r3, r2
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	440b      	add	r3, r1
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4798      	blx	r3
			SCH_tasks_G[Index].Runme--;
 8001968:	79fa      	ldrb	r2, [r7, #7]
 800196a:	4916      	ldr	r1, [pc, #88]	; (80019c4 <SCH_Dispatch_Tasks+0x90>)
 800196c:	4613      	mov	r3, r2
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	4413      	add	r3, r2
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	440b      	add	r3, r1
 8001976:	330c      	adds	r3, #12
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	3b01      	subs	r3, #1
 800197c:	b2d8      	uxtb	r0, r3
 800197e:	4911      	ldr	r1, [pc, #68]	; (80019c4 <SCH_Dispatch_Tasks+0x90>)
 8001980:	4613      	mov	r3, r2
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	4413      	add	r3, r2
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	440b      	add	r3, r1
 800198a:	330c      	adds	r3, #12
 800198c:	4602      	mov	r2, r0
 800198e:	701a      	strb	r2, [r3, #0]
			if (SCH_tasks_G[Index].Period == 0) {
 8001990:	79fa      	ldrb	r2, [r7, #7]
 8001992:	490c      	ldr	r1, [pc, #48]	; (80019c4 <SCH_Dispatch_Tasks+0x90>)
 8001994:	4613      	mov	r3, r2
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	4413      	add	r3, r2
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	440b      	add	r3, r1
 800199e:	3308      	adds	r3, #8
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d103      	bne.n	80019ae <SCH_Dispatch_Tasks+0x7a>
				SCH_Delete_Task(Index);
 80019a6:	79fb      	ldrb	r3, [r7, #7]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff feff 	bl	80017ac <SCH_Delete_Task>
	for (Index = 0; Index < SCH_MAX_TASK; Index++) {
 80019ae:	79fb      	ldrb	r3, [r7, #7]
 80019b0:	3301      	adds	r3, #1
 80019b2:	71fb      	strb	r3, [r7, #7]
 80019b4:	79fb      	ldrb	r3, [r7, #7]
 80019b6:	2b09      	cmp	r3, #9
 80019b8:	d9c2      	bls.n	8001940 <SCH_Dispatch_Tasks+0xc>
			}
		}
	}
}
 80019ba:	bf00      	nop
 80019bc:	bf00      	nop
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	20000210 	.word	0x20000210

080019c8 <SCH_Add_Task>:
void SCH_Add_Task(void(*pFunction)(), uint32_t DELAY, uint32_t PERIOD) {
 80019c8:	b480      	push	{r7}
 80019ca:	b087      	sub	sp, #28
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	60b9      	str	r1, [r7, #8]
 80019d2:	607a      	str	r2, [r7, #4]
	unsigned char Index = 0;
 80019d4:	2300      	movs	r3, #0
 80019d6:	75fb      	strb	r3, [r7, #23]
	while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASK)) {
 80019d8:	e002      	b.n	80019e0 <SCH_Add_Task+0x18>
		Index++;
 80019da:	7dfb      	ldrb	r3, [r7, #23]
 80019dc:	3301      	adds	r3, #1
 80019de:	75fb      	strb	r3, [r7, #23]
	while ((SCH_tasks_G[Index].pTask != 0) && (Index < SCH_MAX_TASK)) {
 80019e0:	7dfa      	ldrb	r2, [r7, #23]
 80019e2:	4926      	ldr	r1, [pc, #152]	; (8001a7c <SCH_Add_Task+0xb4>)
 80019e4:	4613      	mov	r3, r2
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	4413      	add	r3, r2
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	440b      	add	r3, r1
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d002      	beq.n	80019fa <SCH_Add_Task+0x32>
 80019f4:	7dfb      	ldrb	r3, [r7, #23]
 80019f6:	2b09      	cmp	r3, #9
 80019f8:	d9ef      	bls.n	80019da <SCH_Add_Task+0x12>
	}
	if (Index < SCH_MAX_TASK) {
 80019fa:	7dfb      	ldrb	r3, [r7, #23]
 80019fc:	2b09      	cmp	r3, #9
 80019fe:	d838      	bhi.n	8001a72 <SCH_Add_Task+0xaa>
		SCH_tasks_G[Index].pTask = pFunction;
 8001a00:	7dfa      	ldrb	r2, [r7, #23]
 8001a02:	491e      	ldr	r1, [pc, #120]	; (8001a7c <SCH_Add_Task+0xb4>)
 8001a04:	4613      	mov	r3, r2
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	4413      	add	r3, r2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	440b      	add	r3, r1
 8001a0e:	68fa      	ldr	r2, [r7, #12]
 8001a10:	601a      	str	r2, [r3, #0]
		SCH_tasks_G[Index].Delay = DELAY/TICK;
 8001a12:	7dfa      	ldrb	r2, [r7, #23]
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	491a      	ldr	r1, [pc, #104]	; (8001a80 <SCH_Add_Task+0xb8>)
 8001a18:	fba1 1303 	umull	r1, r3, r1, r3
 8001a1c:	08d9      	lsrs	r1, r3, #3
 8001a1e:	4817      	ldr	r0, [pc, #92]	; (8001a7c <SCH_Add_Task+0xb4>)
 8001a20:	4613      	mov	r3, r2
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	4413      	add	r3, r2
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	4403      	add	r3, r0
 8001a2a:	3304      	adds	r3, #4
 8001a2c:	6019      	str	r1, [r3, #0]
		SCH_tasks_G[Index].Period = PERIOD/TICK;
 8001a2e:	7dfa      	ldrb	r2, [r7, #23]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	4913      	ldr	r1, [pc, #76]	; (8001a80 <SCH_Add_Task+0xb8>)
 8001a34:	fba1 1303 	umull	r1, r3, r1, r3
 8001a38:	08d9      	lsrs	r1, r3, #3
 8001a3a:	4810      	ldr	r0, [pc, #64]	; (8001a7c <SCH_Add_Task+0xb4>)
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	4413      	add	r3, r2
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	4403      	add	r3, r0
 8001a46:	3308      	adds	r3, #8
 8001a48:	6019      	str	r1, [r3, #0]
		SCH_tasks_G[Index].Runme = 0;
 8001a4a:	7dfa      	ldrb	r2, [r7, #23]
 8001a4c:	490b      	ldr	r1, [pc, #44]	; (8001a7c <SCH_Add_Task+0xb4>)
 8001a4e:	4613      	mov	r3, r2
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	4413      	add	r3, r2
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	440b      	add	r3, r1
 8001a58:	330c      	adds	r3, #12
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	701a      	strb	r2, [r3, #0]
		SCH_tasks_G[Index].TaskID = Index;
 8001a5e:	7dfa      	ldrb	r2, [r7, #23]
 8001a60:	7df9      	ldrb	r1, [r7, #23]
 8001a62:	4806      	ldr	r0, [pc, #24]	; (8001a7c <SCH_Add_Task+0xb4>)
 8001a64:	4613      	mov	r3, r2
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	4413      	add	r3, r2
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	4403      	add	r3, r0
 8001a6e:	3310      	adds	r3, #16
 8001a70:	6019      	str	r1, [r3, #0]
	}
}
 8001a72:	bf00      	nop
 8001a74:	371c      	adds	r7, #28
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bc80      	pop	{r7}
 8001a7a:	4770      	bx	lr
 8001a7c:	20000210 	.word	0x20000210
 8001a80:	cccccccd 	.word	0xcccccccd

08001a84 <SCH_Delete_Short_Task>:

void SCH_Delete_Short_Task(void) {
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
	unsigned char i;
	for (i = 0; i < SCH_MAX_TASK; i++) {
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	71fb      	strb	r3, [r7, #7]
 8001a8e:	e01c      	b.n	8001aca <SCH_Delete_Short_Task+0x46>
		if (SCH_tasks_G[i].Period == 0 && SCH_tasks_G[i].Delay != 0) {
 8001a90:	79fa      	ldrb	r2, [r7, #7]
 8001a92:	4912      	ldr	r1, [pc, #72]	; (8001adc <SCH_Delete_Short_Task+0x58>)
 8001a94:	4613      	mov	r3, r2
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	4413      	add	r3, r2
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	440b      	add	r3, r1
 8001a9e:	3308      	adds	r3, #8
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d10e      	bne.n	8001ac4 <SCH_Delete_Short_Task+0x40>
 8001aa6:	79fa      	ldrb	r2, [r7, #7]
 8001aa8:	490c      	ldr	r1, [pc, #48]	; (8001adc <SCH_Delete_Short_Task+0x58>)
 8001aaa:	4613      	mov	r3, r2
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	4413      	add	r3, r2
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	440b      	add	r3, r1
 8001ab4:	3304      	adds	r3, #4
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d003      	beq.n	8001ac4 <SCH_Delete_Short_Task+0x40>
			SCH_Delete_Task(i);
 8001abc:	79fb      	ldrb	r3, [r7, #7]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff fe74 	bl	80017ac <SCH_Delete_Task>
	for (i = 0; i < SCH_MAX_TASK; i++) {
 8001ac4:	79fb      	ldrb	r3, [r7, #7]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	71fb      	strb	r3, [r7, #7]
 8001aca:	79fb      	ldrb	r3, [r7, #7]
 8001acc:	2b09      	cmp	r3, #9
 8001ace:	d9df      	bls.n	8001a90 <SCH_Delete_Short_Task+0xc>
		}
	}
}
 8001ad0:	bf00      	nop
 8001ad2:	bf00      	nop
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	20000210 	.word	0x20000210

08001ae0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b085      	sub	sp, #20
 8001ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ae6:	4b15      	ldr	r3, [pc, #84]	; (8001b3c <HAL_MspInit+0x5c>)
 8001ae8:	699b      	ldr	r3, [r3, #24]
 8001aea:	4a14      	ldr	r2, [pc, #80]	; (8001b3c <HAL_MspInit+0x5c>)
 8001aec:	f043 0301 	orr.w	r3, r3, #1
 8001af0:	6193      	str	r3, [r2, #24]
 8001af2:	4b12      	ldr	r3, [pc, #72]	; (8001b3c <HAL_MspInit+0x5c>)
 8001af4:	699b      	ldr	r3, [r3, #24]
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	60bb      	str	r3, [r7, #8]
 8001afc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001afe:	4b0f      	ldr	r3, [pc, #60]	; (8001b3c <HAL_MspInit+0x5c>)
 8001b00:	69db      	ldr	r3, [r3, #28]
 8001b02:	4a0e      	ldr	r2, [pc, #56]	; (8001b3c <HAL_MspInit+0x5c>)
 8001b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b08:	61d3      	str	r3, [r2, #28]
 8001b0a:	4b0c      	ldr	r3, [pc, #48]	; (8001b3c <HAL_MspInit+0x5c>)
 8001b0c:	69db      	ldr	r3, [r3, #28]
 8001b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b12:	607b      	str	r3, [r7, #4]
 8001b14:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001b16:	4b0a      	ldr	r3, [pc, #40]	; (8001b40 <HAL_MspInit+0x60>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	4a04      	ldr	r2, [pc, #16]	; (8001b40 <HAL_MspInit+0x60>)
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b32:	bf00      	nop
 8001b34:	3714      	adds	r7, #20
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bc80      	pop	{r7}
 8001b3a:	4770      	bx	lr
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	40010000 	.word	0x40010000

08001b44 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b08a      	sub	sp, #40	; 0x28
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b4c:	f107 0314 	add.w	r3, r7, #20
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	605a      	str	r2, [r3, #4]
 8001b56:	609a      	str	r2, [r3, #8]
 8001b58:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a1d      	ldr	r2, [pc, #116]	; (8001bd4 <HAL_I2C_MspInit+0x90>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d132      	bne.n	8001bca <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b64:	4b1c      	ldr	r3, [pc, #112]	; (8001bd8 <HAL_I2C_MspInit+0x94>)
 8001b66:	699b      	ldr	r3, [r3, #24]
 8001b68:	4a1b      	ldr	r2, [pc, #108]	; (8001bd8 <HAL_I2C_MspInit+0x94>)
 8001b6a:	f043 0308 	orr.w	r3, r3, #8
 8001b6e:	6193      	str	r3, [r2, #24]
 8001b70:	4b19      	ldr	r3, [pc, #100]	; (8001bd8 <HAL_I2C_MspInit+0x94>)
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	f003 0308 	and.w	r3, r3, #8
 8001b78:	613b      	str	r3, [r7, #16]
 8001b7a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b7c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b82:	2312      	movs	r3, #18
 8001b84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b86:	2303      	movs	r3, #3
 8001b88:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b8a:	f107 0314 	add.w	r3, r7, #20
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4812      	ldr	r0, [pc, #72]	; (8001bdc <HAL_I2C_MspInit+0x98>)
 8001b92:	f000 fbb5 	bl	8002300 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001b96:	4b12      	ldr	r3, [pc, #72]	; (8001be0 <HAL_I2C_MspInit+0x9c>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001ba2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba6:	f043 0302 	orr.w	r3, r3, #2
 8001baa:	627b      	str	r3, [r7, #36]	; 0x24
 8001bac:	4a0c      	ldr	r2, [pc, #48]	; (8001be0 <HAL_I2C_MspInit+0x9c>)
 8001bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb0:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bb2:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <HAL_I2C_MspInit+0x94>)
 8001bb4:	69db      	ldr	r3, [r3, #28]
 8001bb6:	4a08      	ldr	r2, [pc, #32]	; (8001bd8 <HAL_I2C_MspInit+0x94>)
 8001bb8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bbc:	61d3      	str	r3, [r2, #28]
 8001bbe:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <HAL_I2C_MspInit+0x94>)
 8001bc0:	69db      	ldr	r3, [r3, #28]
 8001bc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bc6:	60fb      	str	r3, [r7, #12]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001bca:	bf00      	nop
 8001bcc:	3728      	adds	r7, #40	; 0x28
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40005400 	.word	0x40005400
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	40010c00 	.word	0x40010c00
 8001be0:	40010000 	.word	0x40010000

08001be4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bf4:	d113      	bne.n	8001c1e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bf6:	4b0c      	ldr	r3, [pc, #48]	; (8001c28 <HAL_TIM_Base_MspInit+0x44>)
 8001bf8:	69db      	ldr	r3, [r3, #28]
 8001bfa:	4a0b      	ldr	r2, [pc, #44]	; (8001c28 <HAL_TIM_Base_MspInit+0x44>)
 8001bfc:	f043 0301 	orr.w	r3, r3, #1
 8001c00:	61d3      	str	r3, [r2, #28]
 8001c02:	4b09      	ldr	r3, [pc, #36]	; (8001c28 <HAL_TIM_Base_MspInit+0x44>)
 8001c04:	69db      	ldr	r3, [r3, #28]
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c0e:	2200      	movs	r2, #0
 8001c10:	2100      	movs	r1, #0
 8001c12:	201c      	movs	r0, #28
 8001c14:	f000 fb3d 	bl	8002292 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c18:	201c      	movs	r0, #28
 8001c1a:	f000 fb56 	bl	80022ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001c1e:	bf00      	nop
 8001c20:	3710      	adds	r7, #16
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40021000 	.word	0x40021000

08001c2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b088      	sub	sp, #32
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c34:	f107 0310 	add.w	r3, r7, #16
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	605a      	str	r2, [r3, #4]
 8001c3e:	609a      	str	r2, [r3, #8]
 8001c40:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a15      	ldr	r2, [pc, #84]	; (8001c9c <HAL_UART_MspInit+0x70>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d123      	bne.n	8001c94 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c4c:	4b14      	ldr	r3, [pc, #80]	; (8001ca0 <HAL_UART_MspInit+0x74>)
 8001c4e:	69db      	ldr	r3, [r3, #28]
 8001c50:	4a13      	ldr	r2, [pc, #76]	; (8001ca0 <HAL_UART_MspInit+0x74>)
 8001c52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c56:	61d3      	str	r3, [r2, #28]
 8001c58:	4b11      	ldr	r3, [pc, #68]	; (8001ca0 <HAL_UART_MspInit+0x74>)
 8001c5a:	69db      	ldr	r3, [r3, #28]
 8001c5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c60:	60fb      	str	r3, [r7, #12]
 8001c62:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c64:	4b0e      	ldr	r3, [pc, #56]	; (8001ca0 <HAL_UART_MspInit+0x74>)
 8001c66:	699b      	ldr	r3, [r3, #24]
 8001c68:	4a0d      	ldr	r2, [pc, #52]	; (8001ca0 <HAL_UART_MspInit+0x74>)
 8001c6a:	f043 0304 	orr.w	r3, r3, #4
 8001c6e:	6193      	str	r3, [r2, #24]
 8001c70:	4b0b      	ldr	r3, [pc, #44]	; (8001ca0 <HAL_UART_MspInit+0x74>)
 8001c72:	699b      	ldr	r3, [r3, #24]
 8001c74:	f003 0304 	and.w	r3, r3, #4
 8001c78:	60bb      	str	r3, [r7, #8]
 8001c7a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c7c:	230c      	movs	r3, #12
 8001c7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c80:	2302      	movs	r3, #2
 8001c82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c84:	2302      	movs	r3, #2
 8001c86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c88:	f107 0310 	add.w	r3, r7, #16
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4805      	ldr	r0, [pc, #20]	; (8001ca4 <HAL_UART_MspInit+0x78>)
 8001c90:	f000 fb36 	bl	8002300 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c94:	bf00      	nop
 8001c96:	3720      	adds	r7, #32
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40004400 	.word	0x40004400
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	40010800 	.word	0x40010800

08001ca8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cac:	e7fe      	b.n	8001cac <NMI_Handler+0x4>

08001cae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cb2:	e7fe      	b.n	8001cb2 <HardFault_Handler+0x4>

08001cb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cb8:	e7fe      	b.n	8001cb8 <MemManage_Handler+0x4>

08001cba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cbe:	e7fe      	b.n	8001cbe <BusFault_Handler+0x4>

08001cc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cc4:	e7fe      	b.n	8001cc4 <UsageFault_Handler+0x4>

08001cc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bc80      	pop	{r7}
 8001cd0:	4770      	bx	lr

08001cd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cd6:	bf00      	nop
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bc80      	pop	{r7}
 8001cdc:	4770      	bx	lr

08001cde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ce2:	bf00      	nop
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bc80      	pop	{r7}
 8001ce8:	4770      	bx	lr

08001cea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cee:	f000 f9b9 	bl	8002064 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cf2:	bf00      	nop
 8001cf4:	bd80      	pop	{r7, pc}
	...

08001cf8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001cfc:	4802      	ldr	r0, [pc, #8]	; (8001d08 <TIM2_IRQHandler+0x10>)
 8001cfe:	f001 fe39 	bl	8003974 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	20000180 	.word	0x20000180

08001d0c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001d10:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001d14:	f000 fcc0 	bl	8002698 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001d18:	bf00      	nop
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b086      	sub	sp, #24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d24:	4a14      	ldr	r2, [pc, #80]	; (8001d78 <_sbrk+0x5c>)
 8001d26:	4b15      	ldr	r3, [pc, #84]	; (8001d7c <_sbrk+0x60>)
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d30:	4b13      	ldr	r3, [pc, #76]	; (8001d80 <_sbrk+0x64>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d102      	bne.n	8001d3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d38:	4b11      	ldr	r3, [pc, #68]	; (8001d80 <_sbrk+0x64>)
 8001d3a:	4a12      	ldr	r2, [pc, #72]	; (8001d84 <_sbrk+0x68>)
 8001d3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d3e:	4b10      	ldr	r3, [pc, #64]	; (8001d80 <_sbrk+0x64>)
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4413      	add	r3, r2
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d207      	bcs.n	8001d5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d4c:	f002 fa40 	bl	80041d0 <__errno>
 8001d50:	4603      	mov	r3, r0
 8001d52:	220c      	movs	r2, #12
 8001d54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d56:	f04f 33ff 	mov.w	r3, #4294967295
 8001d5a:	e009      	b.n	8001d70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d5c:	4b08      	ldr	r3, [pc, #32]	; (8001d80 <_sbrk+0x64>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d62:	4b07      	ldr	r3, [pc, #28]	; (8001d80 <_sbrk+0x64>)
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4413      	add	r3, r2
 8001d6a:	4a05      	ldr	r2, [pc, #20]	; (8001d80 <_sbrk+0x64>)
 8001d6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3718      	adds	r7, #24
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	20005000 	.word	0x20005000
 8001d7c:	00000400 	.word	0x00000400
 8001d80:	200000f0 	.word	0x200000f0
 8001d84:	200002f0 	.word	0x200002f0

08001d88 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d8c:	bf00      	nop
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bc80      	pop	{r7}
 8001d92:	4770      	bx	lr

08001d94 <set_off0_off1>:
 */

#include <traffic_light.h>
#include <led7_segment.h>
// - ways
void set_off0_off1(){
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D9_LED0_GPIO_Port, D9_LED0_Pin, RESET);
 8001d98:	2200      	movs	r2, #0
 8001d9a:	2180      	movs	r1, #128	; 0x80
 8001d9c:	4809      	ldr	r0, [pc, #36]	; (8001dc4 <set_off0_off1+0x30>)
 8001d9e:	f000 fc4a 	bl	8002636 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D10_LED1_GPIO_Port, D10_LED1_Pin, RESET);
 8001da2:	2200      	movs	r2, #0
 8001da4:	2140      	movs	r1, #64	; 0x40
 8001da6:	4808      	ldr	r0, [pc, #32]	; (8001dc8 <set_off0_off1+0x34>)
 8001da8:	f000 fc45 	bl	8002636 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_LED0_GPIO_Port, D3_LED0_Pin, RESET);
 8001dac:	2200      	movs	r2, #0
 8001dae:	2108      	movs	r1, #8
 8001db0:	4805      	ldr	r0, [pc, #20]	; (8001dc8 <set_off0_off1+0x34>)
 8001db2:	f000 fc40 	bl	8002636 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_LED1_GPIO_Port, D4_LED1_Pin, RESET);
 8001db6:	2200      	movs	r2, #0
 8001db8:	2120      	movs	r1, #32
 8001dba:	4803      	ldr	r0, [pc, #12]	; (8001dc8 <set_off0_off1+0x34>)
 8001dbc:	f000 fc3b 	bl	8002636 <HAL_GPIO_WritePin>
}
 8001dc0:	bf00      	nop
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	40011000 	.word	0x40011000
 8001dc8:	40010c00 	.word	0x40010c00

08001dcc <set_red0_green1>:

void set_red0_green1(){
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D10_LED1_GPIO_Port, D10_LED1_Pin, SET);
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	2140      	movs	r1, #64	; 0x40
 8001dd4:	4809      	ldr	r0, [pc, #36]	; (8001dfc <set_red0_green1+0x30>)
 8001dd6:	f000 fc2e 	bl	8002636 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D9_LED0_GPIO_Port, D9_LED0_Pin, SET);
 8001dda:	2201      	movs	r2, #1
 8001ddc:	2180      	movs	r1, #128	; 0x80
 8001dde:	4808      	ldr	r0, [pc, #32]	; (8001e00 <set_red0_green1+0x34>)
 8001de0:	f000 fc29 	bl	8002636 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_LED1_GPIO_Port, D4_LED1_Pin, RESET);
 8001de4:	2200      	movs	r2, #0
 8001de6:	2120      	movs	r1, #32
 8001de8:	4804      	ldr	r0, [pc, #16]	; (8001dfc <set_red0_green1+0x30>)
 8001dea:	f000 fc24 	bl	8002636 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_LED0_GPIO_Port, D3_LED0_Pin, SET);
 8001dee:	2201      	movs	r2, #1
 8001df0:	2108      	movs	r1, #8
 8001df2:	4802      	ldr	r0, [pc, #8]	; (8001dfc <set_red0_green1+0x30>)
 8001df4:	f000 fc1f 	bl	8002636 <HAL_GPIO_WritePin>

}
 8001df8:	bf00      	nop
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	40010c00 	.word	0x40010c00
 8001e00:	40011000 	.word	0x40011000

08001e04 <set_red0_amber1>:
void set_red0_amber1() {
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D10_LED1_GPIO_Port, D10_LED1_Pin, SET);
 8001e08:	2201      	movs	r2, #1
 8001e0a:	2140      	movs	r1, #64	; 0x40
 8001e0c:	4809      	ldr	r0, [pc, #36]	; (8001e34 <set_red0_amber1+0x30>)
 8001e0e:	f000 fc12 	bl	8002636 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D9_LED0_GPIO_Port, D9_LED0_Pin, SET);
 8001e12:	2201      	movs	r2, #1
 8001e14:	2180      	movs	r1, #128	; 0x80
 8001e16:	4808      	ldr	r0, [pc, #32]	; (8001e38 <set_red0_amber1+0x34>)
 8001e18:	f000 fc0d 	bl	8002636 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_LED1_GPIO_Port, D4_LED1_Pin, SET);
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	2120      	movs	r1, #32
 8001e20:	4804      	ldr	r0, [pc, #16]	; (8001e34 <set_red0_amber1+0x30>)
 8001e22:	f000 fc08 	bl	8002636 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_LED0_GPIO_Port, D3_LED0_Pin, RESET);
 8001e26:	2200      	movs	r2, #0
 8001e28:	2108      	movs	r1, #8
 8001e2a:	4802      	ldr	r0, [pc, #8]	; (8001e34 <set_red0_amber1+0x30>)
 8001e2c:	f000 fc03 	bl	8002636 <HAL_GPIO_WritePin>
}
 8001e30:	bf00      	nop
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	40010c00 	.word	0x40010c00
 8001e38:	40011000 	.word	0x40011000

08001e3c <set_green0_red1>:
void set_green0_red1() {
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D10_LED1_GPIO_Port, D10_LED1_Pin, RESET);
 8001e40:	2200      	movs	r2, #0
 8001e42:	2140      	movs	r1, #64	; 0x40
 8001e44:	4809      	ldr	r0, [pc, #36]	; (8001e6c <set_green0_red1+0x30>)
 8001e46:	f000 fbf6 	bl	8002636 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D9_LED0_GPIO_Port, D9_LED0_Pin, SET);
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	2180      	movs	r1, #128	; 0x80
 8001e4e:	4808      	ldr	r0, [pc, #32]	; (8001e70 <set_green0_red1+0x34>)
 8001e50:	f000 fbf1 	bl	8002636 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_LED1_GPIO_Port, D4_LED1_Pin, SET);
 8001e54:	2201      	movs	r2, #1
 8001e56:	2120      	movs	r1, #32
 8001e58:	4804      	ldr	r0, [pc, #16]	; (8001e6c <set_green0_red1+0x30>)
 8001e5a:	f000 fbec 	bl	8002636 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_LED0_GPIO_Port, D3_LED0_Pin, SET);
 8001e5e:	2201      	movs	r2, #1
 8001e60:	2108      	movs	r1, #8
 8001e62:	4802      	ldr	r0, [pc, #8]	; (8001e6c <set_green0_red1+0x30>)
 8001e64:	f000 fbe7 	bl	8002636 <HAL_GPIO_WritePin>
}
 8001e68:	bf00      	nop
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	40010c00 	.word	0x40010c00
 8001e70:	40011000 	.word	0x40011000

08001e74 <set_amber0_red1>:
void set_amber0_red1()
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D10_LED1_GPIO_Port, D10_LED1_Pin, SET);
 8001e78:	2201      	movs	r2, #1
 8001e7a:	2140      	movs	r1, #64	; 0x40
 8001e7c:	4809      	ldr	r0, [pc, #36]	; (8001ea4 <set_amber0_red1+0x30>)
 8001e7e:	f000 fbda 	bl	8002636 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D9_LED0_GPIO_Port, D9_LED0_Pin, RESET);
 8001e82:	2200      	movs	r2, #0
 8001e84:	2180      	movs	r1, #128	; 0x80
 8001e86:	4808      	ldr	r0, [pc, #32]	; (8001ea8 <set_amber0_red1+0x34>)
 8001e88:	f000 fbd5 	bl	8002636 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_LED1_GPIO_Port, D4_LED1_Pin, SET);
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	2120      	movs	r1, #32
 8001e90:	4804      	ldr	r0, [pc, #16]	; (8001ea4 <set_amber0_red1+0x30>)
 8001e92:	f000 fbd0 	bl	8002636 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_LED0_GPIO_Port, D3_LED0_Pin, SET);
 8001e96:	2201      	movs	r2, #1
 8001e98:	2108      	movs	r1, #8
 8001e9a:	4802      	ldr	r0, [pc, #8]	; (8001ea4 <set_amber0_red1+0x30>)
 8001e9c:	f000 fbcb 	bl	8002636 <HAL_GPIO_WritePin>
}
 8001ea0:	bf00      	nop
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	40010c00 	.word	0x40010c00
 8001ea8:	40011000 	.word	0x40011000

08001eac <setallRed>:

void setallRed() {
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D10_LED1_GPIO_Port, D10_LED1_Pin, SET);
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	2140      	movs	r1, #64	; 0x40
 8001eb4:	4809      	ldr	r0, [pc, #36]	; (8001edc <setallRed+0x30>)
 8001eb6:	f000 fbbe 	bl	8002636 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D9_LED0_GPIO_Port, D9_LED0_Pin, SET);
 8001eba:	2201      	movs	r2, #1
 8001ebc:	2180      	movs	r1, #128	; 0x80
 8001ebe:	4808      	ldr	r0, [pc, #32]	; (8001ee0 <setallRed+0x34>)
 8001ec0:	f000 fbb9 	bl	8002636 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_LED1_GPIO_Port, D4_LED1_Pin, SET);
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	2120      	movs	r1, #32
 8001ec8:	4804      	ldr	r0, [pc, #16]	; (8001edc <setallRed+0x30>)
 8001eca:	f000 fbb4 	bl	8002636 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_LED0_GPIO_Port, D3_LED0_Pin, SET);
 8001ece:	2201      	movs	r2, #1
 8001ed0:	2108      	movs	r1, #8
 8001ed2:	4802      	ldr	r0, [pc, #8]	; (8001edc <setallRed+0x30>)
 8001ed4:	f000 fbaf 	bl	8002636 <HAL_GPIO_WritePin>
}
 8001ed8:	bf00      	nop
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	40010c00 	.word	0x40010c00
 8001ee0:	40011000 	.word	0x40011000

08001ee4 <setallGreen>:
void setallGreen() {
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D10_LED1_GPIO_Port, D10_LED1_Pin, RESET);
 8001ee8:	2200      	movs	r2, #0
 8001eea:	2140      	movs	r1, #64	; 0x40
 8001eec:	4809      	ldr	r0, [pc, #36]	; (8001f14 <setallGreen+0x30>)
 8001eee:	f000 fba2 	bl	8002636 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D9_LED0_GPIO_Port, D9_LED0_Pin, SET);
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	2180      	movs	r1, #128	; 0x80
 8001ef6:	4808      	ldr	r0, [pc, #32]	; (8001f18 <setallGreen+0x34>)
 8001ef8:	f000 fb9d 	bl	8002636 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_LED1_GPIO_Port, D4_LED1_Pin, RESET);
 8001efc:	2200      	movs	r2, #0
 8001efe:	2120      	movs	r1, #32
 8001f00:	4804      	ldr	r0, [pc, #16]	; (8001f14 <setallGreen+0x30>)
 8001f02:	f000 fb98 	bl	8002636 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_LED0_GPIO_Port, D3_LED0_Pin, SET);
 8001f06:	2201      	movs	r2, #1
 8001f08:	2108      	movs	r1, #8
 8001f0a:	4802      	ldr	r0, [pc, #8]	; (8001f14 <setallGreen+0x30>)
 8001f0c:	f000 fb93 	bl	8002636 <HAL_GPIO_WritePin>
}
 8001f10:	bf00      	nop
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	40010c00 	.word	0x40010c00
 8001f18:	40011000 	.word	0x40011000

08001f1c <setallAmber>:
void setallAmber() {
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D10_LED1_GPIO_Port, D10_LED1_Pin, SET);
 8001f20:	2201      	movs	r2, #1
 8001f22:	2140      	movs	r1, #64	; 0x40
 8001f24:	4809      	ldr	r0, [pc, #36]	; (8001f4c <setallAmber+0x30>)
 8001f26:	f000 fb86 	bl	8002636 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D9_LED0_GPIO_Port, D9_LED0_Pin, RESET);
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	2180      	movs	r1, #128	; 0x80
 8001f2e:	4808      	ldr	r0, [pc, #32]	; (8001f50 <setallAmber+0x34>)
 8001f30:	f000 fb81 	bl	8002636 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_LED1_GPIO_Port, D4_LED1_Pin, SET);
 8001f34:	2201      	movs	r2, #1
 8001f36:	2120      	movs	r1, #32
 8001f38:	4804      	ldr	r0, [pc, #16]	; (8001f4c <setallAmber+0x30>)
 8001f3a:	f000 fb7c 	bl	8002636 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_LED0_GPIO_Port, D3_LED0_Pin, RESET);
 8001f3e:	2200      	movs	r2, #0
 8001f40:	2108      	movs	r1, #8
 8001f42:	4802      	ldr	r0, [pc, #8]	; (8001f4c <setallAmber+0x30>)
 8001f44:	f000 fb77 	bl	8002636 <HAL_GPIO_WritePin>
}
 8001f48:	bf00      	nop
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	40010c00 	.word	0x40010c00
 8001f50:	40011000 	.word	0x40011000

08001f54 <setallOff>:
void setallOff() {
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(D9_LED0_GPIO_Port, D9_LED0_Pin, RESET);
 8001f58:	2200      	movs	r2, #0
 8001f5a:	2180      	movs	r1, #128	; 0x80
 8001f5c:	4809      	ldr	r0, [pc, #36]	; (8001f84 <setallOff+0x30>)
 8001f5e:	f000 fb6a 	bl	8002636 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D10_LED1_GPIO_Port, D10_LED1_Pin, RESET);
 8001f62:	2200      	movs	r2, #0
 8001f64:	2140      	movs	r1, #64	; 0x40
 8001f66:	4808      	ldr	r0, [pc, #32]	; (8001f88 <setallOff+0x34>)
 8001f68:	f000 fb65 	bl	8002636 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D3_LED0_GPIO_Port, D3_LED0_Pin, RESET);
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	2108      	movs	r1, #8
 8001f70:	4805      	ldr	r0, [pc, #20]	; (8001f88 <setallOff+0x34>)
 8001f72:	f000 fb60 	bl	8002636 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(D4_LED1_GPIO_Port, D4_LED1_Pin, RESET);
 8001f76:	2200      	movs	r2, #0
 8001f78:	2120      	movs	r1, #32
 8001f7a:	4803      	ldr	r0, [pc, #12]	; (8001f88 <setallOff+0x34>)
 8001f7c:	f000 fb5b 	bl	8002636 <HAL_GPIO_WritePin>
}
 8001f80:	bf00      	nop
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	40011000 	.word	0x40011000
 8001f88:	40010c00 	.word	0x40010c00

08001f8c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f8c:	f7ff fefc 	bl	8001d88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f90:	480b      	ldr	r0, [pc, #44]	; (8001fc0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001f92:	490c      	ldr	r1, [pc, #48]	; (8001fc4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001f94:	4a0c      	ldr	r2, [pc, #48]	; (8001fc8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001f96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f98:	e002      	b.n	8001fa0 <LoopCopyDataInit>

08001f9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f9e:	3304      	adds	r3, #4

08001fa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fa4:	d3f9      	bcc.n	8001f9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fa6:	4a09      	ldr	r2, [pc, #36]	; (8001fcc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001fa8:	4c09      	ldr	r4, [pc, #36]	; (8001fd0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001faa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fac:	e001      	b.n	8001fb2 <LoopFillZerobss>

08001fae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fb0:	3204      	adds	r2, #4

08001fb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fb4:	d3fb      	bcc.n	8001fae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fb6:	f002 f911 	bl	80041dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001fba:	f7ff fa0b 	bl	80013d4 <main>
  bx lr
 8001fbe:	4770      	bx	lr
  ldr r0, =_sdata
 8001fc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fc4:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 8001fc8:	08004c40 	.word	0x08004c40
  ldr r2, =_sbss
 8001fcc:	200000c4 	.word	0x200000c4
  ldr r4, =_ebss
 8001fd0:	200002ec 	.word	0x200002ec

08001fd4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001fd4:	e7fe      	b.n	8001fd4 <ADC1_2_IRQHandler>
	...

08001fd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fdc:	4b08      	ldr	r3, [pc, #32]	; (8002000 <HAL_Init+0x28>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a07      	ldr	r2, [pc, #28]	; (8002000 <HAL_Init+0x28>)
 8001fe2:	f043 0310 	orr.w	r3, r3, #16
 8001fe6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fe8:	2003      	movs	r0, #3
 8001fea:	f000 f947 	bl	800227c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fee:	2000      	movs	r0, #0
 8001ff0:	f000 f808 	bl	8002004 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ff4:	f7ff fd74 	bl	8001ae0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	40022000 	.word	0x40022000

08002004 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800200c:	4b12      	ldr	r3, [pc, #72]	; (8002058 <HAL_InitTick+0x54>)
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	4b12      	ldr	r3, [pc, #72]	; (800205c <HAL_InitTick+0x58>)
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	4619      	mov	r1, r3
 8002016:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800201a:	fbb3 f3f1 	udiv	r3, r3, r1
 800201e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002022:	4618      	mov	r0, r3
 8002024:	f000 f95f 	bl	80022e6 <HAL_SYSTICK_Config>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e00e      	b.n	8002050 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2b0f      	cmp	r3, #15
 8002036:	d80a      	bhi.n	800204e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002038:	2200      	movs	r2, #0
 800203a:	6879      	ldr	r1, [r7, #4]
 800203c:	f04f 30ff 	mov.w	r0, #4294967295
 8002040:	f000 f927 	bl	8002292 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002044:	4a06      	ldr	r2, [pc, #24]	; (8002060 <HAL_InitTick+0x5c>)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800204a:	2300      	movs	r3, #0
 800204c:	e000      	b.n	8002050 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
}
 8002050:	4618      	mov	r0, r3
 8002052:	3708      	adds	r7, #8
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	20000054 	.word	0x20000054
 800205c:	2000005c 	.word	0x2000005c
 8002060:	20000058 	.word	0x20000058

08002064 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002068:	4b05      	ldr	r3, [pc, #20]	; (8002080 <HAL_IncTick+0x1c>)
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	461a      	mov	r2, r3
 800206e:	4b05      	ldr	r3, [pc, #20]	; (8002084 <HAL_IncTick+0x20>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4413      	add	r3, r2
 8002074:	4a03      	ldr	r2, [pc, #12]	; (8002084 <HAL_IncTick+0x20>)
 8002076:	6013      	str	r3, [r2, #0]
}
 8002078:	bf00      	nop
 800207a:	46bd      	mov	sp, r7
 800207c:	bc80      	pop	{r7}
 800207e:	4770      	bx	lr
 8002080:	2000005c 	.word	0x2000005c
 8002084:	200002d8 	.word	0x200002d8

08002088 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  return uwTick;
 800208c:	4b02      	ldr	r3, [pc, #8]	; (8002098 <HAL_GetTick+0x10>)
 800208e:	681b      	ldr	r3, [r3, #0]
}
 8002090:	4618      	mov	r0, r3
 8002092:	46bd      	mov	sp, r7
 8002094:	bc80      	pop	{r7}
 8002096:	4770      	bx	lr
 8002098:	200002d8 	.word	0x200002d8

0800209c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020a4:	f7ff fff0 	bl	8002088 <HAL_GetTick>
 80020a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020b4:	d005      	beq.n	80020c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020b6:	4b0a      	ldr	r3, [pc, #40]	; (80020e0 <HAL_Delay+0x44>)
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	461a      	mov	r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	4413      	add	r3, r2
 80020c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020c2:	bf00      	nop
 80020c4:	f7ff ffe0 	bl	8002088 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	68fa      	ldr	r2, [r7, #12]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d8f7      	bhi.n	80020c4 <HAL_Delay+0x28>
  {
  }
}
 80020d4:	bf00      	nop
 80020d6:	bf00      	nop
 80020d8:	3710      	adds	r7, #16
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	2000005c 	.word	0x2000005c

080020e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b085      	sub	sp, #20
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f003 0307 	and.w	r3, r3, #7
 80020f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020f4:	4b0c      	ldr	r3, [pc, #48]	; (8002128 <__NVIC_SetPriorityGrouping+0x44>)
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020fa:	68ba      	ldr	r2, [r7, #8]
 80020fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002100:	4013      	ands	r3, r2
 8002102:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800210c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002110:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002114:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002116:	4a04      	ldr	r2, [pc, #16]	; (8002128 <__NVIC_SetPriorityGrouping+0x44>)
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	60d3      	str	r3, [r2, #12]
}
 800211c:	bf00      	nop
 800211e:	3714      	adds	r7, #20
 8002120:	46bd      	mov	sp, r7
 8002122:	bc80      	pop	{r7}
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	e000ed00 	.word	0xe000ed00

0800212c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002130:	4b04      	ldr	r3, [pc, #16]	; (8002144 <__NVIC_GetPriorityGrouping+0x18>)
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	0a1b      	lsrs	r3, r3, #8
 8002136:	f003 0307 	and.w	r3, r3, #7
}
 800213a:	4618      	mov	r0, r3
 800213c:	46bd      	mov	sp, r7
 800213e:	bc80      	pop	{r7}
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	e000ed00 	.word	0xe000ed00

08002148 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	4603      	mov	r3, r0
 8002150:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002156:	2b00      	cmp	r3, #0
 8002158:	db0b      	blt.n	8002172 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800215a:	79fb      	ldrb	r3, [r7, #7]
 800215c:	f003 021f 	and.w	r2, r3, #31
 8002160:	4906      	ldr	r1, [pc, #24]	; (800217c <__NVIC_EnableIRQ+0x34>)
 8002162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002166:	095b      	lsrs	r3, r3, #5
 8002168:	2001      	movs	r0, #1
 800216a:	fa00 f202 	lsl.w	r2, r0, r2
 800216e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002172:	bf00      	nop
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	bc80      	pop	{r7}
 800217a:	4770      	bx	lr
 800217c:	e000e100 	.word	0xe000e100

08002180 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	4603      	mov	r3, r0
 8002188:	6039      	str	r1, [r7, #0]
 800218a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800218c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002190:	2b00      	cmp	r3, #0
 8002192:	db0a      	blt.n	80021aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	b2da      	uxtb	r2, r3
 8002198:	490c      	ldr	r1, [pc, #48]	; (80021cc <__NVIC_SetPriority+0x4c>)
 800219a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800219e:	0112      	lsls	r2, r2, #4
 80021a0:	b2d2      	uxtb	r2, r2
 80021a2:	440b      	add	r3, r1
 80021a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021a8:	e00a      	b.n	80021c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	b2da      	uxtb	r2, r3
 80021ae:	4908      	ldr	r1, [pc, #32]	; (80021d0 <__NVIC_SetPriority+0x50>)
 80021b0:	79fb      	ldrb	r3, [r7, #7]
 80021b2:	f003 030f 	and.w	r3, r3, #15
 80021b6:	3b04      	subs	r3, #4
 80021b8:	0112      	lsls	r2, r2, #4
 80021ba:	b2d2      	uxtb	r2, r2
 80021bc:	440b      	add	r3, r1
 80021be:	761a      	strb	r2, [r3, #24]
}
 80021c0:	bf00      	nop
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bc80      	pop	{r7}
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	e000e100 	.word	0xe000e100
 80021d0:	e000ed00 	.word	0xe000ed00

080021d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b089      	sub	sp, #36	; 0x24
 80021d8:	af00      	add	r7, sp, #0
 80021da:	60f8      	str	r0, [r7, #12]
 80021dc:	60b9      	str	r1, [r7, #8]
 80021de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	f003 0307 	and.w	r3, r3, #7
 80021e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	f1c3 0307 	rsb	r3, r3, #7
 80021ee:	2b04      	cmp	r3, #4
 80021f0:	bf28      	it	cs
 80021f2:	2304      	movcs	r3, #4
 80021f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	3304      	adds	r3, #4
 80021fa:	2b06      	cmp	r3, #6
 80021fc:	d902      	bls.n	8002204 <NVIC_EncodePriority+0x30>
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	3b03      	subs	r3, #3
 8002202:	e000      	b.n	8002206 <NVIC_EncodePriority+0x32>
 8002204:	2300      	movs	r3, #0
 8002206:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002208:	f04f 32ff 	mov.w	r2, #4294967295
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	fa02 f303 	lsl.w	r3, r2, r3
 8002212:	43da      	mvns	r2, r3
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	401a      	ands	r2, r3
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800221c:	f04f 31ff 	mov.w	r1, #4294967295
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	fa01 f303 	lsl.w	r3, r1, r3
 8002226:	43d9      	mvns	r1, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800222c:	4313      	orrs	r3, r2
         );
}
 800222e:	4618      	mov	r0, r3
 8002230:	3724      	adds	r7, #36	; 0x24
 8002232:	46bd      	mov	sp, r7
 8002234:	bc80      	pop	{r7}
 8002236:	4770      	bx	lr

08002238 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	3b01      	subs	r3, #1
 8002244:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002248:	d301      	bcc.n	800224e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800224a:	2301      	movs	r3, #1
 800224c:	e00f      	b.n	800226e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800224e:	4a0a      	ldr	r2, [pc, #40]	; (8002278 <SysTick_Config+0x40>)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	3b01      	subs	r3, #1
 8002254:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002256:	210f      	movs	r1, #15
 8002258:	f04f 30ff 	mov.w	r0, #4294967295
 800225c:	f7ff ff90 	bl	8002180 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002260:	4b05      	ldr	r3, [pc, #20]	; (8002278 <SysTick_Config+0x40>)
 8002262:	2200      	movs	r2, #0
 8002264:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002266:	4b04      	ldr	r3, [pc, #16]	; (8002278 <SysTick_Config+0x40>)
 8002268:	2207      	movs	r2, #7
 800226a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	e000e010 	.word	0xe000e010

0800227c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f7ff ff2d 	bl	80020e4 <__NVIC_SetPriorityGrouping>
}
 800228a:	bf00      	nop
 800228c:	3708      	adds	r7, #8
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}

08002292 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002292:	b580      	push	{r7, lr}
 8002294:	b086      	sub	sp, #24
 8002296:	af00      	add	r7, sp, #0
 8002298:	4603      	mov	r3, r0
 800229a:	60b9      	str	r1, [r7, #8]
 800229c:	607a      	str	r2, [r7, #4]
 800229e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022a0:	2300      	movs	r3, #0
 80022a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022a4:	f7ff ff42 	bl	800212c <__NVIC_GetPriorityGrouping>
 80022a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	68b9      	ldr	r1, [r7, #8]
 80022ae:	6978      	ldr	r0, [r7, #20]
 80022b0:	f7ff ff90 	bl	80021d4 <NVIC_EncodePriority>
 80022b4:	4602      	mov	r2, r0
 80022b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ba:	4611      	mov	r1, r2
 80022bc:	4618      	mov	r0, r3
 80022be:	f7ff ff5f 	bl	8002180 <__NVIC_SetPriority>
}
 80022c2:	bf00      	nop
 80022c4:	3718      	adds	r7, #24
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b082      	sub	sp, #8
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	4603      	mov	r3, r0
 80022d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d8:	4618      	mov	r0, r3
 80022da:	f7ff ff35 	bl	8002148 <__NVIC_EnableIRQ>
}
 80022de:	bf00      	nop
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b082      	sub	sp, #8
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f7ff ffa2 	bl	8002238 <SysTick_Config>
 80022f4:	4603      	mov	r3, r0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
	...

08002300 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002300:	b480      	push	{r7}
 8002302:	b08b      	sub	sp, #44	; 0x2c
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800230a:	2300      	movs	r3, #0
 800230c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800230e:	2300      	movs	r3, #0
 8002310:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002312:	e169      	b.n	80025e8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002314:	2201      	movs	r2, #1
 8002316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	69fa      	ldr	r2, [r7, #28]
 8002324:	4013      	ands	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	429a      	cmp	r2, r3
 800232e:	f040 8158 	bne.w	80025e2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	4a9a      	ldr	r2, [pc, #616]	; (80025a0 <HAL_GPIO_Init+0x2a0>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d05e      	beq.n	80023fa <HAL_GPIO_Init+0xfa>
 800233c:	4a98      	ldr	r2, [pc, #608]	; (80025a0 <HAL_GPIO_Init+0x2a0>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d875      	bhi.n	800242e <HAL_GPIO_Init+0x12e>
 8002342:	4a98      	ldr	r2, [pc, #608]	; (80025a4 <HAL_GPIO_Init+0x2a4>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d058      	beq.n	80023fa <HAL_GPIO_Init+0xfa>
 8002348:	4a96      	ldr	r2, [pc, #600]	; (80025a4 <HAL_GPIO_Init+0x2a4>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d86f      	bhi.n	800242e <HAL_GPIO_Init+0x12e>
 800234e:	4a96      	ldr	r2, [pc, #600]	; (80025a8 <HAL_GPIO_Init+0x2a8>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d052      	beq.n	80023fa <HAL_GPIO_Init+0xfa>
 8002354:	4a94      	ldr	r2, [pc, #592]	; (80025a8 <HAL_GPIO_Init+0x2a8>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d869      	bhi.n	800242e <HAL_GPIO_Init+0x12e>
 800235a:	4a94      	ldr	r2, [pc, #592]	; (80025ac <HAL_GPIO_Init+0x2ac>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d04c      	beq.n	80023fa <HAL_GPIO_Init+0xfa>
 8002360:	4a92      	ldr	r2, [pc, #584]	; (80025ac <HAL_GPIO_Init+0x2ac>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d863      	bhi.n	800242e <HAL_GPIO_Init+0x12e>
 8002366:	4a92      	ldr	r2, [pc, #584]	; (80025b0 <HAL_GPIO_Init+0x2b0>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d046      	beq.n	80023fa <HAL_GPIO_Init+0xfa>
 800236c:	4a90      	ldr	r2, [pc, #576]	; (80025b0 <HAL_GPIO_Init+0x2b0>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d85d      	bhi.n	800242e <HAL_GPIO_Init+0x12e>
 8002372:	2b12      	cmp	r3, #18
 8002374:	d82a      	bhi.n	80023cc <HAL_GPIO_Init+0xcc>
 8002376:	2b12      	cmp	r3, #18
 8002378:	d859      	bhi.n	800242e <HAL_GPIO_Init+0x12e>
 800237a:	a201      	add	r2, pc, #4	; (adr r2, 8002380 <HAL_GPIO_Init+0x80>)
 800237c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002380:	080023fb 	.word	0x080023fb
 8002384:	080023d5 	.word	0x080023d5
 8002388:	080023e7 	.word	0x080023e7
 800238c:	08002429 	.word	0x08002429
 8002390:	0800242f 	.word	0x0800242f
 8002394:	0800242f 	.word	0x0800242f
 8002398:	0800242f 	.word	0x0800242f
 800239c:	0800242f 	.word	0x0800242f
 80023a0:	0800242f 	.word	0x0800242f
 80023a4:	0800242f 	.word	0x0800242f
 80023a8:	0800242f 	.word	0x0800242f
 80023ac:	0800242f 	.word	0x0800242f
 80023b0:	0800242f 	.word	0x0800242f
 80023b4:	0800242f 	.word	0x0800242f
 80023b8:	0800242f 	.word	0x0800242f
 80023bc:	0800242f 	.word	0x0800242f
 80023c0:	0800242f 	.word	0x0800242f
 80023c4:	080023dd 	.word	0x080023dd
 80023c8:	080023f1 	.word	0x080023f1
 80023cc:	4a79      	ldr	r2, [pc, #484]	; (80025b4 <HAL_GPIO_Init+0x2b4>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d013      	beq.n	80023fa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80023d2:	e02c      	b.n	800242e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	623b      	str	r3, [r7, #32]
          break;
 80023da:	e029      	b.n	8002430 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	3304      	adds	r3, #4
 80023e2:	623b      	str	r3, [r7, #32]
          break;
 80023e4:	e024      	b.n	8002430 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	3308      	adds	r3, #8
 80023ec:	623b      	str	r3, [r7, #32]
          break;
 80023ee:	e01f      	b.n	8002430 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	330c      	adds	r3, #12
 80023f6:	623b      	str	r3, [r7, #32]
          break;
 80023f8:	e01a      	b.n	8002430 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d102      	bne.n	8002408 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002402:	2304      	movs	r3, #4
 8002404:	623b      	str	r3, [r7, #32]
          break;
 8002406:	e013      	b.n	8002430 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	2b01      	cmp	r3, #1
 800240e:	d105      	bne.n	800241c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002410:	2308      	movs	r3, #8
 8002412:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	69fa      	ldr	r2, [r7, #28]
 8002418:	611a      	str	r2, [r3, #16]
          break;
 800241a:	e009      	b.n	8002430 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800241c:	2308      	movs	r3, #8
 800241e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	69fa      	ldr	r2, [r7, #28]
 8002424:	615a      	str	r2, [r3, #20]
          break;
 8002426:	e003      	b.n	8002430 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002428:	2300      	movs	r3, #0
 800242a:	623b      	str	r3, [r7, #32]
          break;
 800242c:	e000      	b.n	8002430 <HAL_GPIO_Init+0x130>
          break;
 800242e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	2bff      	cmp	r3, #255	; 0xff
 8002434:	d801      	bhi.n	800243a <HAL_GPIO_Init+0x13a>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	e001      	b.n	800243e <HAL_GPIO_Init+0x13e>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	3304      	adds	r3, #4
 800243e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	2bff      	cmp	r3, #255	; 0xff
 8002444:	d802      	bhi.n	800244c <HAL_GPIO_Init+0x14c>
 8002446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	e002      	b.n	8002452 <HAL_GPIO_Init+0x152>
 800244c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244e:	3b08      	subs	r3, #8
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	210f      	movs	r1, #15
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	fa01 f303 	lsl.w	r3, r1, r3
 8002460:	43db      	mvns	r3, r3
 8002462:	401a      	ands	r2, r3
 8002464:	6a39      	ldr	r1, [r7, #32]
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	fa01 f303 	lsl.w	r3, r1, r3
 800246c:	431a      	orrs	r2, r3
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800247a:	2b00      	cmp	r3, #0
 800247c:	f000 80b1 	beq.w	80025e2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002480:	4b4d      	ldr	r3, [pc, #308]	; (80025b8 <HAL_GPIO_Init+0x2b8>)
 8002482:	699b      	ldr	r3, [r3, #24]
 8002484:	4a4c      	ldr	r2, [pc, #304]	; (80025b8 <HAL_GPIO_Init+0x2b8>)
 8002486:	f043 0301 	orr.w	r3, r3, #1
 800248a:	6193      	str	r3, [r2, #24]
 800248c:	4b4a      	ldr	r3, [pc, #296]	; (80025b8 <HAL_GPIO_Init+0x2b8>)
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	f003 0301 	and.w	r3, r3, #1
 8002494:	60bb      	str	r3, [r7, #8]
 8002496:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002498:	4a48      	ldr	r2, [pc, #288]	; (80025bc <HAL_GPIO_Init+0x2bc>)
 800249a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249c:	089b      	lsrs	r3, r3, #2
 800249e:	3302      	adds	r3, #2
 80024a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024a4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80024a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a8:	f003 0303 	and.w	r3, r3, #3
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	220f      	movs	r2, #15
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	43db      	mvns	r3, r3
 80024b6:	68fa      	ldr	r2, [r7, #12]
 80024b8:	4013      	ands	r3, r2
 80024ba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	4a40      	ldr	r2, [pc, #256]	; (80025c0 <HAL_GPIO_Init+0x2c0>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d013      	beq.n	80024ec <HAL_GPIO_Init+0x1ec>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4a3f      	ldr	r2, [pc, #252]	; (80025c4 <HAL_GPIO_Init+0x2c4>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d00d      	beq.n	80024e8 <HAL_GPIO_Init+0x1e8>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4a3e      	ldr	r2, [pc, #248]	; (80025c8 <HAL_GPIO_Init+0x2c8>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d007      	beq.n	80024e4 <HAL_GPIO_Init+0x1e4>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	4a3d      	ldr	r2, [pc, #244]	; (80025cc <HAL_GPIO_Init+0x2cc>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d101      	bne.n	80024e0 <HAL_GPIO_Init+0x1e0>
 80024dc:	2303      	movs	r3, #3
 80024de:	e006      	b.n	80024ee <HAL_GPIO_Init+0x1ee>
 80024e0:	2304      	movs	r3, #4
 80024e2:	e004      	b.n	80024ee <HAL_GPIO_Init+0x1ee>
 80024e4:	2302      	movs	r3, #2
 80024e6:	e002      	b.n	80024ee <HAL_GPIO_Init+0x1ee>
 80024e8:	2301      	movs	r3, #1
 80024ea:	e000      	b.n	80024ee <HAL_GPIO_Init+0x1ee>
 80024ec:	2300      	movs	r3, #0
 80024ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024f0:	f002 0203 	and.w	r2, r2, #3
 80024f4:	0092      	lsls	r2, r2, #2
 80024f6:	4093      	lsls	r3, r2
 80024f8:	68fa      	ldr	r2, [r7, #12]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80024fe:	492f      	ldr	r1, [pc, #188]	; (80025bc <HAL_GPIO_Init+0x2bc>)
 8002500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002502:	089b      	lsrs	r3, r3, #2
 8002504:	3302      	adds	r3, #2
 8002506:	68fa      	ldr	r2, [r7, #12]
 8002508:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d006      	beq.n	8002526 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002518:	4b2d      	ldr	r3, [pc, #180]	; (80025d0 <HAL_GPIO_Init+0x2d0>)
 800251a:	689a      	ldr	r2, [r3, #8]
 800251c:	492c      	ldr	r1, [pc, #176]	; (80025d0 <HAL_GPIO_Init+0x2d0>)
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	4313      	orrs	r3, r2
 8002522:	608b      	str	r3, [r1, #8]
 8002524:	e006      	b.n	8002534 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002526:	4b2a      	ldr	r3, [pc, #168]	; (80025d0 <HAL_GPIO_Init+0x2d0>)
 8002528:	689a      	ldr	r2, [r3, #8]
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	43db      	mvns	r3, r3
 800252e:	4928      	ldr	r1, [pc, #160]	; (80025d0 <HAL_GPIO_Init+0x2d0>)
 8002530:	4013      	ands	r3, r2
 8002532:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d006      	beq.n	800254e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002540:	4b23      	ldr	r3, [pc, #140]	; (80025d0 <HAL_GPIO_Init+0x2d0>)
 8002542:	68da      	ldr	r2, [r3, #12]
 8002544:	4922      	ldr	r1, [pc, #136]	; (80025d0 <HAL_GPIO_Init+0x2d0>)
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	4313      	orrs	r3, r2
 800254a:	60cb      	str	r3, [r1, #12]
 800254c:	e006      	b.n	800255c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800254e:	4b20      	ldr	r3, [pc, #128]	; (80025d0 <HAL_GPIO_Init+0x2d0>)
 8002550:	68da      	ldr	r2, [r3, #12]
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	43db      	mvns	r3, r3
 8002556:	491e      	ldr	r1, [pc, #120]	; (80025d0 <HAL_GPIO_Init+0x2d0>)
 8002558:	4013      	ands	r3, r2
 800255a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d006      	beq.n	8002576 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002568:	4b19      	ldr	r3, [pc, #100]	; (80025d0 <HAL_GPIO_Init+0x2d0>)
 800256a:	685a      	ldr	r2, [r3, #4]
 800256c:	4918      	ldr	r1, [pc, #96]	; (80025d0 <HAL_GPIO_Init+0x2d0>)
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	4313      	orrs	r3, r2
 8002572:	604b      	str	r3, [r1, #4]
 8002574:	e006      	b.n	8002584 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002576:	4b16      	ldr	r3, [pc, #88]	; (80025d0 <HAL_GPIO_Init+0x2d0>)
 8002578:	685a      	ldr	r2, [r3, #4]
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	43db      	mvns	r3, r3
 800257e:	4914      	ldr	r1, [pc, #80]	; (80025d0 <HAL_GPIO_Init+0x2d0>)
 8002580:	4013      	ands	r3, r2
 8002582:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d021      	beq.n	80025d4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002590:	4b0f      	ldr	r3, [pc, #60]	; (80025d0 <HAL_GPIO_Init+0x2d0>)
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	490e      	ldr	r1, [pc, #56]	; (80025d0 <HAL_GPIO_Init+0x2d0>)
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	4313      	orrs	r3, r2
 800259a:	600b      	str	r3, [r1, #0]
 800259c:	e021      	b.n	80025e2 <HAL_GPIO_Init+0x2e2>
 800259e:	bf00      	nop
 80025a0:	10320000 	.word	0x10320000
 80025a4:	10310000 	.word	0x10310000
 80025a8:	10220000 	.word	0x10220000
 80025ac:	10210000 	.word	0x10210000
 80025b0:	10120000 	.word	0x10120000
 80025b4:	10110000 	.word	0x10110000
 80025b8:	40021000 	.word	0x40021000
 80025bc:	40010000 	.word	0x40010000
 80025c0:	40010800 	.word	0x40010800
 80025c4:	40010c00 	.word	0x40010c00
 80025c8:	40011000 	.word	0x40011000
 80025cc:	40011400 	.word	0x40011400
 80025d0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80025d4:	4b0b      	ldr	r3, [pc, #44]	; (8002604 <HAL_GPIO_Init+0x304>)
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	43db      	mvns	r3, r3
 80025dc:	4909      	ldr	r1, [pc, #36]	; (8002604 <HAL_GPIO_Init+0x304>)
 80025de:	4013      	ands	r3, r2
 80025e0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80025e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e4:	3301      	adds	r3, #1
 80025e6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ee:	fa22 f303 	lsr.w	r3, r2, r3
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	f47f ae8e 	bne.w	8002314 <HAL_GPIO_Init+0x14>
  }
}
 80025f8:	bf00      	nop
 80025fa:	bf00      	nop
 80025fc:	372c      	adds	r7, #44	; 0x2c
 80025fe:	46bd      	mov	sp, r7
 8002600:	bc80      	pop	{r7}
 8002602:	4770      	bx	lr
 8002604:	40010400 	.word	0x40010400

08002608 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	460b      	mov	r3, r1
 8002612:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	689a      	ldr	r2, [r3, #8]
 8002618:	887b      	ldrh	r3, [r7, #2]
 800261a:	4013      	ands	r3, r2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d002      	beq.n	8002626 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002620:	2301      	movs	r3, #1
 8002622:	73fb      	strb	r3, [r7, #15]
 8002624:	e001      	b.n	800262a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002626:	2300      	movs	r3, #0
 8002628:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800262a:	7bfb      	ldrb	r3, [r7, #15]
}
 800262c:	4618      	mov	r0, r3
 800262e:	3714      	adds	r7, #20
 8002630:	46bd      	mov	sp, r7
 8002632:	bc80      	pop	{r7}
 8002634:	4770      	bx	lr

08002636 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002636:	b480      	push	{r7}
 8002638:	b083      	sub	sp, #12
 800263a:	af00      	add	r7, sp, #0
 800263c:	6078      	str	r0, [r7, #4]
 800263e:	460b      	mov	r3, r1
 8002640:	807b      	strh	r3, [r7, #2]
 8002642:	4613      	mov	r3, r2
 8002644:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002646:	787b      	ldrb	r3, [r7, #1]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d003      	beq.n	8002654 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800264c:	887a      	ldrh	r2, [r7, #2]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002652:	e003      	b.n	800265c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002654:	887b      	ldrh	r3, [r7, #2]
 8002656:	041a      	lsls	r2, r3, #16
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	611a      	str	r2, [r3, #16]
}
 800265c:	bf00      	nop
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	bc80      	pop	{r7}
 8002664:	4770      	bx	lr

08002666 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002666:	b480      	push	{r7}
 8002668:	b085      	sub	sp, #20
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
 800266e:	460b      	mov	r3, r1
 8002670:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002678:	887a      	ldrh	r2, [r7, #2]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	4013      	ands	r3, r2
 800267e:	041a      	lsls	r2, r3, #16
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	43d9      	mvns	r1, r3
 8002684:	887b      	ldrh	r3, [r7, #2]
 8002686:	400b      	ands	r3, r1
 8002688:	431a      	orrs	r2, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	611a      	str	r2, [r3, #16]
}
 800268e:	bf00      	nop
 8002690:	3714      	adds	r7, #20
 8002692:	46bd      	mov	sp, r7
 8002694:	bc80      	pop	{r7}
 8002696:	4770      	bx	lr

08002698 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	4603      	mov	r3, r0
 80026a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80026a2:	4b08      	ldr	r3, [pc, #32]	; (80026c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026a4:	695a      	ldr	r2, [r3, #20]
 80026a6:	88fb      	ldrh	r3, [r7, #6]
 80026a8:	4013      	ands	r3, r2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d006      	beq.n	80026bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80026ae:	4a05      	ldr	r2, [pc, #20]	; (80026c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026b0:	88fb      	ldrh	r3, [r7, #6]
 80026b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80026b4:	88fb      	ldrh	r3, [r7, #6]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f000 f806 	bl	80026c8 <HAL_GPIO_EXTI_Callback>
  }
}
 80026bc:	bf00      	nop
 80026be:	3708      	adds	r7, #8
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	40010400 	.word	0x40010400

080026c8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	4603      	mov	r3, r0
 80026d0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80026d2:	bf00      	nop
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bc80      	pop	{r7}
 80026da:	4770      	bx	lr

080026dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d101      	bne.n	80026ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e12b      	b.n	8002946 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d106      	bne.n	8002708 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f7ff fa1e 	bl	8001b44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2224      	movs	r2, #36	; 0x24
 800270c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f022 0201 	bic.w	r2, r2, #1
 800271e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800272e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800273e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002740:	f001 f830 	bl	80037a4 <HAL_RCC_GetPCLK1Freq>
 8002744:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	4a81      	ldr	r2, [pc, #516]	; (8002950 <HAL_I2C_Init+0x274>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d807      	bhi.n	8002760 <HAL_I2C_Init+0x84>
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	4a80      	ldr	r2, [pc, #512]	; (8002954 <HAL_I2C_Init+0x278>)
 8002754:	4293      	cmp	r3, r2
 8002756:	bf94      	ite	ls
 8002758:	2301      	movls	r3, #1
 800275a:	2300      	movhi	r3, #0
 800275c:	b2db      	uxtb	r3, r3
 800275e:	e006      	b.n	800276e <HAL_I2C_Init+0x92>
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	4a7d      	ldr	r2, [pc, #500]	; (8002958 <HAL_I2C_Init+0x27c>)
 8002764:	4293      	cmp	r3, r2
 8002766:	bf94      	ite	ls
 8002768:	2301      	movls	r3, #1
 800276a:	2300      	movhi	r3, #0
 800276c:	b2db      	uxtb	r3, r3
 800276e:	2b00      	cmp	r3, #0
 8002770:	d001      	beq.n	8002776 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e0e7      	b.n	8002946 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	4a78      	ldr	r2, [pc, #480]	; (800295c <HAL_I2C_Init+0x280>)
 800277a:	fba2 2303 	umull	r2, r3, r2, r3
 800277e:	0c9b      	lsrs	r3, r3, #18
 8002780:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	68ba      	ldr	r2, [r7, #8]
 8002792:	430a      	orrs	r2, r1
 8002794:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	6a1b      	ldr	r3, [r3, #32]
 800279c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	4a6a      	ldr	r2, [pc, #424]	; (8002950 <HAL_I2C_Init+0x274>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d802      	bhi.n	80027b0 <HAL_I2C_Init+0xd4>
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	3301      	adds	r3, #1
 80027ae:	e009      	b.n	80027c4 <HAL_I2C_Init+0xe8>
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80027b6:	fb02 f303 	mul.w	r3, r2, r3
 80027ba:	4a69      	ldr	r2, [pc, #420]	; (8002960 <HAL_I2C_Init+0x284>)
 80027bc:	fba2 2303 	umull	r2, r3, r2, r3
 80027c0:	099b      	lsrs	r3, r3, #6
 80027c2:	3301      	adds	r3, #1
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	6812      	ldr	r2, [r2, #0]
 80027c8:	430b      	orrs	r3, r1
 80027ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	69db      	ldr	r3, [r3, #28]
 80027d2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80027d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	495c      	ldr	r1, [pc, #368]	; (8002950 <HAL_I2C_Init+0x274>)
 80027e0:	428b      	cmp	r3, r1
 80027e2:	d819      	bhi.n	8002818 <HAL_I2C_Init+0x13c>
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	1e59      	subs	r1, r3, #1
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80027f2:	1c59      	adds	r1, r3, #1
 80027f4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80027f8:	400b      	ands	r3, r1
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d00a      	beq.n	8002814 <HAL_I2C_Init+0x138>
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	1e59      	subs	r1, r3, #1
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	fbb1 f3f3 	udiv	r3, r1, r3
 800280c:	3301      	adds	r3, #1
 800280e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002812:	e051      	b.n	80028b8 <HAL_I2C_Init+0x1dc>
 8002814:	2304      	movs	r3, #4
 8002816:	e04f      	b.n	80028b8 <HAL_I2C_Init+0x1dc>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d111      	bne.n	8002844 <HAL_I2C_Init+0x168>
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	1e58      	subs	r0, r3, #1
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6859      	ldr	r1, [r3, #4]
 8002828:	460b      	mov	r3, r1
 800282a:	005b      	lsls	r3, r3, #1
 800282c:	440b      	add	r3, r1
 800282e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002832:	3301      	adds	r3, #1
 8002834:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002838:	2b00      	cmp	r3, #0
 800283a:	bf0c      	ite	eq
 800283c:	2301      	moveq	r3, #1
 800283e:	2300      	movne	r3, #0
 8002840:	b2db      	uxtb	r3, r3
 8002842:	e012      	b.n	800286a <HAL_I2C_Init+0x18e>
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	1e58      	subs	r0, r3, #1
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6859      	ldr	r1, [r3, #4]
 800284c:	460b      	mov	r3, r1
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	440b      	add	r3, r1
 8002852:	0099      	lsls	r1, r3, #2
 8002854:	440b      	add	r3, r1
 8002856:	fbb0 f3f3 	udiv	r3, r0, r3
 800285a:	3301      	adds	r3, #1
 800285c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002860:	2b00      	cmp	r3, #0
 8002862:	bf0c      	ite	eq
 8002864:	2301      	moveq	r3, #1
 8002866:	2300      	movne	r3, #0
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <HAL_I2C_Init+0x196>
 800286e:	2301      	movs	r3, #1
 8002870:	e022      	b.n	80028b8 <HAL_I2C_Init+0x1dc>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d10e      	bne.n	8002898 <HAL_I2C_Init+0x1bc>
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	1e58      	subs	r0, r3, #1
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6859      	ldr	r1, [r3, #4]
 8002882:	460b      	mov	r3, r1
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	440b      	add	r3, r1
 8002888:	fbb0 f3f3 	udiv	r3, r0, r3
 800288c:	3301      	adds	r3, #1
 800288e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002892:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002896:	e00f      	b.n	80028b8 <HAL_I2C_Init+0x1dc>
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	1e58      	subs	r0, r3, #1
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6859      	ldr	r1, [r3, #4]
 80028a0:	460b      	mov	r3, r1
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	440b      	add	r3, r1
 80028a6:	0099      	lsls	r1, r3, #2
 80028a8:	440b      	add	r3, r1
 80028aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80028ae:	3301      	adds	r3, #1
 80028b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028b8:	6879      	ldr	r1, [r7, #4]
 80028ba:	6809      	ldr	r1, [r1, #0]
 80028bc:	4313      	orrs	r3, r2
 80028be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	69da      	ldr	r2, [r3, #28]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6a1b      	ldr	r3, [r3, #32]
 80028d2:	431a      	orrs	r2, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	430a      	orrs	r2, r1
 80028da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80028e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	6911      	ldr	r1, [r2, #16]
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	68d2      	ldr	r2, [r2, #12]
 80028f2:	4311      	orrs	r1, r2
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	6812      	ldr	r2, [r2, #0]
 80028f8:	430b      	orrs	r3, r1
 80028fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	695a      	ldr	r2, [r3, #20]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	699b      	ldr	r3, [r3, #24]
 800290e:	431a      	orrs	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	430a      	orrs	r2, r1
 8002916:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f042 0201 	orr.w	r2, r2, #1
 8002926:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2220      	movs	r2, #32
 8002932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3710      	adds	r7, #16
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	000186a0 	.word	0x000186a0
 8002954:	001e847f 	.word	0x001e847f
 8002958:	003d08ff 	.word	0x003d08ff
 800295c:	431bde83 	.word	0x431bde83
 8002960:	10624dd3 	.word	0x10624dd3

08002964 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b088      	sub	sp, #32
 8002968:	af02      	add	r7, sp, #8
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	607a      	str	r2, [r7, #4]
 800296e:	461a      	mov	r2, r3
 8002970:	460b      	mov	r3, r1
 8002972:	817b      	strh	r3, [r7, #10]
 8002974:	4613      	mov	r3, r2
 8002976:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002978:	f7ff fb86 	bl	8002088 <HAL_GetTick>
 800297c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002984:	b2db      	uxtb	r3, r3
 8002986:	2b20      	cmp	r3, #32
 8002988:	f040 80e0 	bne.w	8002b4c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	9300      	str	r3, [sp, #0]
 8002990:	2319      	movs	r3, #25
 8002992:	2201      	movs	r2, #1
 8002994:	4970      	ldr	r1, [pc, #448]	; (8002b58 <HAL_I2C_Master_Transmit+0x1f4>)
 8002996:	68f8      	ldr	r0, [r7, #12]
 8002998:	f000 f964 	bl	8002c64 <I2C_WaitOnFlagUntilTimeout>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80029a2:	2302      	movs	r3, #2
 80029a4:	e0d3      	b.n	8002b4e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d101      	bne.n	80029b4 <HAL_I2C_Master_Transmit+0x50>
 80029b0:	2302      	movs	r3, #2
 80029b2:	e0cc      	b.n	8002b4e <HAL_I2C_Master_Transmit+0x1ea>
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d007      	beq.n	80029da <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f042 0201 	orr.w	r2, r2, #1
 80029d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029e8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2221      	movs	r2, #33	; 0x21
 80029ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2210      	movs	r2, #16
 80029f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2200      	movs	r2, #0
 80029fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	893a      	ldrh	r2, [r7, #8]
 8002a0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a10:	b29a      	uxth	r2, r3
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	4a50      	ldr	r2, [pc, #320]	; (8002b5c <HAL_I2C_Master_Transmit+0x1f8>)
 8002a1a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002a1c:	8979      	ldrh	r1, [r7, #10]
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	6a3a      	ldr	r2, [r7, #32]
 8002a22:	68f8      	ldr	r0, [r7, #12]
 8002a24:	f000 f89c 	bl	8002b60 <I2C_MasterRequestWrite>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e08d      	b.n	8002b4e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a32:	2300      	movs	r3, #0
 8002a34:	613b      	str	r3, [r7, #16]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	695b      	ldr	r3, [r3, #20]
 8002a3c:	613b      	str	r3, [r7, #16]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	699b      	ldr	r3, [r3, #24]
 8002a44:	613b      	str	r3, [r7, #16]
 8002a46:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002a48:	e066      	b.n	8002b18 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a4a:	697a      	ldr	r2, [r7, #20]
 8002a4c:	6a39      	ldr	r1, [r7, #32]
 8002a4e:	68f8      	ldr	r0, [r7, #12]
 8002a50:	f000 fa22 	bl	8002e98 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d00d      	beq.n	8002a76 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5e:	2b04      	cmp	r3, #4
 8002a60:	d107      	bne.n	8002a72 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a70:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e06b      	b.n	8002b4e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7a:	781a      	ldrb	r2, [r3, #0]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a86:	1c5a      	adds	r2, r3, #1
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	3b01      	subs	r3, #1
 8002a94:	b29a      	uxth	r2, r3
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	b29a      	uxth	r2, r3
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	695b      	ldr	r3, [r3, #20]
 8002aac:	f003 0304 	and.w	r3, r3, #4
 8002ab0:	2b04      	cmp	r3, #4
 8002ab2:	d11b      	bne.n	8002aec <HAL_I2C_Master_Transmit+0x188>
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d017      	beq.n	8002aec <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac0:	781a      	ldrb	r2, [r3, #0]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002acc:	1c5a      	adds	r2, r3, #1
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ad6:	b29b      	uxth	r3, r3
 8002ad8:	3b01      	subs	r3, #1
 8002ada:	b29a      	uxth	r2, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	b29a      	uxth	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002aec:	697a      	ldr	r2, [r7, #20]
 8002aee:	6a39      	ldr	r1, [r7, #32]
 8002af0:	68f8      	ldr	r0, [r7, #12]
 8002af2:	f000 fa19 	bl	8002f28 <I2C_WaitOnBTFFlagUntilTimeout>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d00d      	beq.n	8002b18 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b00:	2b04      	cmp	r3, #4
 8002b02:	d107      	bne.n	8002b14 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b12:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e01a      	b.n	8002b4e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d194      	bne.n	8002a4a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2220      	movs	r2, #32
 8002b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	e000      	b.n	8002b4e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002b4c:	2302      	movs	r3, #2
  }
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3718      	adds	r7, #24
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	00100002 	.word	0x00100002
 8002b5c:	ffff0000 	.word	0xffff0000

08002b60 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b088      	sub	sp, #32
 8002b64:	af02      	add	r7, sp, #8
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	607a      	str	r2, [r7, #4]
 8002b6a:	603b      	str	r3, [r7, #0]
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b74:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	2b08      	cmp	r3, #8
 8002b7a:	d006      	beq.n	8002b8a <I2C_MasterRequestWrite+0x2a>
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d003      	beq.n	8002b8a <I2C_MasterRequestWrite+0x2a>
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b88:	d108      	bne.n	8002b9c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b98:	601a      	str	r2, [r3, #0]
 8002b9a:	e00b      	b.n	8002bb4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba0:	2b12      	cmp	r3, #18
 8002ba2:	d107      	bne.n	8002bb4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bb2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	9300      	str	r3, [sp, #0]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002bc0:	68f8      	ldr	r0, [r7, #12]
 8002bc2:	f000 f84f 	bl	8002c64 <I2C_WaitOnFlagUntilTimeout>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d00d      	beq.n	8002be8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bda:	d103      	bne.n	8002be4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002be2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002be4:	2303      	movs	r3, #3
 8002be6:	e035      	b.n	8002c54 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	691b      	ldr	r3, [r3, #16]
 8002bec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002bf0:	d108      	bne.n	8002c04 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002bf2:	897b      	ldrh	r3, [r7, #10]
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c00:	611a      	str	r2, [r3, #16]
 8002c02:	e01b      	b.n	8002c3c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002c04:	897b      	ldrh	r3, [r7, #10]
 8002c06:	11db      	asrs	r3, r3, #7
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	f003 0306 	and.w	r3, r3, #6
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	f063 030f 	orn	r3, r3, #15
 8002c14:	b2da      	uxtb	r2, r3
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	490e      	ldr	r1, [pc, #56]	; (8002c5c <I2C_MasterRequestWrite+0xfc>)
 8002c22:	68f8      	ldr	r0, [r7, #12]
 8002c24:	f000 f898 	bl	8002d58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e010      	b.n	8002c54 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002c32:	897b      	ldrh	r3, [r7, #10]
 8002c34:	b2da      	uxtb	r2, r3
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	4907      	ldr	r1, [pc, #28]	; (8002c60 <I2C_MasterRequestWrite+0x100>)
 8002c42:	68f8      	ldr	r0, [r7, #12]
 8002c44:	f000 f888 	bl	8002d58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e000      	b.n	8002c54 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002c52:	2300      	movs	r3, #0
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3718      	adds	r7, #24
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	00010008 	.word	0x00010008
 8002c60:	00010002 	.word	0x00010002

08002c64 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	603b      	str	r3, [r7, #0]
 8002c70:	4613      	mov	r3, r2
 8002c72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c74:	e048      	b.n	8002d08 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c7c:	d044      	beq.n	8002d08 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c7e:	f7ff fa03 	bl	8002088 <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	683a      	ldr	r2, [r7, #0]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d302      	bcc.n	8002c94 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d139      	bne.n	8002d08 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	0c1b      	lsrs	r3, r3, #16
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d10d      	bne.n	8002cba <I2C_WaitOnFlagUntilTimeout+0x56>
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	695b      	ldr	r3, [r3, #20]
 8002ca4:	43da      	mvns	r2, r3
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	b29b      	uxth	r3, r3
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	bf0c      	ite	eq
 8002cb0:	2301      	moveq	r3, #1
 8002cb2:	2300      	movne	r3, #0
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	e00c      	b.n	8002cd4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	43da      	mvns	r2, r3
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	bf0c      	ite	eq
 8002ccc:	2301      	moveq	r3, #1
 8002cce:	2300      	movne	r3, #0
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	79fb      	ldrb	r3, [r7, #7]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d116      	bne.n	8002d08 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2220      	movs	r2, #32
 8002ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf4:	f043 0220 	orr.w	r2, r3, #32
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e023      	b.n	8002d50 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	0c1b      	lsrs	r3, r3, #16
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d10d      	bne.n	8002d2e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	695b      	ldr	r3, [r3, #20]
 8002d18:	43da      	mvns	r2, r3
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	bf0c      	ite	eq
 8002d24:	2301      	moveq	r3, #1
 8002d26:	2300      	movne	r3, #0
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	e00c      	b.n	8002d48 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	699b      	ldr	r3, [r3, #24]
 8002d34:	43da      	mvns	r2, r3
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	4013      	ands	r3, r2
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	bf0c      	ite	eq
 8002d40:	2301      	moveq	r3, #1
 8002d42:	2300      	movne	r3, #0
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	461a      	mov	r2, r3
 8002d48:	79fb      	ldrb	r3, [r7, #7]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d093      	beq.n	8002c76 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d4e:	2300      	movs	r3, #0
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3710      	adds	r7, #16
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	607a      	str	r2, [r7, #4]
 8002d64:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d66:	e071      	b.n	8002e4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d76:	d123      	bne.n	8002dc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d86:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d90:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2200      	movs	r2, #0
 8002d96:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2220      	movs	r2, #32
 8002d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dac:	f043 0204 	orr.w	r2, r3, #4
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e067      	b.n	8002e90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc6:	d041      	beq.n	8002e4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dc8:	f7ff f95e 	bl	8002088 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d302      	bcc.n	8002dde <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d136      	bne.n	8002e4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	0c1b      	lsrs	r3, r3, #16
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d10c      	bne.n	8002e02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	695b      	ldr	r3, [r3, #20]
 8002dee:	43da      	mvns	r2, r3
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	4013      	ands	r3, r2
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	bf14      	ite	ne
 8002dfa:	2301      	movne	r3, #1
 8002dfc:	2300      	moveq	r3, #0
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	e00b      	b.n	8002e1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	699b      	ldr	r3, [r3, #24]
 8002e08:	43da      	mvns	r2, r3
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	bf14      	ite	ne
 8002e14:	2301      	movne	r3, #1
 8002e16:	2300      	moveq	r3, #0
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d016      	beq.n	8002e4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2200      	movs	r2, #0
 8002e22:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2220      	movs	r2, #32
 8002e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e38:	f043 0220 	orr.w	r2, r3, #32
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e021      	b.n	8002e90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	0c1b      	lsrs	r3, r3, #16
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d10c      	bne.n	8002e70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	695b      	ldr	r3, [r3, #20]
 8002e5c:	43da      	mvns	r2, r3
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	4013      	ands	r3, r2
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	bf14      	ite	ne
 8002e68:	2301      	movne	r3, #1
 8002e6a:	2300      	moveq	r3, #0
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	e00b      	b.n	8002e88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	699b      	ldr	r3, [r3, #24]
 8002e76:	43da      	mvns	r2, r3
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	bf14      	ite	ne
 8002e82:	2301      	movne	r3, #1
 8002e84:	2300      	moveq	r3, #0
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	f47f af6d 	bne.w	8002d68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3710      	adds	r7, #16
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ea4:	e034      	b.n	8002f10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ea6:	68f8      	ldr	r0, [r7, #12]
 8002ea8:	f000 f886 	bl	8002fb8 <I2C_IsAcknowledgeFailed>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d001      	beq.n	8002eb6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e034      	b.n	8002f20 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ebc:	d028      	beq.n	8002f10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ebe:	f7ff f8e3 	bl	8002088 <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	68ba      	ldr	r2, [r7, #8]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d302      	bcc.n	8002ed4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d11d      	bne.n	8002f10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	695b      	ldr	r3, [r3, #20]
 8002eda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ede:	2b80      	cmp	r3, #128	; 0x80
 8002ee0:	d016      	beq.n	8002f10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2220      	movs	r2, #32
 8002eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efc:	f043 0220 	orr.w	r2, r3, #32
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e007      	b.n	8002f20 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	695b      	ldr	r3, [r3, #20]
 8002f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f1a:	2b80      	cmp	r3, #128	; 0x80
 8002f1c:	d1c3      	bne.n	8002ea6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3710      	adds	r7, #16
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f34:	e034      	b.n	8002fa0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	f000 f83e 	bl	8002fb8 <I2C_IsAcknowledgeFailed>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d001      	beq.n	8002f46 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e034      	b.n	8002fb0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f4c:	d028      	beq.n	8002fa0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f4e:	f7ff f89b 	bl	8002088 <HAL_GetTick>
 8002f52:	4602      	mov	r2, r0
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	68ba      	ldr	r2, [r7, #8]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d302      	bcc.n	8002f64 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d11d      	bne.n	8002fa0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	695b      	ldr	r3, [r3, #20]
 8002f6a:	f003 0304 	and.w	r3, r3, #4
 8002f6e:	2b04      	cmp	r3, #4
 8002f70:	d016      	beq.n	8002fa0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2200      	movs	r2, #0
 8002f76:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2220      	movs	r2, #32
 8002f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8c:	f043 0220 	orr.w	r2, r3, #32
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e007      	b.n	8002fb0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	695b      	ldr	r3, [r3, #20]
 8002fa6:	f003 0304 	and.w	r3, r3, #4
 8002faa:	2b04      	cmp	r3, #4
 8002fac:	d1c3      	bne.n	8002f36 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002fae:	2300      	movs	r3, #0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3710      	adds	r7, #16
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fce:	d11b      	bne.n	8003008 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002fd8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2220      	movs	r2, #32
 8002fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff4:	f043 0204 	orr.w	r2, r3, #4
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e000      	b.n	800300a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003008:	2300      	movs	r3, #0
}
 800300a:	4618      	mov	r0, r3
 800300c:	370c      	adds	r7, #12
 800300e:	46bd      	mov	sp, r7
 8003010:	bc80      	pop	{r7}
 8003012:	4770      	bx	lr

08003014 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b086      	sub	sp, #24
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d101      	bne.n	8003026 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e26c      	b.n	8003500 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	2b00      	cmp	r3, #0
 8003030:	f000 8087 	beq.w	8003142 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003034:	4b92      	ldr	r3, [pc, #584]	; (8003280 <HAL_RCC_OscConfig+0x26c>)
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f003 030c 	and.w	r3, r3, #12
 800303c:	2b04      	cmp	r3, #4
 800303e:	d00c      	beq.n	800305a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003040:	4b8f      	ldr	r3, [pc, #572]	; (8003280 <HAL_RCC_OscConfig+0x26c>)
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f003 030c 	and.w	r3, r3, #12
 8003048:	2b08      	cmp	r3, #8
 800304a:	d112      	bne.n	8003072 <HAL_RCC_OscConfig+0x5e>
 800304c:	4b8c      	ldr	r3, [pc, #560]	; (8003280 <HAL_RCC_OscConfig+0x26c>)
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003054:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003058:	d10b      	bne.n	8003072 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800305a:	4b89      	ldr	r3, [pc, #548]	; (8003280 <HAL_RCC_OscConfig+0x26c>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d06c      	beq.n	8003140 <HAL_RCC_OscConfig+0x12c>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d168      	bne.n	8003140 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e246      	b.n	8003500 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800307a:	d106      	bne.n	800308a <HAL_RCC_OscConfig+0x76>
 800307c:	4b80      	ldr	r3, [pc, #512]	; (8003280 <HAL_RCC_OscConfig+0x26c>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a7f      	ldr	r2, [pc, #508]	; (8003280 <HAL_RCC_OscConfig+0x26c>)
 8003082:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003086:	6013      	str	r3, [r2, #0]
 8003088:	e02e      	b.n	80030e8 <HAL_RCC_OscConfig+0xd4>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d10c      	bne.n	80030ac <HAL_RCC_OscConfig+0x98>
 8003092:	4b7b      	ldr	r3, [pc, #492]	; (8003280 <HAL_RCC_OscConfig+0x26c>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a7a      	ldr	r2, [pc, #488]	; (8003280 <HAL_RCC_OscConfig+0x26c>)
 8003098:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800309c:	6013      	str	r3, [r2, #0]
 800309e:	4b78      	ldr	r3, [pc, #480]	; (8003280 <HAL_RCC_OscConfig+0x26c>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a77      	ldr	r2, [pc, #476]	; (8003280 <HAL_RCC_OscConfig+0x26c>)
 80030a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030a8:	6013      	str	r3, [r2, #0]
 80030aa:	e01d      	b.n	80030e8 <HAL_RCC_OscConfig+0xd4>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030b4:	d10c      	bne.n	80030d0 <HAL_RCC_OscConfig+0xbc>
 80030b6:	4b72      	ldr	r3, [pc, #456]	; (8003280 <HAL_RCC_OscConfig+0x26c>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a71      	ldr	r2, [pc, #452]	; (8003280 <HAL_RCC_OscConfig+0x26c>)
 80030bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030c0:	6013      	str	r3, [r2, #0]
 80030c2:	4b6f      	ldr	r3, [pc, #444]	; (8003280 <HAL_RCC_OscConfig+0x26c>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a6e      	ldr	r2, [pc, #440]	; (8003280 <HAL_RCC_OscConfig+0x26c>)
 80030c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030cc:	6013      	str	r3, [r2, #0]
 80030ce:	e00b      	b.n	80030e8 <HAL_RCC_OscConfig+0xd4>
 80030d0:	4b6b      	ldr	r3, [pc, #428]	; (8003280 <HAL_RCC_OscConfig+0x26c>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a6a      	ldr	r2, [pc, #424]	; (8003280 <HAL_RCC_OscConfig+0x26c>)
 80030d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030da:	6013      	str	r3, [r2, #0]
 80030dc:	4b68      	ldr	r3, [pc, #416]	; (8003280 <HAL_RCC_OscConfig+0x26c>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a67      	ldr	r2, [pc, #412]	; (8003280 <HAL_RCC_OscConfig+0x26c>)
 80030e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d013      	beq.n	8003118 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f0:	f7fe ffca 	bl	8002088 <HAL_GetTick>
 80030f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030f6:	e008      	b.n	800310a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030f8:	f7fe ffc6 	bl	8002088 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b64      	cmp	r3, #100	; 0x64
 8003104:	d901      	bls.n	800310a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e1fa      	b.n	8003500 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800310a:	4b5d      	ldr	r3, [pc, #372]	; (8003280 <HAL_RCC_OscConfig+0x26c>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d0f0      	beq.n	80030f8 <HAL_RCC_OscConfig+0xe4>
 8003116:	e014      	b.n	8003142 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003118:	f7fe ffb6 	bl	8002088 <HAL_GetTick>
 800311c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800311e:	e008      	b.n	8003132 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003120:	f7fe ffb2 	bl	8002088 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b64      	cmp	r3, #100	; 0x64
 800312c:	d901      	bls.n	8003132 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e1e6      	b.n	8003500 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003132:	4b53      	ldr	r3, [pc, #332]	; (8003280 <HAL_RCC_OscConfig+0x26c>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d1f0      	bne.n	8003120 <HAL_RCC_OscConfig+0x10c>
 800313e:	e000      	b.n	8003142 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003140:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d063      	beq.n	8003216 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800314e:	4b4c      	ldr	r3, [pc, #304]	; (8003280 <HAL_RCC_OscConfig+0x26c>)
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f003 030c 	and.w	r3, r3, #12
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00b      	beq.n	8003172 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800315a:	4b49      	ldr	r3, [pc, #292]	; (8003280 <HAL_RCC_OscConfig+0x26c>)
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	f003 030c 	and.w	r3, r3, #12
 8003162:	2b08      	cmp	r3, #8
 8003164:	d11c      	bne.n	80031a0 <HAL_RCC_OscConfig+0x18c>
 8003166:	4b46      	ldr	r3, [pc, #280]	; (8003280 <HAL_RCC_OscConfig+0x26c>)
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d116      	bne.n	80031a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003172:	4b43      	ldr	r3, [pc, #268]	; (8003280 <HAL_RCC_OscConfig+0x26c>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	2b00      	cmp	r3, #0
 800317c:	d005      	beq.n	800318a <HAL_RCC_OscConfig+0x176>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	2b01      	cmp	r3, #1
 8003184:	d001      	beq.n	800318a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e1ba      	b.n	8003500 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800318a:	4b3d      	ldr	r3, [pc, #244]	; (8003280 <HAL_RCC_OscConfig+0x26c>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	695b      	ldr	r3, [r3, #20]
 8003196:	00db      	lsls	r3, r3, #3
 8003198:	4939      	ldr	r1, [pc, #228]	; (8003280 <HAL_RCC_OscConfig+0x26c>)
 800319a:	4313      	orrs	r3, r2
 800319c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800319e:	e03a      	b.n	8003216 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	691b      	ldr	r3, [r3, #16]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d020      	beq.n	80031ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031a8:	4b36      	ldr	r3, [pc, #216]	; (8003284 <HAL_RCC_OscConfig+0x270>)
 80031aa:	2201      	movs	r2, #1
 80031ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ae:	f7fe ff6b 	bl	8002088 <HAL_GetTick>
 80031b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031b4:	e008      	b.n	80031c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031b6:	f7fe ff67 	bl	8002088 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d901      	bls.n	80031c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e19b      	b.n	8003500 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031c8:	4b2d      	ldr	r3, [pc, #180]	; (8003280 <HAL_RCC_OscConfig+0x26c>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d0f0      	beq.n	80031b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031d4:	4b2a      	ldr	r3, [pc, #168]	; (8003280 <HAL_RCC_OscConfig+0x26c>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	695b      	ldr	r3, [r3, #20]
 80031e0:	00db      	lsls	r3, r3, #3
 80031e2:	4927      	ldr	r1, [pc, #156]	; (8003280 <HAL_RCC_OscConfig+0x26c>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	600b      	str	r3, [r1, #0]
 80031e8:	e015      	b.n	8003216 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031ea:	4b26      	ldr	r3, [pc, #152]	; (8003284 <HAL_RCC_OscConfig+0x270>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f0:	f7fe ff4a 	bl	8002088 <HAL_GetTick>
 80031f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031f6:	e008      	b.n	800320a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031f8:	f7fe ff46 	bl	8002088 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b02      	cmp	r3, #2
 8003204:	d901      	bls.n	800320a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e17a      	b.n	8003500 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800320a:	4b1d      	ldr	r3, [pc, #116]	; (8003280 <HAL_RCC_OscConfig+0x26c>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1f0      	bne.n	80031f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0308 	and.w	r3, r3, #8
 800321e:	2b00      	cmp	r3, #0
 8003220:	d03a      	beq.n	8003298 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d019      	beq.n	800325e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800322a:	4b17      	ldr	r3, [pc, #92]	; (8003288 <HAL_RCC_OscConfig+0x274>)
 800322c:	2201      	movs	r2, #1
 800322e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003230:	f7fe ff2a 	bl	8002088 <HAL_GetTick>
 8003234:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003236:	e008      	b.n	800324a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003238:	f7fe ff26 	bl	8002088 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b02      	cmp	r3, #2
 8003244:	d901      	bls.n	800324a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e15a      	b.n	8003500 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800324a:	4b0d      	ldr	r3, [pc, #52]	; (8003280 <HAL_RCC_OscConfig+0x26c>)
 800324c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	2b00      	cmp	r3, #0
 8003254:	d0f0      	beq.n	8003238 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003256:	2001      	movs	r0, #1
 8003258:	f000 facc 	bl	80037f4 <RCC_Delay>
 800325c:	e01c      	b.n	8003298 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800325e:	4b0a      	ldr	r3, [pc, #40]	; (8003288 <HAL_RCC_OscConfig+0x274>)
 8003260:	2200      	movs	r2, #0
 8003262:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003264:	f7fe ff10 	bl	8002088 <HAL_GetTick>
 8003268:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800326a:	e00f      	b.n	800328c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800326c:	f7fe ff0c 	bl	8002088 <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	2b02      	cmp	r3, #2
 8003278:	d908      	bls.n	800328c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e140      	b.n	8003500 <HAL_RCC_OscConfig+0x4ec>
 800327e:	bf00      	nop
 8003280:	40021000 	.word	0x40021000
 8003284:	42420000 	.word	0x42420000
 8003288:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800328c:	4b9e      	ldr	r3, [pc, #632]	; (8003508 <HAL_RCC_OscConfig+0x4f4>)
 800328e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003290:	f003 0302 	and.w	r3, r3, #2
 8003294:	2b00      	cmp	r3, #0
 8003296:	d1e9      	bne.n	800326c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0304 	and.w	r3, r3, #4
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	f000 80a6 	beq.w	80033f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032a6:	2300      	movs	r3, #0
 80032a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032aa:	4b97      	ldr	r3, [pc, #604]	; (8003508 <HAL_RCC_OscConfig+0x4f4>)
 80032ac:	69db      	ldr	r3, [r3, #28]
 80032ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d10d      	bne.n	80032d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032b6:	4b94      	ldr	r3, [pc, #592]	; (8003508 <HAL_RCC_OscConfig+0x4f4>)
 80032b8:	69db      	ldr	r3, [r3, #28]
 80032ba:	4a93      	ldr	r2, [pc, #588]	; (8003508 <HAL_RCC_OscConfig+0x4f4>)
 80032bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032c0:	61d3      	str	r3, [r2, #28]
 80032c2:	4b91      	ldr	r3, [pc, #580]	; (8003508 <HAL_RCC_OscConfig+0x4f4>)
 80032c4:	69db      	ldr	r3, [r3, #28]
 80032c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ca:	60bb      	str	r3, [r7, #8]
 80032cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032ce:	2301      	movs	r3, #1
 80032d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032d2:	4b8e      	ldr	r3, [pc, #568]	; (800350c <HAL_RCC_OscConfig+0x4f8>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d118      	bne.n	8003310 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032de:	4b8b      	ldr	r3, [pc, #556]	; (800350c <HAL_RCC_OscConfig+0x4f8>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a8a      	ldr	r2, [pc, #552]	; (800350c <HAL_RCC_OscConfig+0x4f8>)
 80032e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032ea:	f7fe fecd 	bl	8002088 <HAL_GetTick>
 80032ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032f0:	e008      	b.n	8003304 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032f2:	f7fe fec9 	bl	8002088 <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	2b64      	cmp	r3, #100	; 0x64
 80032fe:	d901      	bls.n	8003304 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e0fd      	b.n	8003500 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003304:	4b81      	ldr	r3, [pc, #516]	; (800350c <HAL_RCC_OscConfig+0x4f8>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800330c:	2b00      	cmp	r3, #0
 800330e:	d0f0      	beq.n	80032f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	2b01      	cmp	r3, #1
 8003316:	d106      	bne.n	8003326 <HAL_RCC_OscConfig+0x312>
 8003318:	4b7b      	ldr	r3, [pc, #492]	; (8003508 <HAL_RCC_OscConfig+0x4f4>)
 800331a:	6a1b      	ldr	r3, [r3, #32]
 800331c:	4a7a      	ldr	r2, [pc, #488]	; (8003508 <HAL_RCC_OscConfig+0x4f4>)
 800331e:	f043 0301 	orr.w	r3, r3, #1
 8003322:	6213      	str	r3, [r2, #32]
 8003324:	e02d      	b.n	8003382 <HAL_RCC_OscConfig+0x36e>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d10c      	bne.n	8003348 <HAL_RCC_OscConfig+0x334>
 800332e:	4b76      	ldr	r3, [pc, #472]	; (8003508 <HAL_RCC_OscConfig+0x4f4>)
 8003330:	6a1b      	ldr	r3, [r3, #32]
 8003332:	4a75      	ldr	r2, [pc, #468]	; (8003508 <HAL_RCC_OscConfig+0x4f4>)
 8003334:	f023 0301 	bic.w	r3, r3, #1
 8003338:	6213      	str	r3, [r2, #32]
 800333a:	4b73      	ldr	r3, [pc, #460]	; (8003508 <HAL_RCC_OscConfig+0x4f4>)
 800333c:	6a1b      	ldr	r3, [r3, #32]
 800333e:	4a72      	ldr	r2, [pc, #456]	; (8003508 <HAL_RCC_OscConfig+0x4f4>)
 8003340:	f023 0304 	bic.w	r3, r3, #4
 8003344:	6213      	str	r3, [r2, #32]
 8003346:	e01c      	b.n	8003382 <HAL_RCC_OscConfig+0x36e>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	2b05      	cmp	r3, #5
 800334e:	d10c      	bne.n	800336a <HAL_RCC_OscConfig+0x356>
 8003350:	4b6d      	ldr	r3, [pc, #436]	; (8003508 <HAL_RCC_OscConfig+0x4f4>)
 8003352:	6a1b      	ldr	r3, [r3, #32]
 8003354:	4a6c      	ldr	r2, [pc, #432]	; (8003508 <HAL_RCC_OscConfig+0x4f4>)
 8003356:	f043 0304 	orr.w	r3, r3, #4
 800335a:	6213      	str	r3, [r2, #32]
 800335c:	4b6a      	ldr	r3, [pc, #424]	; (8003508 <HAL_RCC_OscConfig+0x4f4>)
 800335e:	6a1b      	ldr	r3, [r3, #32]
 8003360:	4a69      	ldr	r2, [pc, #420]	; (8003508 <HAL_RCC_OscConfig+0x4f4>)
 8003362:	f043 0301 	orr.w	r3, r3, #1
 8003366:	6213      	str	r3, [r2, #32]
 8003368:	e00b      	b.n	8003382 <HAL_RCC_OscConfig+0x36e>
 800336a:	4b67      	ldr	r3, [pc, #412]	; (8003508 <HAL_RCC_OscConfig+0x4f4>)
 800336c:	6a1b      	ldr	r3, [r3, #32]
 800336e:	4a66      	ldr	r2, [pc, #408]	; (8003508 <HAL_RCC_OscConfig+0x4f4>)
 8003370:	f023 0301 	bic.w	r3, r3, #1
 8003374:	6213      	str	r3, [r2, #32]
 8003376:	4b64      	ldr	r3, [pc, #400]	; (8003508 <HAL_RCC_OscConfig+0x4f4>)
 8003378:	6a1b      	ldr	r3, [r3, #32]
 800337a:	4a63      	ldr	r2, [pc, #396]	; (8003508 <HAL_RCC_OscConfig+0x4f4>)
 800337c:	f023 0304 	bic.w	r3, r3, #4
 8003380:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d015      	beq.n	80033b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800338a:	f7fe fe7d 	bl	8002088 <HAL_GetTick>
 800338e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003390:	e00a      	b.n	80033a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003392:	f7fe fe79 	bl	8002088 <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	f241 3288 	movw	r2, #5000	; 0x1388
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d901      	bls.n	80033a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	e0ab      	b.n	8003500 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033a8:	4b57      	ldr	r3, [pc, #348]	; (8003508 <HAL_RCC_OscConfig+0x4f4>)
 80033aa:	6a1b      	ldr	r3, [r3, #32]
 80033ac:	f003 0302 	and.w	r3, r3, #2
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d0ee      	beq.n	8003392 <HAL_RCC_OscConfig+0x37e>
 80033b4:	e014      	b.n	80033e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033b6:	f7fe fe67 	bl	8002088 <HAL_GetTick>
 80033ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033bc:	e00a      	b.n	80033d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033be:	f7fe fe63 	bl	8002088 <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d901      	bls.n	80033d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e095      	b.n	8003500 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033d4:	4b4c      	ldr	r3, [pc, #304]	; (8003508 <HAL_RCC_OscConfig+0x4f4>)
 80033d6:	6a1b      	ldr	r3, [r3, #32]
 80033d8:	f003 0302 	and.w	r3, r3, #2
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d1ee      	bne.n	80033be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80033e0:	7dfb      	ldrb	r3, [r7, #23]
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d105      	bne.n	80033f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033e6:	4b48      	ldr	r3, [pc, #288]	; (8003508 <HAL_RCC_OscConfig+0x4f4>)
 80033e8:	69db      	ldr	r3, [r3, #28]
 80033ea:	4a47      	ldr	r2, [pc, #284]	; (8003508 <HAL_RCC_OscConfig+0x4f4>)
 80033ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	69db      	ldr	r3, [r3, #28]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	f000 8081 	beq.w	80034fe <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033fc:	4b42      	ldr	r3, [pc, #264]	; (8003508 <HAL_RCC_OscConfig+0x4f4>)
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f003 030c 	and.w	r3, r3, #12
 8003404:	2b08      	cmp	r3, #8
 8003406:	d061      	beq.n	80034cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	69db      	ldr	r3, [r3, #28]
 800340c:	2b02      	cmp	r3, #2
 800340e:	d146      	bne.n	800349e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003410:	4b3f      	ldr	r3, [pc, #252]	; (8003510 <HAL_RCC_OscConfig+0x4fc>)
 8003412:	2200      	movs	r2, #0
 8003414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003416:	f7fe fe37 	bl	8002088 <HAL_GetTick>
 800341a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800341c:	e008      	b.n	8003430 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800341e:	f7fe fe33 	bl	8002088 <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	2b02      	cmp	r3, #2
 800342a:	d901      	bls.n	8003430 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e067      	b.n	8003500 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003430:	4b35      	ldr	r3, [pc, #212]	; (8003508 <HAL_RCC_OscConfig+0x4f4>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d1f0      	bne.n	800341e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a1b      	ldr	r3, [r3, #32]
 8003440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003444:	d108      	bne.n	8003458 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003446:	4b30      	ldr	r3, [pc, #192]	; (8003508 <HAL_RCC_OscConfig+0x4f4>)
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	492d      	ldr	r1, [pc, #180]	; (8003508 <HAL_RCC_OscConfig+0x4f4>)
 8003454:	4313      	orrs	r3, r2
 8003456:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003458:	4b2b      	ldr	r3, [pc, #172]	; (8003508 <HAL_RCC_OscConfig+0x4f4>)
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6a19      	ldr	r1, [r3, #32]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003468:	430b      	orrs	r3, r1
 800346a:	4927      	ldr	r1, [pc, #156]	; (8003508 <HAL_RCC_OscConfig+0x4f4>)
 800346c:	4313      	orrs	r3, r2
 800346e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003470:	4b27      	ldr	r3, [pc, #156]	; (8003510 <HAL_RCC_OscConfig+0x4fc>)
 8003472:	2201      	movs	r2, #1
 8003474:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003476:	f7fe fe07 	bl	8002088 <HAL_GetTick>
 800347a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800347c:	e008      	b.n	8003490 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800347e:	f7fe fe03 	bl	8002088 <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	2b02      	cmp	r3, #2
 800348a:	d901      	bls.n	8003490 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e037      	b.n	8003500 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003490:	4b1d      	ldr	r3, [pc, #116]	; (8003508 <HAL_RCC_OscConfig+0x4f4>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d0f0      	beq.n	800347e <HAL_RCC_OscConfig+0x46a>
 800349c:	e02f      	b.n	80034fe <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800349e:	4b1c      	ldr	r3, [pc, #112]	; (8003510 <HAL_RCC_OscConfig+0x4fc>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034a4:	f7fe fdf0 	bl	8002088 <HAL_GetTick>
 80034a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034aa:	e008      	b.n	80034be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034ac:	f7fe fdec 	bl	8002088 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e020      	b.n	8003500 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034be:	4b12      	ldr	r3, [pc, #72]	; (8003508 <HAL_RCC_OscConfig+0x4f4>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1f0      	bne.n	80034ac <HAL_RCC_OscConfig+0x498>
 80034ca:	e018      	b.n	80034fe <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	69db      	ldr	r3, [r3, #28]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d101      	bne.n	80034d8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e013      	b.n	8003500 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80034d8:	4b0b      	ldr	r3, [pc, #44]	; (8003508 <HAL_RCC_OscConfig+0x4f4>)
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a1b      	ldr	r3, [r3, #32]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d106      	bne.n	80034fa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d001      	beq.n	80034fe <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e000      	b.n	8003500 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80034fe:	2300      	movs	r3, #0
}
 8003500:	4618      	mov	r0, r3
 8003502:	3718      	adds	r7, #24
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	40021000 	.word	0x40021000
 800350c:	40007000 	.word	0x40007000
 8003510:	42420060 	.word	0x42420060

08003514 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d101      	bne.n	8003528 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e0d0      	b.n	80036ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003528:	4b6a      	ldr	r3, [pc, #424]	; (80036d4 <HAL_RCC_ClockConfig+0x1c0>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0307 	and.w	r3, r3, #7
 8003530:	683a      	ldr	r2, [r7, #0]
 8003532:	429a      	cmp	r2, r3
 8003534:	d910      	bls.n	8003558 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003536:	4b67      	ldr	r3, [pc, #412]	; (80036d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f023 0207 	bic.w	r2, r3, #7
 800353e:	4965      	ldr	r1, [pc, #404]	; (80036d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	4313      	orrs	r3, r2
 8003544:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003546:	4b63      	ldr	r3, [pc, #396]	; (80036d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0307 	and.w	r3, r3, #7
 800354e:	683a      	ldr	r2, [r7, #0]
 8003550:	429a      	cmp	r2, r3
 8003552:	d001      	beq.n	8003558 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e0b8      	b.n	80036ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0302 	and.w	r3, r3, #2
 8003560:	2b00      	cmp	r3, #0
 8003562:	d020      	beq.n	80035a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0304 	and.w	r3, r3, #4
 800356c:	2b00      	cmp	r3, #0
 800356e:	d005      	beq.n	800357c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003570:	4b59      	ldr	r3, [pc, #356]	; (80036d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	4a58      	ldr	r2, [pc, #352]	; (80036d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003576:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800357a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0308 	and.w	r3, r3, #8
 8003584:	2b00      	cmp	r3, #0
 8003586:	d005      	beq.n	8003594 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003588:	4b53      	ldr	r3, [pc, #332]	; (80036d8 <HAL_RCC_ClockConfig+0x1c4>)
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	4a52      	ldr	r2, [pc, #328]	; (80036d8 <HAL_RCC_ClockConfig+0x1c4>)
 800358e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003592:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003594:	4b50      	ldr	r3, [pc, #320]	; (80036d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	494d      	ldr	r1, [pc, #308]	; (80036d8 <HAL_RCC_ClockConfig+0x1c4>)
 80035a2:	4313      	orrs	r3, r2
 80035a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0301 	and.w	r3, r3, #1
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d040      	beq.n	8003634 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d107      	bne.n	80035ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ba:	4b47      	ldr	r3, [pc, #284]	; (80036d8 <HAL_RCC_ClockConfig+0x1c4>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d115      	bne.n	80035f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e07f      	b.n	80036ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d107      	bne.n	80035e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035d2:	4b41      	ldr	r3, [pc, #260]	; (80036d8 <HAL_RCC_ClockConfig+0x1c4>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d109      	bne.n	80035f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e073      	b.n	80036ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035e2:	4b3d      	ldr	r3, [pc, #244]	; (80036d8 <HAL_RCC_ClockConfig+0x1c4>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0302 	and.w	r3, r3, #2
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d101      	bne.n	80035f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e06b      	b.n	80036ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035f2:	4b39      	ldr	r3, [pc, #228]	; (80036d8 <HAL_RCC_ClockConfig+0x1c4>)
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f023 0203 	bic.w	r2, r3, #3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	4936      	ldr	r1, [pc, #216]	; (80036d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003600:	4313      	orrs	r3, r2
 8003602:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003604:	f7fe fd40 	bl	8002088 <HAL_GetTick>
 8003608:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800360a:	e00a      	b.n	8003622 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800360c:	f7fe fd3c 	bl	8002088 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	f241 3288 	movw	r2, #5000	; 0x1388
 800361a:	4293      	cmp	r3, r2
 800361c:	d901      	bls.n	8003622 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e053      	b.n	80036ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003622:	4b2d      	ldr	r3, [pc, #180]	; (80036d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f003 020c 	and.w	r2, r3, #12
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	429a      	cmp	r2, r3
 8003632:	d1eb      	bne.n	800360c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003634:	4b27      	ldr	r3, [pc, #156]	; (80036d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0307 	and.w	r3, r3, #7
 800363c:	683a      	ldr	r2, [r7, #0]
 800363e:	429a      	cmp	r2, r3
 8003640:	d210      	bcs.n	8003664 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003642:	4b24      	ldr	r3, [pc, #144]	; (80036d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f023 0207 	bic.w	r2, r3, #7
 800364a:	4922      	ldr	r1, [pc, #136]	; (80036d4 <HAL_RCC_ClockConfig+0x1c0>)
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	4313      	orrs	r3, r2
 8003650:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003652:	4b20      	ldr	r3, [pc, #128]	; (80036d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0307 	and.w	r3, r3, #7
 800365a:	683a      	ldr	r2, [r7, #0]
 800365c:	429a      	cmp	r2, r3
 800365e:	d001      	beq.n	8003664 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e032      	b.n	80036ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0304 	and.w	r3, r3, #4
 800366c:	2b00      	cmp	r3, #0
 800366e:	d008      	beq.n	8003682 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003670:	4b19      	ldr	r3, [pc, #100]	; (80036d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	4916      	ldr	r1, [pc, #88]	; (80036d8 <HAL_RCC_ClockConfig+0x1c4>)
 800367e:	4313      	orrs	r3, r2
 8003680:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0308 	and.w	r3, r3, #8
 800368a:	2b00      	cmp	r3, #0
 800368c:	d009      	beq.n	80036a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800368e:	4b12      	ldr	r3, [pc, #72]	; (80036d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	00db      	lsls	r3, r3, #3
 800369c:	490e      	ldr	r1, [pc, #56]	; (80036d8 <HAL_RCC_ClockConfig+0x1c4>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80036a2:	f000 f821 	bl	80036e8 <HAL_RCC_GetSysClockFreq>
 80036a6:	4602      	mov	r2, r0
 80036a8:	4b0b      	ldr	r3, [pc, #44]	; (80036d8 <HAL_RCC_ClockConfig+0x1c4>)
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	091b      	lsrs	r3, r3, #4
 80036ae:	f003 030f 	and.w	r3, r3, #15
 80036b2:	490a      	ldr	r1, [pc, #40]	; (80036dc <HAL_RCC_ClockConfig+0x1c8>)
 80036b4:	5ccb      	ldrb	r3, [r1, r3]
 80036b6:	fa22 f303 	lsr.w	r3, r2, r3
 80036ba:	4a09      	ldr	r2, [pc, #36]	; (80036e0 <HAL_RCC_ClockConfig+0x1cc>)
 80036bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80036be:	4b09      	ldr	r3, [pc, #36]	; (80036e4 <HAL_RCC_ClockConfig+0x1d0>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7fe fc9e 	bl	8002004 <HAL_InitTick>

  return HAL_OK;
 80036c8:	2300      	movs	r3, #0
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3710      	adds	r7, #16
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	40022000 	.word	0x40022000
 80036d8:	40021000 	.word	0x40021000
 80036dc:	08004bd8 	.word	0x08004bd8
 80036e0:	20000054 	.word	0x20000054
 80036e4:	20000058 	.word	0x20000058

080036e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b087      	sub	sp, #28
 80036ec:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80036ee:	2300      	movs	r3, #0
 80036f0:	60fb      	str	r3, [r7, #12]
 80036f2:	2300      	movs	r3, #0
 80036f4:	60bb      	str	r3, [r7, #8]
 80036f6:	2300      	movs	r3, #0
 80036f8:	617b      	str	r3, [r7, #20]
 80036fa:	2300      	movs	r3, #0
 80036fc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80036fe:	2300      	movs	r3, #0
 8003700:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003702:	4b1e      	ldr	r3, [pc, #120]	; (800377c <HAL_RCC_GetSysClockFreq+0x94>)
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f003 030c 	and.w	r3, r3, #12
 800370e:	2b04      	cmp	r3, #4
 8003710:	d002      	beq.n	8003718 <HAL_RCC_GetSysClockFreq+0x30>
 8003712:	2b08      	cmp	r3, #8
 8003714:	d003      	beq.n	800371e <HAL_RCC_GetSysClockFreq+0x36>
 8003716:	e027      	b.n	8003768 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003718:	4b19      	ldr	r3, [pc, #100]	; (8003780 <HAL_RCC_GetSysClockFreq+0x98>)
 800371a:	613b      	str	r3, [r7, #16]
      break;
 800371c:	e027      	b.n	800376e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	0c9b      	lsrs	r3, r3, #18
 8003722:	f003 030f 	and.w	r3, r3, #15
 8003726:	4a17      	ldr	r2, [pc, #92]	; (8003784 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003728:	5cd3      	ldrb	r3, [r2, r3]
 800372a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d010      	beq.n	8003758 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003736:	4b11      	ldr	r3, [pc, #68]	; (800377c <HAL_RCC_GetSysClockFreq+0x94>)
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	0c5b      	lsrs	r3, r3, #17
 800373c:	f003 0301 	and.w	r3, r3, #1
 8003740:	4a11      	ldr	r2, [pc, #68]	; (8003788 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003742:	5cd3      	ldrb	r3, [r2, r3]
 8003744:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a0d      	ldr	r2, [pc, #52]	; (8003780 <HAL_RCC_GetSysClockFreq+0x98>)
 800374a:	fb02 f203 	mul.w	r2, r2, r3
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	fbb2 f3f3 	udiv	r3, r2, r3
 8003754:	617b      	str	r3, [r7, #20]
 8003756:	e004      	b.n	8003762 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a0c      	ldr	r2, [pc, #48]	; (800378c <HAL_RCC_GetSysClockFreq+0xa4>)
 800375c:	fb02 f303 	mul.w	r3, r2, r3
 8003760:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	613b      	str	r3, [r7, #16]
      break;
 8003766:	e002      	b.n	800376e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003768:	4b05      	ldr	r3, [pc, #20]	; (8003780 <HAL_RCC_GetSysClockFreq+0x98>)
 800376a:	613b      	str	r3, [r7, #16]
      break;
 800376c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800376e:	693b      	ldr	r3, [r7, #16]
}
 8003770:	4618      	mov	r0, r3
 8003772:	371c      	adds	r7, #28
 8003774:	46bd      	mov	sp, r7
 8003776:	bc80      	pop	{r7}
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	40021000 	.word	0x40021000
 8003780:	007a1200 	.word	0x007a1200
 8003784:	08004bf0 	.word	0x08004bf0
 8003788:	08004c00 	.word	0x08004c00
 800378c:	003d0900 	.word	0x003d0900

08003790 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003790:	b480      	push	{r7}
 8003792:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003794:	4b02      	ldr	r3, [pc, #8]	; (80037a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003796:	681b      	ldr	r3, [r3, #0]
}
 8003798:	4618      	mov	r0, r3
 800379a:	46bd      	mov	sp, r7
 800379c:	bc80      	pop	{r7}
 800379e:	4770      	bx	lr
 80037a0:	20000054 	.word	0x20000054

080037a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80037a8:	f7ff fff2 	bl	8003790 <HAL_RCC_GetHCLKFreq>
 80037ac:	4602      	mov	r2, r0
 80037ae:	4b05      	ldr	r3, [pc, #20]	; (80037c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	0a1b      	lsrs	r3, r3, #8
 80037b4:	f003 0307 	and.w	r3, r3, #7
 80037b8:	4903      	ldr	r1, [pc, #12]	; (80037c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037ba:	5ccb      	ldrb	r3, [r1, r3]
 80037bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	40021000 	.word	0x40021000
 80037c8:	08004be8 	.word	0x08004be8

080037cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80037d0:	f7ff ffde 	bl	8003790 <HAL_RCC_GetHCLKFreq>
 80037d4:	4602      	mov	r2, r0
 80037d6:	4b05      	ldr	r3, [pc, #20]	; (80037ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	0adb      	lsrs	r3, r3, #11
 80037dc:	f003 0307 	and.w	r3, r3, #7
 80037e0:	4903      	ldr	r1, [pc, #12]	; (80037f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037e2:	5ccb      	ldrb	r3, [r1, r3]
 80037e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	40021000 	.word	0x40021000
 80037f0:	08004be8 	.word	0x08004be8

080037f4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80037fc:	4b0a      	ldr	r3, [pc, #40]	; (8003828 <RCC_Delay+0x34>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a0a      	ldr	r2, [pc, #40]	; (800382c <RCC_Delay+0x38>)
 8003802:	fba2 2303 	umull	r2, r3, r2, r3
 8003806:	0a5b      	lsrs	r3, r3, #9
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	fb02 f303 	mul.w	r3, r2, r3
 800380e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003810:	bf00      	nop
  }
  while (Delay --);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	1e5a      	subs	r2, r3, #1
 8003816:	60fa      	str	r2, [r7, #12]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d1f9      	bne.n	8003810 <RCC_Delay+0x1c>
}
 800381c:	bf00      	nop
 800381e:	bf00      	nop
 8003820:	3714      	adds	r7, #20
 8003822:	46bd      	mov	sp, r7
 8003824:	bc80      	pop	{r7}
 8003826:	4770      	bx	lr
 8003828:	20000054 	.word	0x20000054
 800382c:	10624dd3 	.word	0x10624dd3

08003830 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d101      	bne.n	8003842 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e041      	b.n	80038c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2b00      	cmp	r3, #0
 800384c:	d106      	bne.n	800385c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f7fe f9c4 	bl	8001be4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2202      	movs	r2, #2
 8003860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	3304      	adds	r3, #4
 800386c:	4619      	mov	r1, r3
 800386e:	4610      	mov	r0, r2
 8003870:	f000 fa5c 	bl	8003d2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3708      	adds	r7, #8
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
	...

080038d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b085      	sub	sp, #20
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d001      	beq.n	80038e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e03a      	b.n	800395e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2202      	movs	r2, #2
 80038ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68da      	ldr	r2, [r3, #12]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f042 0201 	orr.w	r2, r2, #1
 80038fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a18      	ldr	r2, [pc, #96]	; (8003968 <HAL_TIM_Base_Start_IT+0x98>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d00e      	beq.n	8003928 <HAL_TIM_Base_Start_IT+0x58>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003912:	d009      	beq.n	8003928 <HAL_TIM_Base_Start_IT+0x58>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a14      	ldr	r2, [pc, #80]	; (800396c <HAL_TIM_Base_Start_IT+0x9c>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d004      	beq.n	8003928 <HAL_TIM_Base_Start_IT+0x58>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a13      	ldr	r2, [pc, #76]	; (8003970 <HAL_TIM_Base_Start_IT+0xa0>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d111      	bne.n	800394c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f003 0307 	and.w	r3, r3, #7
 8003932:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2b06      	cmp	r3, #6
 8003938:	d010      	beq.n	800395c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f042 0201 	orr.w	r2, r2, #1
 8003948:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800394a:	e007      	b.n	800395c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f042 0201 	orr.w	r2, r2, #1
 800395a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3714      	adds	r7, #20
 8003962:	46bd      	mov	sp, r7
 8003964:	bc80      	pop	{r7}
 8003966:	4770      	bx	lr
 8003968:	40012c00 	.word	0x40012c00
 800396c:	40000400 	.word	0x40000400
 8003970:	40000800 	.word	0x40000800

08003974 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	f003 0302 	and.w	r3, r3, #2
 8003992:	2b00      	cmp	r3, #0
 8003994:	d020      	beq.n	80039d8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f003 0302 	and.w	r3, r3, #2
 800399c:	2b00      	cmp	r3, #0
 800399e:	d01b      	beq.n	80039d8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f06f 0202 	mvn.w	r2, #2
 80039a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2201      	movs	r2, #1
 80039ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	f003 0303 	and.w	r3, r3, #3
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d003      	beq.n	80039c6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 f998 	bl	8003cf4 <HAL_TIM_IC_CaptureCallback>
 80039c4:	e005      	b.n	80039d2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 f98b 	bl	8003ce2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f000 f99a 	bl	8003d06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	f003 0304 	and.w	r3, r3, #4
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d020      	beq.n	8003a24 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f003 0304 	and.w	r3, r3, #4
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d01b      	beq.n	8003a24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f06f 0204 	mvn.w	r2, #4
 80039f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2202      	movs	r2, #2
 80039fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	699b      	ldr	r3, [r3, #24]
 8003a02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d003      	beq.n	8003a12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 f972 	bl	8003cf4 <HAL_TIM_IC_CaptureCallback>
 8003a10:	e005      	b.n	8003a1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f000 f965 	bl	8003ce2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f000 f974 	bl	8003d06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	f003 0308 	and.w	r3, r3, #8
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d020      	beq.n	8003a70 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	f003 0308 	and.w	r3, r3, #8
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d01b      	beq.n	8003a70 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f06f 0208 	mvn.w	r2, #8
 8003a40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2204      	movs	r2, #4
 8003a46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	69db      	ldr	r3, [r3, #28]
 8003a4e:	f003 0303 	and.w	r3, r3, #3
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d003      	beq.n	8003a5e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 f94c 	bl	8003cf4 <HAL_TIM_IC_CaptureCallback>
 8003a5c:	e005      	b.n	8003a6a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 f93f 	bl	8003ce2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f000 f94e 	bl	8003d06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	f003 0310 	and.w	r3, r3, #16
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d020      	beq.n	8003abc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f003 0310 	and.w	r3, r3, #16
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d01b      	beq.n	8003abc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f06f 0210 	mvn.w	r2, #16
 8003a8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2208      	movs	r2, #8
 8003a92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	69db      	ldr	r3, [r3, #28]
 8003a9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d003      	beq.n	8003aaa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 f926 	bl	8003cf4 <HAL_TIM_IC_CaptureCallback>
 8003aa8:	e005      	b.n	8003ab6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 f919 	bl	8003ce2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f000 f928 	bl	8003d06 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	f003 0301 	and.w	r3, r3, #1
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d00c      	beq.n	8003ae0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f003 0301 	and.w	r3, r3, #1
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d007      	beq.n	8003ae0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f06f 0201 	mvn.w	r2, #1
 8003ad8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f7fd fe56 	bl	800178c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00c      	beq.n	8003b04 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d007      	beq.n	8003b04 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003afc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 fa7f 	bl	8004002 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00c      	beq.n	8003b28 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d007      	beq.n	8003b28 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 f8f8 	bl	8003d18 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	f003 0320 	and.w	r3, r3, #32
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d00c      	beq.n	8003b4c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f003 0320 	and.w	r3, r3, #32
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d007      	beq.n	8003b4c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f06f 0220 	mvn.w	r2, #32
 8003b44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 fa52 	bl	8003ff0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b4c:	bf00      	nop
 8003b4e:	3710      	adds	r7, #16
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b084      	sub	sp, #16
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d101      	bne.n	8003b70 <HAL_TIM_ConfigClockSource+0x1c>
 8003b6c:	2302      	movs	r3, #2
 8003b6e:	e0b4      	b.n	8003cda <HAL_TIM_ConfigClockSource+0x186>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2202      	movs	r2, #2
 8003b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68ba      	ldr	r2, [r7, #8]
 8003b9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ba8:	d03e      	beq.n	8003c28 <HAL_TIM_ConfigClockSource+0xd4>
 8003baa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bae:	f200 8087 	bhi.w	8003cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8003bb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bb6:	f000 8086 	beq.w	8003cc6 <HAL_TIM_ConfigClockSource+0x172>
 8003bba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bbe:	d87f      	bhi.n	8003cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8003bc0:	2b70      	cmp	r3, #112	; 0x70
 8003bc2:	d01a      	beq.n	8003bfa <HAL_TIM_ConfigClockSource+0xa6>
 8003bc4:	2b70      	cmp	r3, #112	; 0x70
 8003bc6:	d87b      	bhi.n	8003cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8003bc8:	2b60      	cmp	r3, #96	; 0x60
 8003bca:	d050      	beq.n	8003c6e <HAL_TIM_ConfigClockSource+0x11a>
 8003bcc:	2b60      	cmp	r3, #96	; 0x60
 8003bce:	d877      	bhi.n	8003cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8003bd0:	2b50      	cmp	r3, #80	; 0x50
 8003bd2:	d03c      	beq.n	8003c4e <HAL_TIM_ConfigClockSource+0xfa>
 8003bd4:	2b50      	cmp	r3, #80	; 0x50
 8003bd6:	d873      	bhi.n	8003cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8003bd8:	2b40      	cmp	r3, #64	; 0x40
 8003bda:	d058      	beq.n	8003c8e <HAL_TIM_ConfigClockSource+0x13a>
 8003bdc:	2b40      	cmp	r3, #64	; 0x40
 8003bde:	d86f      	bhi.n	8003cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8003be0:	2b30      	cmp	r3, #48	; 0x30
 8003be2:	d064      	beq.n	8003cae <HAL_TIM_ConfigClockSource+0x15a>
 8003be4:	2b30      	cmp	r3, #48	; 0x30
 8003be6:	d86b      	bhi.n	8003cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8003be8:	2b20      	cmp	r3, #32
 8003bea:	d060      	beq.n	8003cae <HAL_TIM_ConfigClockSource+0x15a>
 8003bec:	2b20      	cmp	r3, #32
 8003bee:	d867      	bhi.n	8003cc0 <HAL_TIM_ConfigClockSource+0x16c>
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d05c      	beq.n	8003cae <HAL_TIM_ConfigClockSource+0x15a>
 8003bf4:	2b10      	cmp	r3, #16
 8003bf6:	d05a      	beq.n	8003cae <HAL_TIM_ConfigClockSource+0x15a>
 8003bf8:	e062      	b.n	8003cc0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6818      	ldr	r0, [r3, #0]
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	6899      	ldr	r1, [r3, #8]
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	685a      	ldr	r2, [r3, #4]
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	f000 f974 	bl	8003ef6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003c1c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	68ba      	ldr	r2, [r7, #8]
 8003c24:	609a      	str	r2, [r3, #8]
      break;
 8003c26:	e04f      	b.n	8003cc8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6818      	ldr	r0, [r3, #0]
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	6899      	ldr	r1, [r3, #8]
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	685a      	ldr	r2, [r3, #4]
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	f000 f95d 	bl	8003ef6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	689a      	ldr	r2, [r3, #8]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c4a:	609a      	str	r2, [r3, #8]
      break;
 8003c4c:	e03c      	b.n	8003cc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6818      	ldr	r0, [r3, #0]
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	6859      	ldr	r1, [r3, #4]
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	f000 f8d4 	bl	8003e08 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2150      	movs	r1, #80	; 0x50
 8003c66:	4618      	mov	r0, r3
 8003c68:	f000 f92b 	bl	8003ec2 <TIM_ITRx_SetConfig>
      break;
 8003c6c:	e02c      	b.n	8003cc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6818      	ldr	r0, [r3, #0]
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	6859      	ldr	r1, [r3, #4]
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	f000 f8f2 	bl	8003e64 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2160      	movs	r1, #96	; 0x60
 8003c86:	4618      	mov	r0, r3
 8003c88:	f000 f91b 	bl	8003ec2 <TIM_ITRx_SetConfig>
      break;
 8003c8c:	e01c      	b.n	8003cc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6818      	ldr	r0, [r3, #0]
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	6859      	ldr	r1, [r3, #4]
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	f000 f8b4 	bl	8003e08 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2140      	movs	r1, #64	; 0x40
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f000 f90b 	bl	8003ec2 <TIM_ITRx_SetConfig>
      break;
 8003cac:	e00c      	b.n	8003cc8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	4610      	mov	r0, r2
 8003cba:	f000 f902 	bl	8003ec2 <TIM_ITRx_SetConfig>
      break;
 8003cbe:	e003      	b.n	8003cc8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	73fb      	strb	r3, [r7, #15]
      break;
 8003cc4:	e000      	b.n	8003cc8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003cc6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3710      	adds	r7, #16
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ce2:	b480      	push	{r7}
 8003ce4:	b083      	sub	sp, #12
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003cea:	bf00      	nop
 8003cec:	370c      	adds	r7, #12
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bc80      	pop	{r7}
 8003cf2:	4770      	bx	lr

08003cf4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003cfc:	bf00      	nop
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bc80      	pop	{r7}
 8003d04:	4770      	bx	lr

08003d06 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003d06:	b480      	push	{r7}
 8003d08:	b083      	sub	sp, #12
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003d0e:	bf00      	nop
 8003d10:	370c      	adds	r7, #12
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bc80      	pop	{r7}
 8003d16:	4770      	bx	lr

08003d18 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d20:	bf00      	nop
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bc80      	pop	{r7}
 8003d28:	4770      	bx	lr
	...

08003d2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b085      	sub	sp, #20
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	4a2f      	ldr	r2, [pc, #188]	; (8003dfc <TIM_Base_SetConfig+0xd0>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d00b      	beq.n	8003d5c <TIM_Base_SetConfig+0x30>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d4a:	d007      	beq.n	8003d5c <TIM_Base_SetConfig+0x30>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	4a2c      	ldr	r2, [pc, #176]	; (8003e00 <TIM_Base_SetConfig+0xd4>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d003      	beq.n	8003d5c <TIM_Base_SetConfig+0x30>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	4a2b      	ldr	r2, [pc, #172]	; (8003e04 <TIM_Base_SetConfig+0xd8>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d108      	bne.n	8003d6e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a22      	ldr	r2, [pc, #136]	; (8003dfc <TIM_Base_SetConfig+0xd0>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d00b      	beq.n	8003d8e <TIM_Base_SetConfig+0x62>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d7c:	d007      	beq.n	8003d8e <TIM_Base_SetConfig+0x62>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a1f      	ldr	r2, [pc, #124]	; (8003e00 <TIM_Base_SetConfig+0xd4>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d003      	beq.n	8003d8e <TIM_Base_SetConfig+0x62>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a1e      	ldr	r2, [pc, #120]	; (8003e04 <TIM_Base_SetConfig+0xd8>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d108      	bne.n	8003da0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	695b      	ldr	r3, [r3, #20]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	68fa      	ldr	r2, [r7, #12]
 8003db2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	689a      	ldr	r2, [r3, #8]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4a0d      	ldr	r2, [pc, #52]	; (8003dfc <TIM_Base_SetConfig+0xd0>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d103      	bne.n	8003dd4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	691a      	ldr	r2, [r3, #16]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	f003 0301 	and.w	r3, r3, #1
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d005      	beq.n	8003df2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	f023 0201 	bic.w	r2, r3, #1
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	611a      	str	r2, [r3, #16]
  }
}
 8003df2:	bf00      	nop
 8003df4:	3714      	adds	r7, #20
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bc80      	pop	{r7}
 8003dfa:	4770      	bx	lr
 8003dfc:	40012c00 	.word	0x40012c00
 8003e00:	40000400 	.word	0x40000400
 8003e04:	40000800 	.word	0x40000800

08003e08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b087      	sub	sp, #28
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6a1b      	ldr	r3, [r3, #32]
 8003e18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6a1b      	ldr	r3, [r3, #32]
 8003e1e:	f023 0201 	bic.w	r2, r3, #1
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	011b      	lsls	r3, r3, #4
 8003e38:	693a      	ldr	r2, [r7, #16]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	f023 030a 	bic.w	r3, r3, #10
 8003e44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e46:	697a      	ldr	r2, [r7, #20]
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	693a      	ldr	r2, [r7, #16]
 8003e52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	697a      	ldr	r2, [r7, #20]
 8003e58:	621a      	str	r2, [r3, #32]
}
 8003e5a:	bf00      	nop
 8003e5c:	371c      	adds	r7, #28
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bc80      	pop	{r7}
 8003e62:	4770      	bx	lr

08003e64 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b087      	sub	sp, #28
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	60f8      	str	r0, [r7, #12]
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6a1b      	ldr	r3, [r3, #32]
 8003e74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6a1b      	ldr	r3, [r3, #32]
 8003e7a:	f023 0210 	bic.w	r2, r3, #16
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	699b      	ldr	r3, [r3, #24]
 8003e86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	031b      	lsls	r3, r3, #12
 8003e94:	693a      	ldr	r2, [r7, #16]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003ea0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	011b      	lsls	r3, r3, #4
 8003ea6:	697a      	ldr	r2, [r7, #20]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	693a      	ldr	r2, [r7, #16]
 8003eb0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	697a      	ldr	r2, [r7, #20]
 8003eb6:	621a      	str	r2, [r3, #32]
}
 8003eb8:	bf00      	nop
 8003eba:	371c      	adds	r7, #28
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bc80      	pop	{r7}
 8003ec0:	4770      	bx	lr

08003ec2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ec2:	b480      	push	{r7}
 8003ec4:	b085      	sub	sp, #20
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
 8003eca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ed8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003eda:	683a      	ldr	r2, [r7, #0]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	f043 0307 	orr.w	r3, r3, #7
 8003ee4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	68fa      	ldr	r2, [r7, #12]
 8003eea:	609a      	str	r2, [r3, #8]
}
 8003eec:	bf00      	nop
 8003eee:	3714      	adds	r7, #20
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bc80      	pop	{r7}
 8003ef4:	4770      	bx	lr

08003ef6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ef6:	b480      	push	{r7}
 8003ef8:	b087      	sub	sp, #28
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	60f8      	str	r0, [r7, #12]
 8003efe:	60b9      	str	r1, [r7, #8]
 8003f00:	607a      	str	r2, [r7, #4]
 8003f02:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f10:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	021a      	lsls	r2, r3, #8
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	431a      	orrs	r2, r3
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	697a      	ldr	r2, [r7, #20]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	697a      	ldr	r2, [r7, #20]
 8003f28:	609a      	str	r2, [r3, #8]
}
 8003f2a:	bf00      	nop
 8003f2c:	371c      	adds	r7, #28
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bc80      	pop	{r7}
 8003f32:	4770      	bx	lr

08003f34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b085      	sub	sp, #20
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d101      	bne.n	8003f4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f48:	2302      	movs	r3, #2
 8003f4a:	e046      	b.n	8003fda <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2202      	movs	r2, #2
 8003f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	68fa      	ldr	r2, [r7, #12]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68fa      	ldr	r2, [r7, #12]
 8003f84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a16      	ldr	r2, [pc, #88]	; (8003fe4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d00e      	beq.n	8003fae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f98:	d009      	beq.n	8003fae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a12      	ldr	r2, [pc, #72]	; (8003fe8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d004      	beq.n	8003fae <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a10      	ldr	r2, [pc, #64]	; (8003fec <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d10c      	bne.n	8003fc8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fb4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	68ba      	ldr	r2, [r7, #8]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	68ba      	ldr	r2, [r7, #8]
 8003fc6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3714      	adds	r7, #20
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bc80      	pop	{r7}
 8003fe2:	4770      	bx	lr
 8003fe4:	40012c00 	.word	0x40012c00
 8003fe8:	40000400 	.word	0x40000400
 8003fec:	40000800 	.word	0x40000800

08003ff0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ff8:	bf00      	nop
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bc80      	pop	{r7}
 8004000:	4770      	bx	lr

08004002 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004002:	b480      	push	{r7}
 8004004:	b083      	sub	sp, #12
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800400a:	bf00      	nop
 800400c:	370c      	adds	r7, #12
 800400e:	46bd      	mov	sp, r7
 8004010:	bc80      	pop	{r7}
 8004012:	4770      	bx	lr

08004014 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d101      	bne.n	8004026 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e042      	b.n	80040ac <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800402c:	b2db      	uxtb	r3, r3
 800402e:	2b00      	cmp	r3, #0
 8004030:	d106      	bne.n	8004040 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f7fd fdf6 	bl	8001c2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2224      	movs	r2, #36	; 0x24
 8004044:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68da      	ldr	r2, [r3, #12]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004056:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f000 f82b 	bl	80040b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	691a      	ldr	r2, [r3, #16]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800406c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	695a      	ldr	r2, [r3, #20]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800407c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	68da      	ldr	r2, [r3, #12]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800408c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2220      	movs	r2, #32
 8004098:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2220      	movs	r2, #32
 80040a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80040aa:	2300      	movs	r3, #0
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3708      	adds	r7, #8
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	691b      	ldr	r3, [r3, #16]
 80040c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	68da      	ldr	r2, [r3, #12]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	430a      	orrs	r2, r1
 80040d0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	689a      	ldr	r2, [r3, #8]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	431a      	orrs	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	695b      	ldr	r3, [r3, #20]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80040ee:	f023 030c 	bic.w	r3, r3, #12
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	6812      	ldr	r2, [r2, #0]
 80040f6:	68b9      	ldr	r1, [r7, #8]
 80040f8:	430b      	orrs	r3, r1
 80040fa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	695b      	ldr	r3, [r3, #20]
 8004102:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	699a      	ldr	r2, [r3, #24]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	430a      	orrs	r2, r1
 8004110:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a2c      	ldr	r2, [pc, #176]	; (80041c8 <UART_SetConfig+0x114>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d103      	bne.n	8004124 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800411c:	f7ff fb56 	bl	80037cc <HAL_RCC_GetPCLK2Freq>
 8004120:	60f8      	str	r0, [r7, #12]
 8004122:	e002      	b.n	800412a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004124:	f7ff fb3e 	bl	80037a4 <HAL_RCC_GetPCLK1Freq>
 8004128:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	4613      	mov	r3, r2
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	4413      	add	r3, r2
 8004132:	009a      	lsls	r2, r3, #2
 8004134:	441a      	add	r2, r3
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004140:	4a22      	ldr	r2, [pc, #136]	; (80041cc <UART_SetConfig+0x118>)
 8004142:	fba2 2303 	umull	r2, r3, r2, r3
 8004146:	095b      	lsrs	r3, r3, #5
 8004148:	0119      	lsls	r1, r3, #4
 800414a:	68fa      	ldr	r2, [r7, #12]
 800414c:	4613      	mov	r3, r2
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	4413      	add	r3, r2
 8004152:	009a      	lsls	r2, r3, #2
 8004154:	441a      	add	r2, r3
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004160:	4b1a      	ldr	r3, [pc, #104]	; (80041cc <UART_SetConfig+0x118>)
 8004162:	fba3 0302 	umull	r0, r3, r3, r2
 8004166:	095b      	lsrs	r3, r3, #5
 8004168:	2064      	movs	r0, #100	; 0x64
 800416a:	fb00 f303 	mul.w	r3, r0, r3
 800416e:	1ad3      	subs	r3, r2, r3
 8004170:	011b      	lsls	r3, r3, #4
 8004172:	3332      	adds	r3, #50	; 0x32
 8004174:	4a15      	ldr	r2, [pc, #84]	; (80041cc <UART_SetConfig+0x118>)
 8004176:	fba2 2303 	umull	r2, r3, r2, r3
 800417a:	095b      	lsrs	r3, r3, #5
 800417c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004180:	4419      	add	r1, r3
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	4613      	mov	r3, r2
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	4413      	add	r3, r2
 800418a:	009a      	lsls	r2, r3, #2
 800418c:	441a      	add	r2, r3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	fbb2 f2f3 	udiv	r2, r2, r3
 8004198:	4b0c      	ldr	r3, [pc, #48]	; (80041cc <UART_SetConfig+0x118>)
 800419a:	fba3 0302 	umull	r0, r3, r3, r2
 800419e:	095b      	lsrs	r3, r3, #5
 80041a0:	2064      	movs	r0, #100	; 0x64
 80041a2:	fb00 f303 	mul.w	r3, r0, r3
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	011b      	lsls	r3, r3, #4
 80041aa:	3332      	adds	r3, #50	; 0x32
 80041ac:	4a07      	ldr	r2, [pc, #28]	; (80041cc <UART_SetConfig+0x118>)
 80041ae:	fba2 2303 	umull	r2, r3, r2, r3
 80041b2:	095b      	lsrs	r3, r3, #5
 80041b4:	f003 020f 	and.w	r2, r3, #15
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	440a      	add	r2, r1
 80041be:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80041c0:	bf00      	nop
 80041c2:	3710      	adds	r7, #16
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	40013800 	.word	0x40013800
 80041cc:	51eb851f 	.word	0x51eb851f

080041d0 <__errno>:
 80041d0:	4b01      	ldr	r3, [pc, #4]	; (80041d8 <__errno+0x8>)
 80041d2:	6818      	ldr	r0, [r3, #0]
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	20000060 	.word	0x20000060

080041dc <__libc_init_array>:
 80041dc:	b570      	push	{r4, r5, r6, lr}
 80041de:	2600      	movs	r6, #0
 80041e0:	4d0c      	ldr	r5, [pc, #48]	; (8004214 <__libc_init_array+0x38>)
 80041e2:	4c0d      	ldr	r4, [pc, #52]	; (8004218 <__libc_init_array+0x3c>)
 80041e4:	1b64      	subs	r4, r4, r5
 80041e6:	10a4      	asrs	r4, r4, #2
 80041e8:	42a6      	cmp	r6, r4
 80041ea:	d109      	bne.n	8004200 <__libc_init_array+0x24>
 80041ec:	f000 fc5c 	bl	8004aa8 <_init>
 80041f0:	2600      	movs	r6, #0
 80041f2:	4d0a      	ldr	r5, [pc, #40]	; (800421c <__libc_init_array+0x40>)
 80041f4:	4c0a      	ldr	r4, [pc, #40]	; (8004220 <__libc_init_array+0x44>)
 80041f6:	1b64      	subs	r4, r4, r5
 80041f8:	10a4      	asrs	r4, r4, #2
 80041fa:	42a6      	cmp	r6, r4
 80041fc:	d105      	bne.n	800420a <__libc_init_array+0x2e>
 80041fe:	bd70      	pop	{r4, r5, r6, pc}
 8004200:	f855 3b04 	ldr.w	r3, [r5], #4
 8004204:	4798      	blx	r3
 8004206:	3601      	adds	r6, #1
 8004208:	e7ee      	b.n	80041e8 <__libc_init_array+0xc>
 800420a:	f855 3b04 	ldr.w	r3, [r5], #4
 800420e:	4798      	blx	r3
 8004210:	3601      	adds	r6, #1
 8004212:	e7f2      	b.n	80041fa <__libc_init_array+0x1e>
 8004214:	08004c38 	.word	0x08004c38
 8004218:	08004c38 	.word	0x08004c38
 800421c:	08004c38 	.word	0x08004c38
 8004220:	08004c3c 	.word	0x08004c3c

08004224 <memset>:
 8004224:	4603      	mov	r3, r0
 8004226:	4402      	add	r2, r0
 8004228:	4293      	cmp	r3, r2
 800422a:	d100      	bne.n	800422e <memset+0xa>
 800422c:	4770      	bx	lr
 800422e:	f803 1b01 	strb.w	r1, [r3], #1
 8004232:	e7f9      	b.n	8004228 <memset+0x4>

08004234 <_free_r>:
 8004234:	b538      	push	{r3, r4, r5, lr}
 8004236:	4605      	mov	r5, r0
 8004238:	2900      	cmp	r1, #0
 800423a:	d043      	beq.n	80042c4 <_free_r+0x90>
 800423c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004240:	1f0c      	subs	r4, r1, #4
 8004242:	2b00      	cmp	r3, #0
 8004244:	bfb8      	it	lt
 8004246:	18e4      	addlt	r4, r4, r3
 8004248:	f000 f8ca 	bl	80043e0 <__malloc_lock>
 800424c:	4a1e      	ldr	r2, [pc, #120]	; (80042c8 <_free_r+0x94>)
 800424e:	6813      	ldr	r3, [r2, #0]
 8004250:	4610      	mov	r0, r2
 8004252:	b933      	cbnz	r3, 8004262 <_free_r+0x2e>
 8004254:	6063      	str	r3, [r4, #4]
 8004256:	6014      	str	r4, [r2, #0]
 8004258:	4628      	mov	r0, r5
 800425a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800425e:	f000 b8c5 	b.w	80043ec <__malloc_unlock>
 8004262:	42a3      	cmp	r3, r4
 8004264:	d90a      	bls.n	800427c <_free_r+0x48>
 8004266:	6821      	ldr	r1, [r4, #0]
 8004268:	1862      	adds	r2, r4, r1
 800426a:	4293      	cmp	r3, r2
 800426c:	bf01      	itttt	eq
 800426e:	681a      	ldreq	r2, [r3, #0]
 8004270:	685b      	ldreq	r3, [r3, #4]
 8004272:	1852      	addeq	r2, r2, r1
 8004274:	6022      	streq	r2, [r4, #0]
 8004276:	6063      	str	r3, [r4, #4]
 8004278:	6004      	str	r4, [r0, #0]
 800427a:	e7ed      	b.n	8004258 <_free_r+0x24>
 800427c:	461a      	mov	r2, r3
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	b10b      	cbz	r3, 8004286 <_free_r+0x52>
 8004282:	42a3      	cmp	r3, r4
 8004284:	d9fa      	bls.n	800427c <_free_r+0x48>
 8004286:	6811      	ldr	r1, [r2, #0]
 8004288:	1850      	adds	r0, r2, r1
 800428a:	42a0      	cmp	r0, r4
 800428c:	d10b      	bne.n	80042a6 <_free_r+0x72>
 800428e:	6820      	ldr	r0, [r4, #0]
 8004290:	4401      	add	r1, r0
 8004292:	1850      	adds	r0, r2, r1
 8004294:	4283      	cmp	r3, r0
 8004296:	6011      	str	r1, [r2, #0]
 8004298:	d1de      	bne.n	8004258 <_free_r+0x24>
 800429a:	6818      	ldr	r0, [r3, #0]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	4401      	add	r1, r0
 80042a0:	6011      	str	r1, [r2, #0]
 80042a2:	6053      	str	r3, [r2, #4]
 80042a4:	e7d8      	b.n	8004258 <_free_r+0x24>
 80042a6:	d902      	bls.n	80042ae <_free_r+0x7a>
 80042a8:	230c      	movs	r3, #12
 80042aa:	602b      	str	r3, [r5, #0]
 80042ac:	e7d4      	b.n	8004258 <_free_r+0x24>
 80042ae:	6820      	ldr	r0, [r4, #0]
 80042b0:	1821      	adds	r1, r4, r0
 80042b2:	428b      	cmp	r3, r1
 80042b4:	bf01      	itttt	eq
 80042b6:	6819      	ldreq	r1, [r3, #0]
 80042b8:	685b      	ldreq	r3, [r3, #4]
 80042ba:	1809      	addeq	r1, r1, r0
 80042bc:	6021      	streq	r1, [r4, #0]
 80042be:	6063      	str	r3, [r4, #4]
 80042c0:	6054      	str	r4, [r2, #4]
 80042c2:	e7c9      	b.n	8004258 <_free_r+0x24>
 80042c4:	bd38      	pop	{r3, r4, r5, pc}
 80042c6:	bf00      	nop
 80042c8:	200000f4 	.word	0x200000f4

080042cc <_malloc_r>:
 80042cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ce:	1ccd      	adds	r5, r1, #3
 80042d0:	f025 0503 	bic.w	r5, r5, #3
 80042d4:	3508      	adds	r5, #8
 80042d6:	2d0c      	cmp	r5, #12
 80042d8:	bf38      	it	cc
 80042da:	250c      	movcc	r5, #12
 80042dc:	2d00      	cmp	r5, #0
 80042de:	4606      	mov	r6, r0
 80042e0:	db01      	blt.n	80042e6 <_malloc_r+0x1a>
 80042e2:	42a9      	cmp	r1, r5
 80042e4:	d903      	bls.n	80042ee <_malloc_r+0x22>
 80042e6:	230c      	movs	r3, #12
 80042e8:	6033      	str	r3, [r6, #0]
 80042ea:	2000      	movs	r0, #0
 80042ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042ee:	f000 f877 	bl	80043e0 <__malloc_lock>
 80042f2:	4921      	ldr	r1, [pc, #132]	; (8004378 <_malloc_r+0xac>)
 80042f4:	680a      	ldr	r2, [r1, #0]
 80042f6:	4614      	mov	r4, r2
 80042f8:	b99c      	cbnz	r4, 8004322 <_malloc_r+0x56>
 80042fa:	4f20      	ldr	r7, [pc, #128]	; (800437c <_malloc_r+0xb0>)
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	b923      	cbnz	r3, 800430a <_malloc_r+0x3e>
 8004300:	4621      	mov	r1, r4
 8004302:	4630      	mov	r0, r6
 8004304:	f000 f83c 	bl	8004380 <_sbrk_r>
 8004308:	6038      	str	r0, [r7, #0]
 800430a:	4629      	mov	r1, r5
 800430c:	4630      	mov	r0, r6
 800430e:	f000 f837 	bl	8004380 <_sbrk_r>
 8004312:	1c43      	adds	r3, r0, #1
 8004314:	d123      	bne.n	800435e <_malloc_r+0x92>
 8004316:	230c      	movs	r3, #12
 8004318:	4630      	mov	r0, r6
 800431a:	6033      	str	r3, [r6, #0]
 800431c:	f000 f866 	bl	80043ec <__malloc_unlock>
 8004320:	e7e3      	b.n	80042ea <_malloc_r+0x1e>
 8004322:	6823      	ldr	r3, [r4, #0]
 8004324:	1b5b      	subs	r3, r3, r5
 8004326:	d417      	bmi.n	8004358 <_malloc_r+0x8c>
 8004328:	2b0b      	cmp	r3, #11
 800432a:	d903      	bls.n	8004334 <_malloc_r+0x68>
 800432c:	6023      	str	r3, [r4, #0]
 800432e:	441c      	add	r4, r3
 8004330:	6025      	str	r5, [r4, #0]
 8004332:	e004      	b.n	800433e <_malloc_r+0x72>
 8004334:	6863      	ldr	r3, [r4, #4]
 8004336:	42a2      	cmp	r2, r4
 8004338:	bf0c      	ite	eq
 800433a:	600b      	streq	r3, [r1, #0]
 800433c:	6053      	strne	r3, [r2, #4]
 800433e:	4630      	mov	r0, r6
 8004340:	f000 f854 	bl	80043ec <__malloc_unlock>
 8004344:	f104 000b 	add.w	r0, r4, #11
 8004348:	1d23      	adds	r3, r4, #4
 800434a:	f020 0007 	bic.w	r0, r0, #7
 800434e:	1ac2      	subs	r2, r0, r3
 8004350:	d0cc      	beq.n	80042ec <_malloc_r+0x20>
 8004352:	1a1b      	subs	r3, r3, r0
 8004354:	50a3      	str	r3, [r4, r2]
 8004356:	e7c9      	b.n	80042ec <_malloc_r+0x20>
 8004358:	4622      	mov	r2, r4
 800435a:	6864      	ldr	r4, [r4, #4]
 800435c:	e7cc      	b.n	80042f8 <_malloc_r+0x2c>
 800435e:	1cc4      	adds	r4, r0, #3
 8004360:	f024 0403 	bic.w	r4, r4, #3
 8004364:	42a0      	cmp	r0, r4
 8004366:	d0e3      	beq.n	8004330 <_malloc_r+0x64>
 8004368:	1a21      	subs	r1, r4, r0
 800436a:	4630      	mov	r0, r6
 800436c:	f000 f808 	bl	8004380 <_sbrk_r>
 8004370:	3001      	adds	r0, #1
 8004372:	d1dd      	bne.n	8004330 <_malloc_r+0x64>
 8004374:	e7cf      	b.n	8004316 <_malloc_r+0x4a>
 8004376:	bf00      	nop
 8004378:	200000f4 	.word	0x200000f4
 800437c:	200000f8 	.word	0x200000f8

08004380 <_sbrk_r>:
 8004380:	b538      	push	{r3, r4, r5, lr}
 8004382:	2300      	movs	r3, #0
 8004384:	4d05      	ldr	r5, [pc, #20]	; (800439c <_sbrk_r+0x1c>)
 8004386:	4604      	mov	r4, r0
 8004388:	4608      	mov	r0, r1
 800438a:	602b      	str	r3, [r5, #0]
 800438c:	f7fd fcc6 	bl	8001d1c <_sbrk>
 8004390:	1c43      	adds	r3, r0, #1
 8004392:	d102      	bne.n	800439a <_sbrk_r+0x1a>
 8004394:	682b      	ldr	r3, [r5, #0]
 8004396:	b103      	cbz	r3, 800439a <_sbrk_r+0x1a>
 8004398:	6023      	str	r3, [r4, #0]
 800439a:	bd38      	pop	{r3, r4, r5, pc}
 800439c:	200002dc 	.word	0x200002dc

080043a0 <siprintf>:
 80043a0:	b40e      	push	{r1, r2, r3}
 80043a2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80043a6:	b500      	push	{lr}
 80043a8:	b09c      	sub	sp, #112	; 0x70
 80043aa:	ab1d      	add	r3, sp, #116	; 0x74
 80043ac:	9002      	str	r0, [sp, #8]
 80043ae:	9006      	str	r0, [sp, #24]
 80043b0:	9107      	str	r1, [sp, #28]
 80043b2:	9104      	str	r1, [sp, #16]
 80043b4:	4808      	ldr	r0, [pc, #32]	; (80043d8 <siprintf+0x38>)
 80043b6:	4909      	ldr	r1, [pc, #36]	; (80043dc <siprintf+0x3c>)
 80043b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80043bc:	9105      	str	r1, [sp, #20]
 80043be:	6800      	ldr	r0, [r0, #0]
 80043c0:	a902      	add	r1, sp, #8
 80043c2:	9301      	str	r3, [sp, #4]
 80043c4:	f000 f874 	bl	80044b0 <_svfiprintf_r>
 80043c8:	2200      	movs	r2, #0
 80043ca:	9b02      	ldr	r3, [sp, #8]
 80043cc:	701a      	strb	r2, [r3, #0]
 80043ce:	b01c      	add	sp, #112	; 0x70
 80043d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80043d4:	b003      	add	sp, #12
 80043d6:	4770      	bx	lr
 80043d8:	20000060 	.word	0x20000060
 80043dc:	ffff0208 	.word	0xffff0208

080043e0 <__malloc_lock>:
 80043e0:	4801      	ldr	r0, [pc, #4]	; (80043e8 <__malloc_lock+0x8>)
 80043e2:	f000 bafb 	b.w	80049dc <__retarget_lock_acquire_recursive>
 80043e6:	bf00      	nop
 80043e8:	200002e4 	.word	0x200002e4

080043ec <__malloc_unlock>:
 80043ec:	4801      	ldr	r0, [pc, #4]	; (80043f4 <__malloc_unlock+0x8>)
 80043ee:	f000 baf6 	b.w	80049de <__retarget_lock_release_recursive>
 80043f2:	bf00      	nop
 80043f4:	200002e4 	.word	0x200002e4

080043f8 <__ssputs_r>:
 80043f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043fc:	688e      	ldr	r6, [r1, #8]
 80043fe:	4682      	mov	sl, r0
 8004400:	429e      	cmp	r6, r3
 8004402:	460c      	mov	r4, r1
 8004404:	4690      	mov	r8, r2
 8004406:	461f      	mov	r7, r3
 8004408:	d838      	bhi.n	800447c <__ssputs_r+0x84>
 800440a:	898a      	ldrh	r2, [r1, #12]
 800440c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004410:	d032      	beq.n	8004478 <__ssputs_r+0x80>
 8004412:	6825      	ldr	r5, [r4, #0]
 8004414:	6909      	ldr	r1, [r1, #16]
 8004416:	3301      	adds	r3, #1
 8004418:	eba5 0901 	sub.w	r9, r5, r1
 800441c:	6965      	ldr	r5, [r4, #20]
 800441e:	444b      	add	r3, r9
 8004420:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004424:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004428:	106d      	asrs	r5, r5, #1
 800442a:	429d      	cmp	r5, r3
 800442c:	bf38      	it	cc
 800442e:	461d      	movcc	r5, r3
 8004430:	0553      	lsls	r3, r2, #21
 8004432:	d531      	bpl.n	8004498 <__ssputs_r+0xa0>
 8004434:	4629      	mov	r1, r5
 8004436:	f7ff ff49 	bl	80042cc <_malloc_r>
 800443a:	4606      	mov	r6, r0
 800443c:	b950      	cbnz	r0, 8004454 <__ssputs_r+0x5c>
 800443e:	230c      	movs	r3, #12
 8004440:	f04f 30ff 	mov.w	r0, #4294967295
 8004444:	f8ca 3000 	str.w	r3, [sl]
 8004448:	89a3      	ldrh	r3, [r4, #12]
 800444a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800444e:	81a3      	strh	r3, [r4, #12]
 8004450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004454:	464a      	mov	r2, r9
 8004456:	6921      	ldr	r1, [r4, #16]
 8004458:	f000 fad0 	bl	80049fc <memcpy>
 800445c:	89a3      	ldrh	r3, [r4, #12]
 800445e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004462:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004466:	81a3      	strh	r3, [r4, #12]
 8004468:	6126      	str	r6, [r4, #16]
 800446a:	444e      	add	r6, r9
 800446c:	6026      	str	r6, [r4, #0]
 800446e:	463e      	mov	r6, r7
 8004470:	6165      	str	r5, [r4, #20]
 8004472:	eba5 0509 	sub.w	r5, r5, r9
 8004476:	60a5      	str	r5, [r4, #8]
 8004478:	42be      	cmp	r6, r7
 800447a:	d900      	bls.n	800447e <__ssputs_r+0x86>
 800447c:	463e      	mov	r6, r7
 800447e:	4632      	mov	r2, r6
 8004480:	4641      	mov	r1, r8
 8004482:	6820      	ldr	r0, [r4, #0]
 8004484:	f000 fac8 	bl	8004a18 <memmove>
 8004488:	68a3      	ldr	r3, [r4, #8]
 800448a:	6822      	ldr	r2, [r4, #0]
 800448c:	1b9b      	subs	r3, r3, r6
 800448e:	4432      	add	r2, r6
 8004490:	2000      	movs	r0, #0
 8004492:	60a3      	str	r3, [r4, #8]
 8004494:	6022      	str	r2, [r4, #0]
 8004496:	e7db      	b.n	8004450 <__ssputs_r+0x58>
 8004498:	462a      	mov	r2, r5
 800449a:	f000 fad7 	bl	8004a4c <_realloc_r>
 800449e:	4606      	mov	r6, r0
 80044a0:	2800      	cmp	r0, #0
 80044a2:	d1e1      	bne.n	8004468 <__ssputs_r+0x70>
 80044a4:	4650      	mov	r0, sl
 80044a6:	6921      	ldr	r1, [r4, #16]
 80044a8:	f7ff fec4 	bl	8004234 <_free_r>
 80044ac:	e7c7      	b.n	800443e <__ssputs_r+0x46>
	...

080044b0 <_svfiprintf_r>:
 80044b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044b4:	4698      	mov	r8, r3
 80044b6:	898b      	ldrh	r3, [r1, #12]
 80044b8:	4607      	mov	r7, r0
 80044ba:	061b      	lsls	r3, r3, #24
 80044bc:	460d      	mov	r5, r1
 80044be:	4614      	mov	r4, r2
 80044c0:	b09d      	sub	sp, #116	; 0x74
 80044c2:	d50e      	bpl.n	80044e2 <_svfiprintf_r+0x32>
 80044c4:	690b      	ldr	r3, [r1, #16]
 80044c6:	b963      	cbnz	r3, 80044e2 <_svfiprintf_r+0x32>
 80044c8:	2140      	movs	r1, #64	; 0x40
 80044ca:	f7ff feff 	bl	80042cc <_malloc_r>
 80044ce:	6028      	str	r0, [r5, #0]
 80044d0:	6128      	str	r0, [r5, #16]
 80044d2:	b920      	cbnz	r0, 80044de <_svfiprintf_r+0x2e>
 80044d4:	230c      	movs	r3, #12
 80044d6:	603b      	str	r3, [r7, #0]
 80044d8:	f04f 30ff 	mov.w	r0, #4294967295
 80044dc:	e0d1      	b.n	8004682 <_svfiprintf_r+0x1d2>
 80044de:	2340      	movs	r3, #64	; 0x40
 80044e0:	616b      	str	r3, [r5, #20]
 80044e2:	2300      	movs	r3, #0
 80044e4:	9309      	str	r3, [sp, #36]	; 0x24
 80044e6:	2320      	movs	r3, #32
 80044e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80044ec:	2330      	movs	r3, #48	; 0x30
 80044ee:	f04f 0901 	mov.w	r9, #1
 80044f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80044f6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800469c <_svfiprintf_r+0x1ec>
 80044fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80044fe:	4623      	mov	r3, r4
 8004500:	469a      	mov	sl, r3
 8004502:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004506:	b10a      	cbz	r2, 800450c <_svfiprintf_r+0x5c>
 8004508:	2a25      	cmp	r2, #37	; 0x25
 800450a:	d1f9      	bne.n	8004500 <_svfiprintf_r+0x50>
 800450c:	ebba 0b04 	subs.w	fp, sl, r4
 8004510:	d00b      	beq.n	800452a <_svfiprintf_r+0x7a>
 8004512:	465b      	mov	r3, fp
 8004514:	4622      	mov	r2, r4
 8004516:	4629      	mov	r1, r5
 8004518:	4638      	mov	r0, r7
 800451a:	f7ff ff6d 	bl	80043f8 <__ssputs_r>
 800451e:	3001      	adds	r0, #1
 8004520:	f000 80aa 	beq.w	8004678 <_svfiprintf_r+0x1c8>
 8004524:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004526:	445a      	add	r2, fp
 8004528:	9209      	str	r2, [sp, #36]	; 0x24
 800452a:	f89a 3000 	ldrb.w	r3, [sl]
 800452e:	2b00      	cmp	r3, #0
 8004530:	f000 80a2 	beq.w	8004678 <_svfiprintf_r+0x1c8>
 8004534:	2300      	movs	r3, #0
 8004536:	f04f 32ff 	mov.w	r2, #4294967295
 800453a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800453e:	f10a 0a01 	add.w	sl, sl, #1
 8004542:	9304      	str	r3, [sp, #16]
 8004544:	9307      	str	r3, [sp, #28]
 8004546:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800454a:	931a      	str	r3, [sp, #104]	; 0x68
 800454c:	4654      	mov	r4, sl
 800454e:	2205      	movs	r2, #5
 8004550:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004554:	4851      	ldr	r0, [pc, #324]	; (800469c <_svfiprintf_r+0x1ec>)
 8004556:	f000 fa43 	bl	80049e0 <memchr>
 800455a:	9a04      	ldr	r2, [sp, #16]
 800455c:	b9d8      	cbnz	r0, 8004596 <_svfiprintf_r+0xe6>
 800455e:	06d0      	lsls	r0, r2, #27
 8004560:	bf44      	itt	mi
 8004562:	2320      	movmi	r3, #32
 8004564:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004568:	0711      	lsls	r1, r2, #28
 800456a:	bf44      	itt	mi
 800456c:	232b      	movmi	r3, #43	; 0x2b
 800456e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004572:	f89a 3000 	ldrb.w	r3, [sl]
 8004576:	2b2a      	cmp	r3, #42	; 0x2a
 8004578:	d015      	beq.n	80045a6 <_svfiprintf_r+0xf6>
 800457a:	4654      	mov	r4, sl
 800457c:	2000      	movs	r0, #0
 800457e:	f04f 0c0a 	mov.w	ip, #10
 8004582:	9a07      	ldr	r2, [sp, #28]
 8004584:	4621      	mov	r1, r4
 8004586:	f811 3b01 	ldrb.w	r3, [r1], #1
 800458a:	3b30      	subs	r3, #48	; 0x30
 800458c:	2b09      	cmp	r3, #9
 800458e:	d94e      	bls.n	800462e <_svfiprintf_r+0x17e>
 8004590:	b1b0      	cbz	r0, 80045c0 <_svfiprintf_r+0x110>
 8004592:	9207      	str	r2, [sp, #28]
 8004594:	e014      	b.n	80045c0 <_svfiprintf_r+0x110>
 8004596:	eba0 0308 	sub.w	r3, r0, r8
 800459a:	fa09 f303 	lsl.w	r3, r9, r3
 800459e:	4313      	orrs	r3, r2
 80045a0:	46a2      	mov	sl, r4
 80045a2:	9304      	str	r3, [sp, #16]
 80045a4:	e7d2      	b.n	800454c <_svfiprintf_r+0x9c>
 80045a6:	9b03      	ldr	r3, [sp, #12]
 80045a8:	1d19      	adds	r1, r3, #4
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	9103      	str	r1, [sp, #12]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	bfbb      	ittet	lt
 80045b2:	425b      	neglt	r3, r3
 80045b4:	f042 0202 	orrlt.w	r2, r2, #2
 80045b8:	9307      	strge	r3, [sp, #28]
 80045ba:	9307      	strlt	r3, [sp, #28]
 80045bc:	bfb8      	it	lt
 80045be:	9204      	strlt	r2, [sp, #16]
 80045c0:	7823      	ldrb	r3, [r4, #0]
 80045c2:	2b2e      	cmp	r3, #46	; 0x2e
 80045c4:	d10c      	bne.n	80045e0 <_svfiprintf_r+0x130>
 80045c6:	7863      	ldrb	r3, [r4, #1]
 80045c8:	2b2a      	cmp	r3, #42	; 0x2a
 80045ca:	d135      	bne.n	8004638 <_svfiprintf_r+0x188>
 80045cc:	9b03      	ldr	r3, [sp, #12]
 80045ce:	3402      	adds	r4, #2
 80045d0:	1d1a      	adds	r2, r3, #4
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	9203      	str	r2, [sp, #12]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	bfb8      	it	lt
 80045da:	f04f 33ff 	movlt.w	r3, #4294967295
 80045de:	9305      	str	r3, [sp, #20]
 80045e0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80046ac <_svfiprintf_r+0x1fc>
 80045e4:	2203      	movs	r2, #3
 80045e6:	4650      	mov	r0, sl
 80045e8:	7821      	ldrb	r1, [r4, #0]
 80045ea:	f000 f9f9 	bl	80049e0 <memchr>
 80045ee:	b140      	cbz	r0, 8004602 <_svfiprintf_r+0x152>
 80045f0:	2340      	movs	r3, #64	; 0x40
 80045f2:	eba0 000a 	sub.w	r0, r0, sl
 80045f6:	fa03 f000 	lsl.w	r0, r3, r0
 80045fa:	9b04      	ldr	r3, [sp, #16]
 80045fc:	3401      	adds	r4, #1
 80045fe:	4303      	orrs	r3, r0
 8004600:	9304      	str	r3, [sp, #16]
 8004602:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004606:	2206      	movs	r2, #6
 8004608:	4825      	ldr	r0, [pc, #148]	; (80046a0 <_svfiprintf_r+0x1f0>)
 800460a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800460e:	f000 f9e7 	bl	80049e0 <memchr>
 8004612:	2800      	cmp	r0, #0
 8004614:	d038      	beq.n	8004688 <_svfiprintf_r+0x1d8>
 8004616:	4b23      	ldr	r3, [pc, #140]	; (80046a4 <_svfiprintf_r+0x1f4>)
 8004618:	bb1b      	cbnz	r3, 8004662 <_svfiprintf_r+0x1b2>
 800461a:	9b03      	ldr	r3, [sp, #12]
 800461c:	3307      	adds	r3, #7
 800461e:	f023 0307 	bic.w	r3, r3, #7
 8004622:	3308      	adds	r3, #8
 8004624:	9303      	str	r3, [sp, #12]
 8004626:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004628:	4433      	add	r3, r6
 800462a:	9309      	str	r3, [sp, #36]	; 0x24
 800462c:	e767      	b.n	80044fe <_svfiprintf_r+0x4e>
 800462e:	460c      	mov	r4, r1
 8004630:	2001      	movs	r0, #1
 8004632:	fb0c 3202 	mla	r2, ip, r2, r3
 8004636:	e7a5      	b.n	8004584 <_svfiprintf_r+0xd4>
 8004638:	2300      	movs	r3, #0
 800463a:	f04f 0c0a 	mov.w	ip, #10
 800463e:	4619      	mov	r1, r3
 8004640:	3401      	adds	r4, #1
 8004642:	9305      	str	r3, [sp, #20]
 8004644:	4620      	mov	r0, r4
 8004646:	f810 2b01 	ldrb.w	r2, [r0], #1
 800464a:	3a30      	subs	r2, #48	; 0x30
 800464c:	2a09      	cmp	r2, #9
 800464e:	d903      	bls.n	8004658 <_svfiprintf_r+0x1a8>
 8004650:	2b00      	cmp	r3, #0
 8004652:	d0c5      	beq.n	80045e0 <_svfiprintf_r+0x130>
 8004654:	9105      	str	r1, [sp, #20]
 8004656:	e7c3      	b.n	80045e0 <_svfiprintf_r+0x130>
 8004658:	4604      	mov	r4, r0
 800465a:	2301      	movs	r3, #1
 800465c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004660:	e7f0      	b.n	8004644 <_svfiprintf_r+0x194>
 8004662:	ab03      	add	r3, sp, #12
 8004664:	9300      	str	r3, [sp, #0]
 8004666:	462a      	mov	r2, r5
 8004668:	4638      	mov	r0, r7
 800466a:	4b0f      	ldr	r3, [pc, #60]	; (80046a8 <_svfiprintf_r+0x1f8>)
 800466c:	a904      	add	r1, sp, #16
 800466e:	f3af 8000 	nop.w
 8004672:	1c42      	adds	r2, r0, #1
 8004674:	4606      	mov	r6, r0
 8004676:	d1d6      	bne.n	8004626 <_svfiprintf_r+0x176>
 8004678:	89ab      	ldrh	r3, [r5, #12]
 800467a:	065b      	lsls	r3, r3, #25
 800467c:	f53f af2c 	bmi.w	80044d8 <_svfiprintf_r+0x28>
 8004680:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004682:	b01d      	add	sp, #116	; 0x74
 8004684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004688:	ab03      	add	r3, sp, #12
 800468a:	9300      	str	r3, [sp, #0]
 800468c:	462a      	mov	r2, r5
 800468e:	4638      	mov	r0, r7
 8004690:	4b05      	ldr	r3, [pc, #20]	; (80046a8 <_svfiprintf_r+0x1f8>)
 8004692:	a904      	add	r1, sp, #16
 8004694:	f000 f87c 	bl	8004790 <_printf_i>
 8004698:	e7eb      	b.n	8004672 <_svfiprintf_r+0x1c2>
 800469a:	bf00      	nop
 800469c:	08004c02 	.word	0x08004c02
 80046a0:	08004c0c 	.word	0x08004c0c
 80046a4:	00000000 	.word	0x00000000
 80046a8:	080043f9 	.word	0x080043f9
 80046ac:	08004c08 	.word	0x08004c08

080046b0 <_printf_common>:
 80046b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046b4:	4616      	mov	r6, r2
 80046b6:	4699      	mov	r9, r3
 80046b8:	688a      	ldr	r2, [r1, #8]
 80046ba:	690b      	ldr	r3, [r1, #16]
 80046bc:	4607      	mov	r7, r0
 80046be:	4293      	cmp	r3, r2
 80046c0:	bfb8      	it	lt
 80046c2:	4613      	movlt	r3, r2
 80046c4:	6033      	str	r3, [r6, #0]
 80046c6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80046ca:	460c      	mov	r4, r1
 80046cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80046d0:	b10a      	cbz	r2, 80046d6 <_printf_common+0x26>
 80046d2:	3301      	adds	r3, #1
 80046d4:	6033      	str	r3, [r6, #0]
 80046d6:	6823      	ldr	r3, [r4, #0]
 80046d8:	0699      	lsls	r1, r3, #26
 80046da:	bf42      	ittt	mi
 80046dc:	6833      	ldrmi	r3, [r6, #0]
 80046de:	3302      	addmi	r3, #2
 80046e0:	6033      	strmi	r3, [r6, #0]
 80046e2:	6825      	ldr	r5, [r4, #0]
 80046e4:	f015 0506 	ands.w	r5, r5, #6
 80046e8:	d106      	bne.n	80046f8 <_printf_common+0x48>
 80046ea:	f104 0a19 	add.w	sl, r4, #25
 80046ee:	68e3      	ldr	r3, [r4, #12]
 80046f0:	6832      	ldr	r2, [r6, #0]
 80046f2:	1a9b      	subs	r3, r3, r2
 80046f4:	42ab      	cmp	r3, r5
 80046f6:	dc28      	bgt.n	800474a <_printf_common+0x9a>
 80046f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80046fc:	1e13      	subs	r3, r2, #0
 80046fe:	6822      	ldr	r2, [r4, #0]
 8004700:	bf18      	it	ne
 8004702:	2301      	movne	r3, #1
 8004704:	0692      	lsls	r2, r2, #26
 8004706:	d42d      	bmi.n	8004764 <_printf_common+0xb4>
 8004708:	4649      	mov	r1, r9
 800470a:	4638      	mov	r0, r7
 800470c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004710:	47c0      	blx	r8
 8004712:	3001      	adds	r0, #1
 8004714:	d020      	beq.n	8004758 <_printf_common+0xa8>
 8004716:	6823      	ldr	r3, [r4, #0]
 8004718:	68e5      	ldr	r5, [r4, #12]
 800471a:	f003 0306 	and.w	r3, r3, #6
 800471e:	2b04      	cmp	r3, #4
 8004720:	bf18      	it	ne
 8004722:	2500      	movne	r5, #0
 8004724:	6832      	ldr	r2, [r6, #0]
 8004726:	f04f 0600 	mov.w	r6, #0
 800472a:	68a3      	ldr	r3, [r4, #8]
 800472c:	bf08      	it	eq
 800472e:	1aad      	subeq	r5, r5, r2
 8004730:	6922      	ldr	r2, [r4, #16]
 8004732:	bf08      	it	eq
 8004734:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004738:	4293      	cmp	r3, r2
 800473a:	bfc4      	itt	gt
 800473c:	1a9b      	subgt	r3, r3, r2
 800473e:	18ed      	addgt	r5, r5, r3
 8004740:	341a      	adds	r4, #26
 8004742:	42b5      	cmp	r5, r6
 8004744:	d11a      	bne.n	800477c <_printf_common+0xcc>
 8004746:	2000      	movs	r0, #0
 8004748:	e008      	b.n	800475c <_printf_common+0xac>
 800474a:	2301      	movs	r3, #1
 800474c:	4652      	mov	r2, sl
 800474e:	4649      	mov	r1, r9
 8004750:	4638      	mov	r0, r7
 8004752:	47c0      	blx	r8
 8004754:	3001      	adds	r0, #1
 8004756:	d103      	bne.n	8004760 <_printf_common+0xb0>
 8004758:	f04f 30ff 	mov.w	r0, #4294967295
 800475c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004760:	3501      	adds	r5, #1
 8004762:	e7c4      	b.n	80046ee <_printf_common+0x3e>
 8004764:	2030      	movs	r0, #48	; 0x30
 8004766:	18e1      	adds	r1, r4, r3
 8004768:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800476c:	1c5a      	adds	r2, r3, #1
 800476e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004772:	4422      	add	r2, r4
 8004774:	3302      	adds	r3, #2
 8004776:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800477a:	e7c5      	b.n	8004708 <_printf_common+0x58>
 800477c:	2301      	movs	r3, #1
 800477e:	4622      	mov	r2, r4
 8004780:	4649      	mov	r1, r9
 8004782:	4638      	mov	r0, r7
 8004784:	47c0      	blx	r8
 8004786:	3001      	adds	r0, #1
 8004788:	d0e6      	beq.n	8004758 <_printf_common+0xa8>
 800478a:	3601      	adds	r6, #1
 800478c:	e7d9      	b.n	8004742 <_printf_common+0x92>
	...

08004790 <_printf_i>:
 8004790:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004794:	460c      	mov	r4, r1
 8004796:	7e27      	ldrb	r7, [r4, #24]
 8004798:	4691      	mov	r9, r2
 800479a:	2f78      	cmp	r7, #120	; 0x78
 800479c:	4680      	mov	r8, r0
 800479e:	469a      	mov	sl, r3
 80047a0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80047a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80047a6:	d807      	bhi.n	80047b8 <_printf_i+0x28>
 80047a8:	2f62      	cmp	r7, #98	; 0x62
 80047aa:	d80a      	bhi.n	80047c2 <_printf_i+0x32>
 80047ac:	2f00      	cmp	r7, #0
 80047ae:	f000 80d9 	beq.w	8004964 <_printf_i+0x1d4>
 80047b2:	2f58      	cmp	r7, #88	; 0x58
 80047b4:	f000 80a4 	beq.w	8004900 <_printf_i+0x170>
 80047b8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80047bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80047c0:	e03a      	b.n	8004838 <_printf_i+0xa8>
 80047c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80047c6:	2b15      	cmp	r3, #21
 80047c8:	d8f6      	bhi.n	80047b8 <_printf_i+0x28>
 80047ca:	a001      	add	r0, pc, #4	; (adr r0, 80047d0 <_printf_i+0x40>)
 80047cc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80047d0:	08004829 	.word	0x08004829
 80047d4:	0800483d 	.word	0x0800483d
 80047d8:	080047b9 	.word	0x080047b9
 80047dc:	080047b9 	.word	0x080047b9
 80047e0:	080047b9 	.word	0x080047b9
 80047e4:	080047b9 	.word	0x080047b9
 80047e8:	0800483d 	.word	0x0800483d
 80047ec:	080047b9 	.word	0x080047b9
 80047f0:	080047b9 	.word	0x080047b9
 80047f4:	080047b9 	.word	0x080047b9
 80047f8:	080047b9 	.word	0x080047b9
 80047fc:	0800494b 	.word	0x0800494b
 8004800:	0800486d 	.word	0x0800486d
 8004804:	0800492d 	.word	0x0800492d
 8004808:	080047b9 	.word	0x080047b9
 800480c:	080047b9 	.word	0x080047b9
 8004810:	0800496d 	.word	0x0800496d
 8004814:	080047b9 	.word	0x080047b9
 8004818:	0800486d 	.word	0x0800486d
 800481c:	080047b9 	.word	0x080047b9
 8004820:	080047b9 	.word	0x080047b9
 8004824:	08004935 	.word	0x08004935
 8004828:	680b      	ldr	r3, [r1, #0]
 800482a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800482e:	1d1a      	adds	r2, r3, #4
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	600a      	str	r2, [r1, #0]
 8004834:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004838:	2301      	movs	r3, #1
 800483a:	e0a4      	b.n	8004986 <_printf_i+0x1f6>
 800483c:	6825      	ldr	r5, [r4, #0]
 800483e:	6808      	ldr	r0, [r1, #0]
 8004840:	062e      	lsls	r6, r5, #24
 8004842:	f100 0304 	add.w	r3, r0, #4
 8004846:	d50a      	bpl.n	800485e <_printf_i+0xce>
 8004848:	6805      	ldr	r5, [r0, #0]
 800484a:	600b      	str	r3, [r1, #0]
 800484c:	2d00      	cmp	r5, #0
 800484e:	da03      	bge.n	8004858 <_printf_i+0xc8>
 8004850:	232d      	movs	r3, #45	; 0x2d
 8004852:	426d      	negs	r5, r5
 8004854:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004858:	230a      	movs	r3, #10
 800485a:	485e      	ldr	r0, [pc, #376]	; (80049d4 <_printf_i+0x244>)
 800485c:	e019      	b.n	8004892 <_printf_i+0x102>
 800485e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004862:	6805      	ldr	r5, [r0, #0]
 8004864:	600b      	str	r3, [r1, #0]
 8004866:	bf18      	it	ne
 8004868:	b22d      	sxthne	r5, r5
 800486a:	e7ef      	b.n	800484c <_printf_i+0xbc>
 800486c:	680b      	ldr	r3, [r1, #0]
 800486e:	6825      	ldr	r5, [r4, #0]
 8004870:	1d18      	adds	r0, r3, #4
 8004872:	6008      	str	r0, [r1, #0]
 8004874:	0628      	lsls	r0, r5, #24
 8004876:	d501      	bpl.n	800487c <_printf_i+0xec>
 8004878:	681d      	ldr	r5, [r3, #0]
 800487a:	e002      	b.n	8004882 <_printf_i+0xf2>
 800487c:	0669      	lsls	r1, r5, #25
 800487e:	d5fb      	bpl.n	8004878 <_printf_i+0xe8>
 8004880:	881d      	ldrh	r5, [r3, #0]
 8004882:	2f6f      	cmp	r7, #111	; 0x6f
 8004884:	bf0c      	ite	eq
 8004886:	2308      	moveq	r3, #8
 8004888:	230a      	movne	r3, #10
 800488a:	4852      	ldr	r0, [pc, #328]	; (80049d4 <_printf_i+0x244>)
 800488c:	2100      	movs	r1, #0
 800488e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004892:	6866      	ldr	r6, [r4, #4]
 8004894:	2e00      	cmp	r6, #0
 8004896:	bfa8      	it	ge
 8004898:	6821      	ldrge	r1, [r4, #0]
 800489a:	60a6      	str	r6, [r4, #8]
 800489c:	bfa4      	itt	ge
 800489e:	f021 0104 	bicge.w	r1, r1, #4
 80048a2:	6021      	strge	r1, [r4, #0]
 80048a4:	b90d      	cbnz	r5, 80048aa <_printf_i+0x11a>
 80048a6:	2e00      	cmp	r6, #0
 80048a8:	d04d      	beq.n	8004946 <_printf_i+0x1b6>
 80048aa:	4616      	mov	r6, r2
 80048ac:	fbb5 f1f3 	udiv	r1, r5, r3
 80048b0:	fb03 5711 	mls	r7, r3, r1, r5
 80048b4:	5dc7      	ldrb	r7, [r0, r7]
 80048b6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80048ba:	462f      	mov	r7, r5
 80048bc:	42bb      	cmp	r3, r7
 80048be:	460d      	mov	r5, r1
 80048c0:	d9f4      	bls.n	80048ac <_printf_i+0x11c>
 80048c2:	2b08      	cmp	r3, #8
 80048c4:	d10b      	bne.n	80048de <_printf_i+0x14e>
 80048c6:	6823      	ldr	r3, [r4, #0]
 80048c8:	07df      	lsls	r7, r3, #31
 80048ca:	d508      	bpl.n	80048de <_printf_i+0x14e>
 80048cc:	6923      	ldr	r3, [r4, #16]
 80048ce:	6861      	ldr	r1, [r4, #4]
 80048d0:	4299      	cmp	r1, r3
 80048d2:	bfde      	ittt	le
 80048d4:	2330      	movle	r3, #48	; 0x30
 80048d6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80048da:	f106 36ff 	addle.w	r6, r6, #4294967295
 80048de:	1b92      	subs	r2, r2, r6
 80048e0:	6122      	str	r2, [r4, #16]
 80048e2:	464b      	mov	r3, r9
 80048e4:	4621      	mov	r1, r4
 80048e6:	4640      	mov	r0, r8
 80048e8:	f8cd a000 	str.w	sl, [sp]
 80048ec:	aa03      	add	r2, sp, #12
 80048ee:	f7ff fedf 	bl	80046b0 <_printf_common>
 80048f2:	3001      	adds	r0, #1
 80048f4:	d14c      	bne.n	8004990 <_printf_i+0x200>
 80048f6:	f04f 30ff 	mov.w	r0, #4294967295
 80048fa:	b004      	add	sp, #16
 80048fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004900:	4834      	ldr	r0, [pc, #208]	; (80049d4 <_printf_i+0x244>)
 8004902:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004906:	680e      	ldr	r6, [r1, #0]
 8004908:	6823      	ldr	r3, [r4, #0]
 800490a:	f856 5b04 	ldr.w	r5, [r6], #4
 800490e:	061f      	lsls	r7, r3, #24
 8004910:	600e      	str	r6, [r1, #0]
 8004912:	d514      	bpl.n	800493e <_printf_i+0x1ae>
 8004914:	07d9      	lsls	r1, r3, #31
 8004916:	bf44      	itt	mi
 8004918:	f043 0320 	orrmi.w	r3, r3, #32
 800491c:	6023      	strmi	r3, [r4, #0]
 800491e:	b91d      	cbnz	r5, 8004928 <_printf_i+0x198>
 8004920:	6823      	ldr	r3, [r4, #0]
 8004922:	f023 0320 	bic.w	r3, r3, #32
 8004926:	6023      	str	r3, [r4, #0]
 8004928:	2310      	movs	r3, #16
 800492a:	e7af      	b.n	800488c <_printf_i+0xfc>
 800492c:	6823      	ldr	r3, [r4, #0]
 800492e:	f043 0320 	orr.w	r3, r3, #32
 8004932:	6023      	str	r3, [r4, #0]
 8004934:	2378      	movs	r3, #120	; 0x78
 8004936:	4828      	ldr	r0, [pc, #160]	; (80049d8 <_printf_i+0x248>)
 8004938:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800493c:	e7e3      	b.n	8004906 <_printf_i+0x176>
 800493e:	065e      	lsls	r6, r3, #25
 8004940:	bf48      	it	mi
 8004942:	b2ad      	uxthmi	r5, r5
 8004944:	e7e6      	b.n	8004914 <_printf_i+0x184>
 8004946:	4616      	mov	r6, r2
 8004948:	e7bb      	b.n	80048c2 <_printf_i+0x132>
 800494a:	680b      	ldr	r3, [r1, #0]
 800494c:	6826      	ldr	r6, [r4, #0]
 800494e:	1d1d      	adds	r5, r3, #4
 8004950:	6960      	ldr	r0, [r4, #20]
 8004952:	600d      	str	r5, [r1, #0]
 8004954:	0635      	lsls	r5, r6, #24
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	d501      	bpl.n	800495e <_printf_i+0x1ce>
 800495a:	6018      	str	r0, [r3, #0]
 800495c:	e002      	b.n	8004964 <_printf_i+0x1d4>
 800495e:	0671      	lsls	r1, r6, #25
 8004960:	d5fb      	bpl.n	800495a <_printf_i+0x1ca>
 8004962:	8018      	strh	r0, [r3, #0]
 8004964:	2300      	movs	r3, #0
 8004966:	4616      	mov	r6, r2
 8004968:	6123      	str	r3, [r4, #16]
 800496a:	e7ba      	b.n	80048e2 <_printf_i+0x152>
 800496c:	680b      	ldr	r3, [r1, #0]
 800496e:	1d1a      	adds	r2, r3, #4
 8004970:	600a      	str	r2, [r1, #0]
 8004972:	681e      	ldr	r6, [r3, #0]
 8004974:	2100      	movs	r1, #0
 8004976:	4630      	mov	r0, r6
 8004978:	6862      	ldr	r2, [r4, #4]
 800497a:	f000 f831 	bl	80049e0 <memchr>
 800497e:	b108      	cbz	r0, 8004984 <_printf_i+0x1f4>
 8004980:	1b80      	subs	r0, r0, r6
 8004982:	6060      	str	r0, [r4, #4]
 8004984:	6863      	ldr	r3, [r4, #4]
 8004986:	6123      	str	r3, [r4, #16]
 8004988:	2300      	movs	r3, #0
 800498a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800498e:	e7a8      	b.n	80048e2 <_printf_i+0x152>
 8004990:	4632      	mov	r2, r6
 8004992:	4649      	mov	r1, r9
 8004994:	4640      	mov	r0, r8
 8004996:	6923      	ldr	r3, [r4, #16]
 8004998:	47d0      	blx	sl
 800499a:	3001      	adds	r0, #1
 800499c:	d0ab      	beq.n	80048f6 <_printf_i+0x166>
 800499e:	6823      	ldr	r3, [r4, #0]
 80049a0:	079b      	lsls	r3, r3, #30
 80049a2:	d413      	bmi.n	80049cc <_printf_i+0x23c>
 80049a4:	68e0      	ldr	r0, [r4, #12]
 80049a6:	9b03      	ldr	r3, [sp, #12]
 80049a8:	4298      	cmp	r0, r3
 80049aa:	bfb8      	it	lt
 80049ac:	4618      	movlt	r0, r3
 80049ae:	e7a4      	b.n	80048fa <_printf_i+0x16a>
 80049b0:	2301      	movs	r3, #1
 80049b2:	4632      	mov	r2, r6
 80049b4:	4649      	mov	r1, r9
 80049b6:	4640      	mov	r0, r8
 80049b8:	47d0      	blx	sl
 80049ba:	3001      	adds	r0, #1
 80049bc:	d09b      	beq.n	80048f6 <_printf_i+0x166>
 80049be:	3501      	adds	r5, #1
 80049c0:	68e3      	ldr	r3, [r4, #12]
 80049c2:	9903      	ldr	r1, [sp, #12]
 80049c4:	1a5b      	subs	r3, r3, r1
 80049c6:	42ab      	cmp	r3, r5
 80049c8:	dcf2      	bgt.n	80049b0 <_printf_i+0x220>
 80049ca:	e7eb      	b.n	80049a4 <_printf_i+0x214>
 80049cc:	2500      	movs	r5, #0
 80049ce:	f104 0619 	add.w	r6, r4, #25
 80049d2:	e7f5      	b.n	80049c0 <_printf_i+0x230>
 80049d4:	08004c13 	.word	0x08004c13
 80049d8:	08004c24 	.word	0x08004c24

080049dc <__retarget_lock_acquire_recursive>:
 80049dc:	4770      	bx	lr

080049de <__retarget_lock_release_recursive>:
 80049de:	4770      	bx	lr

080049e0 <memchr>:
 80049e0:	4603      	mov	r3, r0
 80049e2:	b510      	push	{r4, lr}
 80049e4:	b2c9      	uxtb	r1, r1
 80049e6:	4402      	add	r2, r0
 80049e8:	4293      	cmp	r3, r2
 80049ea:	4618      	mov	r0, r3
 80049ec:	d101      	bne.n	80049f2 <memchr+0x12>
 80049ee:	2000      	movs	r0, #0
 80049f0:	e003      	b.n	80049fa <memchr+0x1a>
 80049f2:	7804      	ldrb	r4, [r0, #0]
 80049f4:	3301      	adds	r3, #1
 80049f6:	428c      	cmp	r4, r1
 80049f8:	d1f6      	bne.n	80049e8 <memchr+0x8>
 80049fa:	bd10      	pop	{r4, pc}

080049fc <memcpy>:
 80049fc:	440a      	add	r2, r1
 80049fe:	4291      	cmp	r1, r2
 8004a00:	f100 33ff 	add.w	r3, r0, #4294967295
 8004a04:	d100      	bne.n	8004a08 <memcpy+0xc>
 8004a06:	4770      	bx	lr
 8004a08:	b510      	push	{r4, lr}
 8004a0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a0e:	4291      	cmp	r1, r2
 8004a10:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a14:	d1f9      	bne.n	8004a0a <memcpy+0xe>
 8004a16:	bd10      	pop	{r4, pc}

08004a18 <memmove>:
 8004a18:	4288      	cmp	r0, r1
 8004a1a:	b510      	push	{r4, lr}
 8004a1c:	eb01 0402 	add.w	r4, r1, r2
 8004a20:	d902      	bls.n	8004a28 <memmove+0x10>
 8004a22:	4284      	cmp	r4, r0
 8004a24:	4623      	mov	r3, r4
 8004a26:	d807      	bhi.n	8004a38 <memmove+0x20>
 8004a28:	1e43      	subs	r3, r0, #1
 8004a2a:	42a1      	cmp	r1, r4
 8004a2c:	d008      	beq.n	8004a40 <memmove+0x28>
 8004a2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004a32:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004a36:	e7f8      	b.n	8004a2a <memmove+0x12>
 8004a38:	4601      	mov	r1, r0
 8004a3a:	4402      	add	r2, r0
 8004a3c:	428a      	cmp	r2, r1
 8004a3e:	d100      	bne.n	8004a42 <memmove+0x2a>
 8004a40:	bd10      	pop	{r4, pc}
 8004a42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004a46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004a4a:	e7f7      	b.n	8004a3c <memmove+0x24>

08004a4c <_realloc_r>:
 8004a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a4e:	4607      	mov	r7, r0
 8004a50:	4614      	mov	r4, r2
 8004a52:	460e      	mov	r6, r1
 8004a54:	b921      	cbnz	r1, 8004a60 <_realloc_r+0x14>
 8004a56:	4611      	mov	r1, r2
 8004a58:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004a5c:	f7ff bc36 	b.w	80042cc <_malloc_r>
 8004a60:	b922      	cbnz	r2, 8004a6c <_realloc_r+0x20>
 8004a62:	f7ff fbe7 	bl	8004234 <_free_r>
 8004a66:	4625      	mov	r5, r4
 8004a68:	4628      	mov	r0, r5
 8004a6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a6c:	f000 f814 	bl	8004a98 <_malloc_usable_size_r>
 8004a70:	42a0      	cmp	r0, r4
 8004a72:	d20f      	bcs.n	8004a94 <_realloc_r+0x48>
 8004a74:	4621      	mov	r1, r4
 8004a76:	4638      	mov	r0, r7
 8004a78:	f7ff fc28 	bl	80042cc <_malloc_r>
 8004a7c:	4605      	mov	r5, r0
 8004a7e:	2800      	cmp	r0, #0
 8004a80:	d0f2      	beq.n	8004a68 <_realloc_r+0x1c>
 8004a82:	4631      	mov	r1, r6
 8004a84:	4622      	mov	r2, r4
 8004a86:	f7ff ffb9 	bl	80049fc <memcpy>
 8004a8a:	4631      	mov	r1, r6
 8004a8c:	4638      	mov	r0, r7
 8004a8e:	f7ff fbd1 	bl	8004234 <_free_r>
 8004a92:	e7e9      	b.n	8004a68 <_realloc_r+0x1c>
 8004a94:	4635      	mov	r5, r6
 8004a96:	e7e7      	b.n	8004a68 <_realloc_r+0x1c>

08004a98 <_malloc_usable_size_r>:
 8004a98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a9c:	1f18      	subs	r0, r3, #4
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	bfbc      	itt	lt
 8004aa2:	580b      	ldrlt	r3, [r1, r0]
 8004aa4:	18c0      	addlt	r0, r0, r3
 8004aa6:	4770      	bx	lr

08004aa8 <_init>:
 8004aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aaa:	bf00      	nop
 8004aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aae:	bc08      	pop	{r3}
 8004ab0:	469e      	mov	lr, r3
 8004ab2:	4770      	bx	lr

08004ab4 <_fini>:
 8004ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ab6:	bf00      	nop
 8004ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aba:	bc08      	pop	{r3}
 8004abc:	469e      	mov	lr, r3
 8004abe:	4770      	bx	lr
